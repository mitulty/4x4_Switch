// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  in_data_1 : $uint<32>  $depth 3 
// can point into 
// in scope  top-level
$pipe [in_data_1] 32 $depth 3 
// $pipe  in_data_2 : $uint<32>  $depth 3 
// can point into 
// in scope  top-level
$pipe [in_data_2] 32 $depth 3 
// $pipe  in_data_3 : $uint<32>  $depth 3 
// can point into 
// in scope  top-level
$pipe [in_data_3] 32 $depth 3 
// $pipe  in_data_4 : $uint<32>  $depth 3 
// can point into 
// in scope  top-level
$pipe [in_data_4] 32 $depth 3 
// $noblock $pipe  noblock_obuf_1_1 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_1] 33 $depth 256 
// $noblock $pipe  noblock_obuf_1_2 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_2] 33 $depth 256 
// $noblock $pipe  noblock_obuf_1_3 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_3] 33 $depth 256 
// $noblock $pipe  noblock_obuf_1_4 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_1_4] 33 $depth 256 
// $noblock $pipe  noblock_obuf_2_1 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_1] 33 $depth 256 
// $noblock $pipe  noblock_obuf_2_2 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_2] 33 $depth 256 
// $noblock $pipe  noblock_obuf_2_3 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_3] 33 $depth 256 
// $noblock $pipe  noblock_obuf_2_4 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_2_4] 33 $depth 256 
// $noblock $pipe  noblock_obuf_3_1 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_1] 33 $depth 256 
// $noblock $pipe  noblock_obuf_3_2 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_2] 33 $depth 256 
// $noblock $pipe  noblock_obuf_3_3 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_3] 33 $depth 256 
// $noblock $pipe  noblock_obuf_3_4 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_3_4] 33 $depth 256 
// $noblock $pipe  noblock_obuf_4_1 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_1] 33 $depth 256 
// $noblock $pipe  noblock_obuf_4_2 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_2] 33 $depth 256 
// $noblock $pipe  noblock_obuf_4_3 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_3] 33 $depth 256 
// $noblock $pipe  noblock_obuf_4_4 : $uint<33>  $depth 256 
// can point into 
// in scope  top-level
$noblock $pipe [noblock_obuf_4_4] 33 $depth 256 
// $pipe  out_data_1 : $uint<32>  $depth 3 
// can point into 
// in scope  top-level
$pipe [out_data_1] 32 $depth 3 
// $pipe  out_data_2 : $uint<32>  $depth 3 
// can point into 
// in scope  top-level
$pipe [out_data_2] 32 $depth 3 
// $pipe  out_data_3 : $uint<32>  $depth 3 
// can point into 
// in scope  top-level
$pipe [out_data_3] 32 $depth 3 
// $pipe  out_data_4 : $uint<32>  $depth 3 
// can point into 
// in scope  top-level
$pipe [out_data_4] 32 $depth 3 
$constant $W[FOUR] : $int<3> := _b100// 4
$constant $W[ONE_1] : $int<1> := _b1// 1
$constant $W[ONE_2] : $int<2> := _b01// 1
$constant $W[ONE_3] : $int<3> := _b001// 1
$constant $W[ONE_33] : $int<33> := _b000000000000000000000000000000001// 1
$constant $W[ONE_8] : $int<8> := _b00000001// 1
$constant $W[ZERO_1] : $int<1> := _b0// 0
$constant $W[ZERO_16] : $int<16> := _b0000000000000000// 0
$constant $W[ZERO_2] : $int<2> := _b00// 0
$constant $W[ZERO_3] : $int<3> := _b000// 0
$constant $W[ZERO_33] : $int<33> := _b000000000000000000000000000000000// 0
$constant $W[ZERO_8] : $int<8> := _b00000000// 0
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file .Aa/switch4x4.opt.aa, line 61
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file .Aa/switch4x4.opt.aa, line 61
  }
  // end data-path
}
$module [inputPort_1_Daemon] 
{
  // pipe-declarations for block %inputPort_1_Daemon
  //  file .Aa/switch4x4.opt.aa, line 68
  // pipe-declarations for block %inputPort_1_Daemon%loop
  //  file .Aa/switch4x4.opt.aa, line 73
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_71] // Branch Block  file .Aa/switch4x4.opt.aa, line 73
    {
      $P [branch_block_stmt_71__entry__]
      branch_block_stmt_71__entry__ <-| ($entry)
      $P [branch_block_stmt_71__exit__]
      branch_block_stmt_71__exit__ |-> ($exit)
      $P [do_while_stmt_72__entry__] 
      $P [do_while_stmt_72__exit__] 
      // do-while-statement  
      //  file .Aa/switch4x4.opt.aa, line 75
      <o> [do_while_stmt_72]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_72__entry__] 
        $P[do_while_stmt_72__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_72_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_74
          // 			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
          // type of target is $uint<16>
          $T[phi_stmt_74_sample_start_] 
          $T[phi_stmt_74_sample_completed_] 
          $T[phi_stmt_74_update_start_] 
          $T[phi_stmt_74_update_completed_] 
          $T[phi_stmt_74_sample_start__ps] 
          phi_stmt_74_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_74_sample_completed__ps] 
          phi_stmt_74_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_74_update_start__ps] 
          phi_stmt_74_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_74_update_completed__ps] 
          phi_stmt_74_update_completed_ <-& (phi_stmt_74_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_74_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_74_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_74_update_start_)
          $T[phi_stmt_74_loopback_trigger] 
          phi_stmt_74_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_74_loopback_sample_req] 
          $T[phi_stmt_74_loopback_sample_req_ps] 
          phi_stmt_74_loopback_sample_req <-& (phi_stmt_74_loopback_sample_req_ps)
          phi_stmt_74_loopback_sample_req &-> ($null)
          $T[phi_stmt_74_entry_trigger] 
          phi_stmt_74_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_74_entry_sample_req] 
          $T[phi_stmt_74_entry_sample_req_ps] 
          phi_stmt_74_entry_sample_req <-& (phi_stmt_74_entry_sample_req_ps)
          phi_stmt_74_entry_sample_req &-> ($null)
          phi_stmt_74_update_start_ o<-& (phi_stmt_74_update_completed_ 0)
          phi_stmt_74_sample_start_ o<-& (phi_stmt_74_sample_completed_ 1)
          $T[phi_stmt_74_merged_reqs] 
          $T[phi_stmt_74_phi_mux_ack] 
          $T[phi_stmt_74_phi_mux_ack_ps] 
          phi_stmt_74_phi_mux_ack_ps <-& (phi_stmt_74_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_74_update_completed_)
          $T[R_next_count_down_76_sample_start__ps] 
          $T[R_next_count_down_76_sample_completed__ps] 
          $T[R_next_count_down_76_update_start__ps] 
          $T[R_next_count_down_76_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_next_count_down_76_sample_start_] 
          $T[R_next_count_down_76_sample_completed_] 
          $T[R_next_count_down_76_update_start_] 
          $T[R_next_count_down_76_update_completed_] 
          ;;[R_next_count_down_76_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_76_sample_start_ &-> (R_next_count_down_76_Sample)
          R_next_count_down_76_sample_completed_ <-& (R_next_count_down_76_Sample)
          ;;[R_next_count_down_76_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_76_update_start_ &-> (R_next_count_down_76_Update)
          R_next_count_down_76_update_completed_ <-& (R_next_count_down_76_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_76_sample_start_ <-& (R_next_count_down_76_sample_start__ps)
          R_next_count_down_76_update_start_ <-& (R_next_count_down_76_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_76_sample_completed__ps <-& (R_next_count_down_76_sample_completed_)
          R_next_count_down_76_update_completed__ps <-& (R_next_count_down_76_update_completed_)
          $T[type_cast_78_sample_start__ps] 
          $T[type_cast_78_sample_completed__ps] 
          $T[type_cast_78_update_start__ps] 
          $T[type_cast_78_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_78_sample_start_] 
          $T[type_cast_78_sample_completed_] 
          type_cast_78_sample_completed_ <-& (type_cast_78_sample_start_)
          $T[type_cast_78_update_start_] 
          $T [type_cast_78_update_completed_] $delay 
          type_cast_78_update_completed_ <-& (type_cast_78_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_78_sample_start_ <-& (type_cast_78_sample_start__ps)
          type_cast_78_update_start_ <-& (type_cast_78_update_start__ps)
          // Phi complete dependency.
          type_cast_78_sample_completed__ps <-& (type_cast_78_sample_completed_)
          type_cast_78_update_completed__ps <-& (type_cast_78_update_completed_)
          $phisequencer [ phi_stmt_74_phi_seq] : 
          phi_stmt_74_loopback_trigger R_next_count_down_76_sample_start__ps R_next_count_down_76_sample_completed__ps R_next_count_down_76_update_start__ps R_next_count_down_76_update_completed__ps phi_stmt_74_entry_trigger type_cast_78_sample_start__ps type_cast_78_sample_completed__ps type_cast_78_update_start__ps type_cast_78_update_completed__ps :
          phi_stmt_74_sample_start__ps phi_stmt_74_sample_completed__ps phi_stmt_74_update_start__ps phi_stmt_74_update_completed__ps :
          phi_stmt_74_loopback_sample_req_ps phi_stmt_74_entry_sample_req_ps : 
          phi_stmt_74_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_74
          // start:  single source PHI statement phi_stmt_79
          // 			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_79_sample_start_] 
          $T[phi_stmt_79_sample_completed_] 
          $T[phi_stmt_79_update_start_] 
          $T[phi_stmt_79_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_79_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_79_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_79_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_1
          $T[RPIPE_in_data_1_81_sample_start_] 
          $T[RPIPE_in_data_1_81_sample_completed_] 
          $T[RPIPE_in_data_1_81_update_start_] 
          $T[RPIPE_in_data_1_81_update_completed_] 
          ;;[RPIPE_in_data_1_81_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_1_81_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_1_81_sample_start_ &-> (RPIPE_in_data_1_81_Sample)
          RPIPE_in_data_1_81_sample_completed_ <-& (RPIPE_in_data_1_81_Sample)
          RPIPE_in_data_1_81_update_start_ <-& (RPIPE_in_data_1_81_sample_completed_)
          RPIPE_in_data_1_81_update_start_ &-> (RPIPE_in_data_1_81_Update)
          RPIPE_in_data_1_81_update_completed_ <-& (RPIPE_in_data_1_81_Update)
          RPIPE_in_data_1_81_sample_start_ o<-& (RPIPE_in_data_1_81_update_completed_ 0)
          // RAW reenables for in_data_1
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_1_81_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_1_81_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_1_81_update_start_)
          phi_stmt_79_update_completed_ <-& (RPIPE_in_data_1_81_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_79_update_completed_)
          // done: PHI Statement phi_stmt_79
          // start:  PHI statement phi_stmt_82
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_82_sample_start_] 
          $T[phi_stmt_82_sample_completed_] 
          $T[phi_stmt_82_update_start_] 
          $T[phi_stmt_82_update_completed_] 
          $T[phi_stmt_82_sample_start__ps] 
          phi_stmt_82_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_82_sample_completed__ps] 
          phi_stmt_82_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_82_update_start__ps] 
          phi_stmt_82_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_82_update_completed__ps] 
          phi_stmt_82_update_completed_ <-& (phi_stmt_82_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_82_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_82_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_82_update_start_)
          $T[phi_stmt_82_loopback_trigger] 
          phi_stmt_82_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_82_loopback_sample_req] 
          $T[phi_stmt_82_loopback_sample_req_ps] 
          phi_stmt_82_loopback_sample_req <-& (phi_stmt_82_loopback_sample_req_ps)
          phi_stmt_82_loopback_sample_req &-> ($null)
          $T[phi_stmt_82_entry_trigger] 
          phi_stmt_82_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_82_entry_sample_req] 
          $T[phi_stmt_82_entry_sample_req_ps] 
          phi_stmt_82_entry_sample_req <-& (phi_stmt_82_entry_sample_req_ps)
          phi_stmt_82_entry_sample_req &-> ($null)
          phi_stmt_82_update_start_ o<-& (phi_stmt_82_update_completed_ 0)
          phi_stmt_82_sample_start_ o<-& (phi_stmt_82_sample_completed_ 1)
          $T[phi_stmt_82_merged_reqs] 
          $T[phi_stmt_82_phi_mux_ack] 
          $T[phi_stmt_82_phi_mux_ack_ps] 
          phi_stmt_82_phi_mux_ack_ps <-& (phi_stmt_82_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_82_update_completed_)
          $T[konst_84_sample_start__ps] 
          $T[konst_84_sample_completed__ps] 
          $T[konst_84_update_start__ps] 
          $T[konst_84_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_84_sample_start_] 
          $T[konst_84_sample_completed_] 
          konst_84_sample_completed_ <-& (konst_84_sample_start_)
          $T[konst_84_update_start_] 
          $T [konst_84_update_completed_] $delay 
          konst_84_update_completed_ <-& (konst_84_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_84_sample_start_ <-& (konst_84_sample_start__ps)
          konst_84_update_start_ <-& (konst_84_update_start__ps)
          // Phi complete dependency.
          konst_84_sample_completed__ps <-& (konst_84_sample_completed_)
          konst_84_update_completed__ps <-& (konst_84_update_completed_)
          $T[R_next_last_dest_id_85_sample_start__ps] 
          $T[R_next_last_dest_id_85_sample_completed__ps] 
          $T[R_next_last_dest_id_85_update_start__ps] 
          $T[R_next_last_dest_id_85_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_85_sample_start_] 
          $T[R_next_last_dest_id_85_sample_completed_] 
          $T[R_next_last_dest_id_85_update_start_] 
          $T[R_next_last_dest_id_85_update_completed_] 
          ;;[R_next_last_dest_id_85_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_85_sample_start_ &-> (R_next_last_dest_id_85_Sample)
          R_next_last_dest_id_85_sample_completed_ <-& (R_next_last_dest_id_85_Sample)
          ;;[R_next_last_dest_id_85_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_85_update_start_ &-> (R_next_last_dest_id_85_Update)
          R_next_last_dest_id_85_update_completed_ <-& (R_next_last_dest_id_85_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_85_sample_start_ <-& (R_next_last_dest_id_85_sample_start__ps)
          R_next_last_dest_id_85_update_start_ <-& (R_next_last_dest_id_85_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_85_sample_completed__ps <-& (R_next_last_dest_id_85_sample_completed_)
          R_next_last_dest_id_85_update_completed__ps <-& (R_next_last_dest_id_85_update_completed_)
          $phisequencer [ phi_stmt_82_phi_seq] : 
          phi_stmt_82_entry_trigger konst_84_sample_start__ps konst_84_sample_completed__ps konst_84_update_start__ps konst_84_update_completed__ps phi_stmt_82_loopback_trigger R_next_last_dest_id_85_sample_start__ps R_next_last_dest_id_85_sample_completed__ps R_next_last_dest_id_85_update_start__ps R_next_last_dest_id_85_update_completed__ps :
          phi_stmt_82_sample_start__ps phi_stmt_82_sample_completed__ps phi_stmt_82_update_start__ps phi_stmt_82_update_completed__ps :
          phi_stmt_82_entry_sample_req_ps phi_stmt_82_loopback_sample_req_ps : 
          phi_stmt_82_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_82
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 85
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 87
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 88
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 89
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 90
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 91
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 92
          // volatile! 
          // Source expression
          // (next_last_dest_id == 1 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          // start:  			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch4x4.opt.aa, line 93
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_1_1
          $T[WPIPE_noblock_obuf_1_1_129_sample_start_] 
          $T[WPIPE_noblock_obuf_1_1_129_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_1_129_update_start_] 
          $T[WPIPE_noblock_obuf_1_1_129_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_1_129 with guard R_send_to_1_128
          WPIPE_noblock_obuf_1_1_129_sample_start_ <-& (phi_stmt_74_update_completed_)
          WPIPE_noblock_obuf_1_1_129_sample_start_ <-& (phi_stmt_79_update_completed_)
          WPIPE_noblock_obuf_1_1_129_sample_start_ <-& (phi_stmt_82_update_completed_)
          // RAW reenables for send_to_1
          phi_stmt_74_update_start_ o<-& (WPIPE_noblock_obuf_1_1_129_sample_completed_ 0)
          phi_stmt_79_update_start_ o<-& (WPIPE_noblock_obuf_1_1_129_sample_completed_ 0)
          phi_stmt_82_update_start_ o<-& (WPIPE_noblock_obuf_1_1_129_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_1_129_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_1_129_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_1_129_sample_start_ &-> (WPIPE_noblock_obuf_1_1_129_Sample)
          WPIPE_noblock_obuf_1_1_129_sample_completed_ <-& (WPIPE_noblock_obuf_1_1_129_Sample)
          WPIPE_noblock_obuf_1_1_129_update_start_ <-& (WPIPE_noblock_obuf_1_1_129_sample_completed_)
          WPIPE_noblock_obuf_1_1_129_update_start_ &-> (WPIPE_noblock_obuf_1_1_129_Update)
          WPIPE_noblock_obuf_1_1_129_update_completed_ <-& (WPIPE_noblock_obuf_1_1_129_Update)
          WPIPE_noblock_obuf_1_1_129_sample_start_ o<-& (WPIPE_noblock_obuf_1_1_129_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_1_129_sample_start_
          WPIPE_noblock_obuf_1_1_129_sample_start_ <-& (phi_stmt_79_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_1_129_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_79_update_start_ o<-& (WPIPE_noblock_obuf_1_1_129_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 94
          // volatile! 
          // Source expression
          // (next_last_dest_id == 2 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          // start:  			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch4x4.opt.aa, line 95
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_1_2
          $T[WPIPE_noblock_obuf_1_2_138_sample_start_] 
          $T[WPIPE_noblock_obuf_1_2_138_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_2_138_update_start_] 
          $T[WPIPE_noblock_obuf_1_2_138_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_2_138 with guard R_send_to_2_137
          WPIPE_noblock_obuf_1_2_138_sample_start_ <-& (phi_stmt_74_update_completed_)
          WPIPE_noblock_obuf_1_2_138_sample_start_ <-& (phi_stmt_79_update_completed_)
          WPIPE_noblock_obuf_1_2_138_sample_start_ <-& (phi_stmt_82_update_completed_)
          // RAW reenables for send_to_2
          phi_stmt_74_update_start_ o<-& (WPIPE_noblock_obuf_1_2_138_sample_completed_ 0)
          phi_stmt_79_update_start_ o<-& (WPIPE_noblock_obuf_1_2_138_sample_completed_ 0)
          phi_stmt_82_update_start_ o<-& (WPIPE_noblock_obuf_1_2_138_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_2_138_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_2_138_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_2_138_sample_start_ &-> (WPIPE_noblock_obuf_1_2_138_Sample)
          WPIPE_noblock_obuf_1_2_138_sample_completed_ <-& (WPIPE_noblock_obuf_1_2_138_Sample)
          WPIPE_noblock_obuf_1_2_138_update_start_ <-& (WPIPE_noblock_obuf_1_2_138_sample_completed_)
          WPIPE_noblock_obuf_1_2_138_update_start_ &-> (WPIPE_noblock_obuf_1_2_138_Update)
          WPIPE_noblock_obuf_1_2_138_update_completed_ <-& (WPIPE_noblock_obuf_1_2_138_Update)
          WPIPE_noblock_obuf_1_2_138_sample_start_ o<-& (WPIPE_noblock_obuf_1_2_138_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_2_138_sample_start_
          WPIPE_noblock_obuf_1_2_138_sample_start_ <-& (phi_stmt_79_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_2_138_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_79_update_start_ o<-& (WPIPE_noblock_obuf_1_2_138_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 96
          // volatile! 
          // Source expression
          // (next_last_dest_id == 3 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          // start:  			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch4x4.opt.aa, line 97
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_1_3
          $T[WPIPE_noblock_obuf_1_3_147_sample_start_] 
          $T[WPIPE_noblock_obuf_1_3_147_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_3_147_update_start_] 
          $T[WPIPE_noblock_obuf_1_3_147_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_3_147 with guard R_send_to_3_146
          WPIPE_noblock_obuf_1_3_147_sample_start_ <-& (phi_stmt_74_update_completed_)
          WPIPE_noblock_obuf_1_3_147_sample_start_ <-& (phi_stmt_79_update_completed_)
          WPIPE_noblock_obuf_1_3_147_sample_start_ <-& (phi_stmt_82_update_completed_)
          // RAW reenables for send_to_3
          phi_stmt_74_update_start_ o<-& (WPIPE_noblock_obuf_1_3_147_sample_completed_ 0)
          phi_stmt_79_update_start_ o<-& (WPIPE_noblock_obuf_1_3_147_sample_completed_ 0)
          phi_stmt_82_update_start_ o<-& (WPIPE_noblock_obuf_1_3_147_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_3_147_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_3_147_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_3_147_sample_start_ &-> (WPIPE_noblock_obuf_1_3_147_Sample)
          WPIPE_noblock_obuf_1_3_147_sample_completed_ <-& (WPIPE_noblock_obuf_1_3_147_Sample)
          WPIPE_noblock_obuf_1_3_147_update_start_ <-& (WPIPE_noblock_obuf_1_3_147_sample_completed_)
          WPIPE_noblock_obuf_1_3_147_update_start_ &-> (WPIPE_noblock_obuf_1_3_147_Update)
          WPIPE_noblock_obuf_1_3_147_update_completed_ <-& (WPIPE_noblock_obuf_1_3_147_Update)
          WPIPE_noblock_obuf_1_3_147_sample_start_ o<-& (WPIPE_noblock_obuf_1_3_147_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_3_147_sample_start_
          WPIPE_noblock_obuf_1_3_147_sample_start_ <-& (phi_stmt_79_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_3_147_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_79_update_start_ o<-& (WPIPE_noblock_obuf_1_3_147_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 98
          // volatile! 
          // Source expression
          // (next_last_dest_id == 4 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          // start:  			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch4x4.opt.aa, line 99
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_1_4
          $T[WPIPE_noblock_obuf_1_4_156_sample_start_] 
          $T[WPIPE_noblock_obuf_1_4_156_sample_completed_] 
          $T[WPIPE_noblock_obuf_1_4_156_update_start_] 
          $T[WPIPE_noblock_obuf_1_4_156_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_1_4_156 with guard R_send_to_4_155
          WPIPE_noblock_obuf_1_4_156_sample_start_ <-& (phi_stmt_74_update_completed_)
          WPIPE_noblock_obuf_1_4_156_sample_start_ <-& (phi_stmt_79_update_completed_)
          WPIPE_noblock_obuf_1_4_156_sample_start_ <-& (phi_stmt_82_update_completed_)
          // RAW reenables for send_to_4
          phi_stmt_74_update_start_ o<-& (WPIPE_noblock_obuf_1_4_156_sample_completed_ 0)
          phi_stmt_79_update_start_ o<-& (WPIPE_noblock_obuf_1_4_156_sample_completed_ 0)
          phi_stmt_82_update_start_ o<-& (WPIPE_noblock_obuf_1_4_156_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_1_4_156_Sample] 
          {
            // pipe write sample-start noblock_obuf_1_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_1_4_156_Update] 
          {
            // pipe write update (complete) noblock_obuf_1_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_1_4_156_sample_start_ &-> (WPIPE_noblock_obuf_1_4_156_Sample)
          WPIPE_noblock_obuf_1_4_156_sample_completed_ <-& (WPIPE_noblock_obuf_1_4_156_Sample)
          WPIPE_noblock_obuf_1_4_156_update_start_ <-& (WPIPE_noblock_obuf_1_4_156_sample_completed_)
          WPIPE_noblock_obuf_1_4_156_update_start_ &-> (WPIPE_noblock_obuf_1_4_156_Update)
          WPIPE_noblock_obuf_1_4_156_update_completed_ <-& (WPIPE_noblock_obuf_1_4_156_Update)
          WPIPE_noblock_obuf_1_4_156_sample_start_ o<-& (WPIPE_noblock_obuf_1_4_156_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_4_156_sample_start_
          WPIPE_noblock_obuf_1_4_156_sample_start_ <-& (phi_stmt_79_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_1_4_156_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_79_update_start_ o<-& (WPIPE_noblock_obuf_1_4_156_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe in_data_1
          // read-dependencies for pipe in_data_1
          // write-dependencies for pipe in_data_1
          // signal write dependencies for in_data_1
          // pipe read/write dependencies for pipe noblock_obuf_1_1
          // read-dependencies for pipe noblock_obuf_1_1
          // write-dependencies for pipe noblock_obuf_1_1
          // signal write dependencies for noblock_obuf_1_1
          // pipe read/write dependencies for pipe noblock_obuf_1_2
          // read-dependencies for pipe noblock_obuf_1_2
          // write-dependencies for pipe noblock_obuf_1_2
          // signal write dependencies for noblock_obuf_1_2
          // pipe read/write dependencies for pipe noblock_obuf_1_3
          // read-dependencies for pipe noblock_obuf_1_3
          // write-dependencies for pipe noblock_obuf_1_3
          // signal write dependencies for noblock_obuf_1_3
          // pipe read/write dependencies for pipe noblock_obuf_1_4
          // read-dependencies for pipe noblock_obuf_1_4
          // write-dependencies for pipe noblock_obuf_1_4
          // signal write dependencies for noblock_obuf_1_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_72__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_72_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_72__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_72_loop_body : condition_evaluated
        $bind do_while_stmt_72__entry__  => do_while_stmt_72_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_72_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_72__exit__)
      }
      do_while_stmt_72__entry__ |-> (do_while_stmt_72)
      do_while_stmt_72__exit__ <-| (do_while_stmt_72)
      do_while_stmt_72__entry__ <-| (branch_block_stmt_71__entry__)
      do_while_stmt_72__exit__ |-> (branch_block_stmt_71__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_1_Daemon%loop%
    //  file .Aa/switch4x4.opt.aa, line 77
    // constant-object-declarations for block %inputPort_1_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 73
    // constant-object-declarations for block %inputPort_1_Daemon
    //  file .Aa/switch4x4.opt.aa, line 68
    // constant-declarations for block %inputPort_1_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 73
    // do-while statement  
    //  file .Aa/switch4x4.opt.aa, line 75
    // 1 
    $constant $W[konst_170_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_1_Daemon%loop%
    //  file .Aa/switch4x4.opt.aa, line 77
    // constant-declarations for phi:  			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 78
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_78_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch4x4.opt.aa, line 80
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch4x4.opt.aa, line 82
    // 0 
    $constant $W[konst_84_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_89_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_105_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_108_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_119_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_125_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_134_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_143_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_152_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_1_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 73
    // do-while statement  
    //  file .Aa/switch4x4.opt.aa, line 75
    // merge-statement  
    //  file .Aa/switch4x4.opt.aa, line 77
    // 			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 78
    $W[next_count_down_111_76_buffered] : $int<16>
    // count_down
    $W[count_down_74] : $int<16>
    // 			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch4x4.opt.aa, line 80
    // in_data_1
    $W[RPIPE_in_data_1_81_wire] : $int<32>
    // input_word
    $W[input_word_79] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch4x4.opt.aa, line 82
    $W[next_last_dest_id_117_85_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_82] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 85
    // new_packet
    $W[new_packet_91] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 87
    // dest_id
    $W[dest_id_97] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 88
    // pkt_length
    $W[pkt_length_101] : $int<16>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 89
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_106_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_109_wire] : $int<16>
    // next_count_down
    $W[next_count_down_111] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 90
    // next_last_dest_id
    $W[next_last_dest_id_117] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 91
    // data_to_outport
    $W[data_to_outport_122] : $int<33>
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 92
    // send_to_1
    $W[send_to_1_127] : $int<1>
    // 			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 93
    // noblock_obuf_1_1
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 94
    // send_to_2
    $W[send_to_2_136] : $int<1>
    // 			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 95
    // noblock_obuf_1_2
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 96
    // send_to_3
    $W[send_to_3_145] : $int<1>
    // 			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 97
    // noblock_obuf_1_3
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 98
    // send_to_4
    $W[send_to_4_154] : $int<1>
    // 			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 99
    // noblock_obuf_1_4
    // datapath-instances for block %inputPort_1_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 73
    // datapath-instances for do-while  
    //  file .Aa/switch4x4.opt.aa, line 75
    ==0? [do_while_stmt_72_branch] (konst_170_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch4x4.opt.aa, line 77
    // 			$phi count_down := 			  next_count_down $on   $loopback 			  ($bitcast ($uint<16>) 0  ) $on   $entry 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 78
    # := [next_count_down_111_76_buf] (next_count_down_111) (next_count_down_111_76_buffered)     $fullrate
    $buffering $out next_count_down_111_76_buf next_count_down_111_76_buffered  1
    # $phi [phi_stmt_74] (next_count_down_111_76_buffered type_cast_78_wire_constant) ( count_down_74 ) $fullrate
    // $buffering  $out phi_stmt_74 count_down_74 2
    // 			$phi input_word := 			  in_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch4x4.opt.aa, line 80
    // in_data_1
    $ioport $in [RPIPE_in_data_1_81_inst] (in_data_1) (RPIPE_in_data_1_81_wire)  $fullrate 
    $buffering $out RPIPE_in_data_1_81_inst RPIPE_in_data_1_81_wire 1
    # := [ssrc_phi_stmt_79] (RPIPE_in_data_1_81_wire) (input_word_79)    $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch4x4.opt.aa, line 82
    # := [next_last_dest_id_117_85_buf] (next_last_dest_id_117) (next_last_dest_id_117_85_buffered)     $fullrate
    $buffering $out next_last_dest_id_117_85_buf next_last_dest_id_117_85_buffered  1
    # $phi [phi_stmt_82] (konst_84_wire_constant next_last_dest_id_117_85_buffered) ( last_dest_id_82 ) $fullrate
    // $buffering  $out phi_stmt_82 last_dest_id_82 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 85
    // (count_down == 0 )
    ==[EQ_u16_u1_90_inst] (count_down_74 konst_89_wire_constant) (new_packet_91)   $flowthrough 
    $delay EQ_u16_u1_90_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 87
    // ( $slice input_word 31 24 ) 
    [:] [slice_96_inst] (input_word_79 31 24) (dest_id_97)  $flowthrough
    $delay slice_96_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 88
    // ( $slice input_word 23 8 ) 
    [:] [slice_100_inst] (input_word_79 23 8) (pkt_length_101)  $flowthrough
    $delay slice_100_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 89
    // (pkt_length - 1 )
    -[SUB_u16_u16_106_inst] (pkt_length_101 konst_105_wire_constant) (SUB_u16_u16_106_wire)   $flowthrough 
    $delay SUB_u16_u16_106_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_109_inst] (count_down_74 konst_108_wire_constant) (SUB_u16_u16_109_wire)   $flowthrough 
    $delay SUB_u16_u16_109_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_110_inst] (new_packet_91 SUB_u16_u16_106_wire SUB_u16_u16_109_wire) (next_count_down_111)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 90
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_116_inst] (new_packet_91 dest_id_97 last_dest_id_82) (next_last_dest_id_117)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 91
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_121_inst] (R_ONE_1_119_wire_constant input_word_79) (data_to_outport_122)   $flowthrough 
    $delay CONCAT_u1_u33_121_inst 0
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 92
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_126_inst] (next_last_dest_id_117 konst_125_wire_constant) (send_to_1_127)   $flowthrough 
    $delay EQ_u8_u1_126_inst 0
    // 			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 93
    // noblock_obuf_1_1
    $ioport $out [WPIPE_noblock_obuf_1_1_129_inst]  (data_to_outport_122) (noblock_obuf_1_1) $guard ( send_to_1_127 )  $fullrate 
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 94
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_135_inst] (next_last_dest_id_117 konst_134_wire_constant) (send_to_2_136)   $flowthrough 
    $delay EQ_u8_u1_135_inst 0
    // 			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 95
    // noblock_obuf_1_2
    $ioport $out [WPIPE_noblock_obuf_1_2_138_inst]  (data_to_outport_122) (noblock_obuf_1_2) $guard ( send_to_2_136 )  $fullrate 
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 96
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_144_inst] (next_last_dest_id_117 konst_143_wire_constant) (send_to_3_145)   $flowthrough 
    $delay EQ_u8_u1_144_inst 0
    // 			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 97
    // noblock_obuf_1_3
    $ioport $out [WPIPE_noblock_obuf_1_3_147_inst]  (data_to_outport_122) (noblock_obuf_1_3) $guard ( send_to_3_145 )  $fullrate 
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 98
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_153_inst] (next_last_dest_id_117 konst_152_wire_constant) (send_to_4_154)   $flowthrough 
    $delay EQ_u8_u1_153_inst 0
    // 			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 99
    // noblock_obuf_1_4
    $ioport $out [WPIPE_noblock_obuf_1_4_156_inst]  (data_to_outport_122) (noblock_obuf_1_4) $guard ( send_to_4_154 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_72
  //  file .Aa/switch4x4.opt.aa, line 75
  phi_stmt_74 <=> (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/phi_stmt_74_loopback_sample_req branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/phi_stmt_74_entry_sample_req) (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/phi_stmt_74_phi_mux_ack)
  next_count_down_111_76_buf <=> (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/R_next_count_down_76_Sample/req branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/R_next_count_down_76_Update/req) (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/R_next_count_down_76_Sample/ack branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/R_next_count_down_76_Update/ack)
  // in_data_1
  RPIPE_in_data_1_81_inst <=> (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/RPIPE_in_data_1_81_Sample/rr branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/RPIPE_in_data_1_81_Update/cr) (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/RPIPE_in_data_1_81_Sample/ra branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/RPIPE_in_data_1_81_Update/ca)
  phi_stmt_82 <=> (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/phi_stmt_82_entry_sample_req branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/phi_stmt_82_loopback_sample_req) (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/phi_stmt_82_phi_mux_ack)
  next_last_dest_id_117_85_buf <=> (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/R_next_last_dest_id_85_Sample/req branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/R_next_last_dest_id_85_Update/req) (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/R_next_last_dest_id_85_Sample/ack branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/R_next_last_dest_id_85_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 85
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 87
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 88
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 89
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 90
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 91
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 92
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  // 			$guard (send_to_1) noblock_obuf_1_1 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch4x4.opt.aa, line 93
  // data_to_outport
  // noblock_obuf_1_1
  WPIPE_noblock_obuf_1_1_129_inst <=> (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/WPIPE_noblock_obuf_1_1_129_Sample/req branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/WPIPE_noblock_obuf_1_1_129_Update/req) (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/WPIPE_noblock_obuf_1_1_129_Sample/ack branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/WPIPE_noblock_obuf_1_1_129_Update/ack)
  // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 94
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  // 			$guard (send_to_2) noblock_obuf_1_2 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch4x4.opt.aa, line 95
  // data_to_outport
  // noblock_obuf_1_2
  WPIPE_noblock_obuf_1_2_138_inst <=> (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/WPIPE_noblock_obuf_1_2_138_Sample/req branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/WPIPE_noblock_obuf_1_2_138_Update/req) (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/WPIPE_noblock_obuf_1_2_138_Sample/ack branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/WPIPE_noblock_obuf_1_2_138_Update/ack)
  // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 96
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  // 			$guard (send_to_3) noblock_obuf_1_3 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch4x4.opt.aa, line 97
  // data_to_outport
  // noblock_obuf_1_3
  WPIPE_noblock_obuf_1_3_147_inst <=> (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/WPIPE_noblock_obuf_1_3_147_Sample/req branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/WPIPE_noblock_obuf_1_3_147_Update/req) (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/WPIPE_noblock_obuf_1_3_147_Sample/ack branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/WPIPE_noblock_obuf_1_3_147_Update/ack)
  // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 98
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  // 			$guard (send_to_4) noblock_obuf_1_4 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch4x4.opt.aa, line 99
  // data_to_outport
  // noblock_obuf_1_4
  WPIPE_noblock_obuf_1_4_156_inst <=> (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/WPIPE_noblock_obuf_1_4_156_Sample/req branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/WPIPE_noblock_obuf_1_4_156_Update/req) (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/WPIPE_noblock_obuf_1_4_156_Sample/ack branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/WPIPE_noblock_obuf_1_4_156_Update/ack)
  do_while_stmt_72_branch <=> (branch_block_stmt_71/do_while_stmt_72/do_while_stmt_72_loop_body/condition_evaluated) (branch_block_stmt_71/do_while_stmt_72/loop_exit/ack branch_block_stmt_71/do_while_stmt_72/loop_taken/ack)
}
$module [inputPort_2_Daemon] 
{
  // pipe-declarations for block %inputPort_2_Daemon
  //  file .Aa/switch4x4.opt.aa, line 104
  // pipe-declarations for block %inputPort_2_Daemon%loop
  //  file .Aa/switch4x4.opt.aa, line 109
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_174] // Branch Block  file .Aa/switch4x4.opt.aa, line 109
    {
      $P [branch_block_stmt_174__entry__]
      branch_block_stmt_174__entry__ <-| ($entry)
      $P [branch_block_stmt_174__exit__]
      branch_block_stmt_174__exit__ |-> ($exit)
      $P [do_while_stmt_175__entry__] 
      $P [do_while_stmt_175__exit__] 
      // do-while-statement  
      //  file .Aa/switch4x4.opt.aa, line 111
      <o> [do_while_stmt_175]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_175__entry__] 
        $P[do_while_stmt_175__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_175_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_177
          // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_177_sample_start_] 
          $T[phi_stmt_177_sample_completed_] 
          $T[phi_stmt_177_update_start_] 
          $T[phi_stmt_177_update_completed_] 
          $T[phi_stmt_177_sample_start__ps] 
          phi_stmt_177_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_177_sample_completed__ps] 
          phi_stmt_177_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_177_update_start__ps] 
          phi_stmt_177_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_177_update_completed__ps] 
          phi_stmt_177_update_completed_ <-& (phi_stmt_177_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_177_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_177_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_177_update_start_)
          $T[phi_stmt_177_loopback_trigger] 
          phi_stmt_177_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_177_loopback_sample_req] 
          $T[phi_stmt_177_loopback_sample_req_ps] 
          phi_stmt_177_loopback_sample_req <-& (phi_stmt_177_loopback_sample_req_ps)
          phi_stmt_177_loopback_sample_req &-> ($null)
          $T[phi_stmt_177_entry_trigger] 
          phi_stmt_177_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_177_entry_sample_req] 
          $T[phi_stmt_177_entry_sample_req_ps] 
          phi_stmt_177_entry_sample_req <-& (phi_stmt_177_entry_sample_req_ps)
          phi_stmt_177_entry_sample_req &-> ($null)
          phi_stmt_177_update_start_ o<-& (phi_stmt_177_update_completed_ 0)
          phi_stmt_177_sample_start_ o<-& (phi_stmt_177_sample_completed_ 1)
          $T[phi_stmt_177_merged_reqs] 
          $T[phi_stmt_177_phi_mux_ack] 
          $T[phi_stmt_177_phi_mux_ack_ps] 
          phi_stmt_177_phi_mux_ack_ps <-& (phi_stmt_177_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_177_update_completed_)
          $T[type_cast_180_sample_start__ps] 
          $T[type_cast_180_sample_completed__ps] 
          $T[type_cast_180_update_start__ps] 
          $T[type_cast_180_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_180_sample_start_] 
          $T[type_cast_180_sample_completed_] 
          type_cast_180_sample_completed_ <-& (type_cast_180_sample_start_)
          $T[type_cast_180_update_start_] 
          $T [type_cast_180_update_completed_] $delay 
          type_cast_180_update_completed_ <-& (type_cast_180_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_180_sample_start_ <-& (type_cast_180_sample_start__ps)
          type_cast_180_update_start_ <-& (type_cast_180_update_start__ps)
          // Phi complete dependency.
          type_cast_180_sample_completed__ps <-& (type_cast_180_sample_completed_)
          type_cast_180_update_completed__ps <-& (type_cast_180_update_completed_)
          $T[R_next_count_down_181_sample_start__ps] 
          $T[R_next_count_down_181_sample_completed__ps] 
          $T[R_next_count_down_181_update_start__ps] 
          $T[R_next_count_down_181_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_count_down_181_sample_start_] 
          $T[R_next_count_down_181_sample_completed_] 
          $T[R_next_count_down_181_update_start_] 
          $T[R_next_count_down_181_update_completed_] 
          ;;[R_next_count_down_181_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_181_sample_start_ &-> (R_next_count_down_181_Sample)
          R_next_count_down_181_sample_completed_ <-& (R_next_count_down_181_Sample)
          ;;[R_next_count_down_181_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_181_update_start_ &-> (R_next_count_down_181_Update)
          R_next_count_down_181_update_completed_ <-& (R_next_count_down_181_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_181_sample_start_ <-& (R_next_count_down_181_sample_start__ps)
          R_next_count_down_181_update_start_ <-& (R_next_count_down_181_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_181_sample_completed__ps <-& (R_next_count_down_181_sample_completed_)
          R_next_count_down_181_update_completed__ps <-& (R_next_count_down_181_update_completed_)
          $phisequencer [ phi_stmt_177_phi_seq] : 
          phi_stmt_177_entry_trigger type_cast_180_sample_start__ps type_cast_180_sample_completed__ps type_cast_180_update_start__ps type_cast_180_update_completed__ps phi_stmt_177_loopback_trigger R_next_count_down_181_sample_start__ps R_next_count_down_181_sample_completed__ps R_next_count_down_181_update_start__ps R_next_count_down_181_update_completed__ps :
          phi_stmt_177_sample_start__ps phi_stmt_177_sample_completed__ps phi_stmt_177_update_start__ps phi_stmt_177_update_completed__ps :
          phi_stmt_177_entry_sample_req_ps phi_stmt_177_loopback_sample_req_ps : 
          phi_stmt_177_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_177
          // start:  single source PHI statement phi_stmt_182
          // 			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_182_sample_start_] 
          $T[phi_stmt_182_sample_completed_] 
          $T[phi_stmt_182_update_start_] 
          $T[phi_stmt_182_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_182_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_182_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_182_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_2
          $T[RPIPE_in_data_2_184_sample_start_] 
          $T[RPIPE_in_data_2_184_sample_completed_] 
          $T[RPIPE_in_data_2_184_update_start_] 
          $T[RPIPE_in_data_2_184_update_completed_] 
          ;;[RPIPE_in_data_2_184_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_2_184_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_2_184_sample_start_ &-> (RPIPE_in_data_2_184_Sample)
          RPIPE_in_data_2_184_sample_completed_ <-& (RPIPE_in_data_2_184_Sample)
          RPIPE_in_data_2_184_update_start_ <-& (RPIPE_in_data_2_184_sample_completed_)
          RPIPE_in_data_2_184_update_start_ &-> (RPIPE_in_data_2_184_Update)
          RPIPE_in_data_2_184_update_completed_ <-& (RPIPE_in_data_2_184_Update)
          RPIPE_in_data_2_184_sample_start_ o<-& (RPIPE_in_data_2_184_update_completed_ 0)
          // RAW reenables for in_data_2
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_2_184_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_2_184_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_2_184_update_start_)
          phi_stmt_182_update_completed_ <-& (RPIPE_in_data_2_184_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_182_update_completed_)
          // done: PHI Statement phi_stmt_182
          // start:  PHI statement phi_stmt_185
          // 			$phi last_dest_id := 			  next_last_dest_id $on   $loopback 			  0  $on   $entry 
          // type of target is $uint<8>
          $T[phi_stmt_185_sample_start_] 
          $T[phi_stmt_185_sample_completed_] 
          $T[phi_stmt_185_update_start_] 
          $T[phi_stmt_185_update_completed_] 
          $T[phi_stmt_185_sample_start__ps] 
          phi_stmt_185_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_185_sample_completed__ps] 
          phi_stmt_185_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_185_update_start__ps] 
          phi_stmt_185_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_185_update_completed__ps] 
          phi_stmt_185_update_completed_ <-& (phi_stmt_185_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_185_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_185_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_185_update_start_)
          $T[phi_stmt_185_loopback_trigger] 
          phi_stmt_185_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_185_loopback_sample_req] 
          $T[phi_stmt_185_loopback_sample_req_ps] 
          phi_stmt_185_loopback_sample_req <-& (phi_stmt_185_loopback_sample_req_ps)
          phi_stmt_185_loopback_sample_req &-> ($null)
          $T[phi_stmt_185_entry_trigger] 
          phi_stmt_185_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_185_entry_sample_req] 
          $T[phi_stmt_185_entry_sample_req_ps] 
          phi_stmt_185_entry_sample_req <-& (phi_stmt_185_entry_sample_req_ps)
          phi_stmt_185_entry_sample_req &-> ($null)
          phi_stmt_185_update_start_ o<-& (phi_stmt_185_update_completed_ 0)
          phi_stmt_185_sample_start_ o<-& (phi_stmt_185_sample_completed_ 1)
          $T[phi_stmt_185_merged_reqs] 
          $T[phi_stmt_185_phi_mux_ack] 
          $T[phi_stmt_185_phi_mux_ack_ps] 
          phi_stmt_185_phi_mux_ack_ps <-& (phi_stmt_185_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_185_update_completed_)
          $T[R_next_last_dest_id_187_sample_start__ps] 
          $T[R_next_last_dest_id_187_sample_completed__ps] 
          $T[R_next_last_dest_id_187_update_start__ps] 
          $T[R_next_last_dest_id_187_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_next_last_dest_id_187_sample_start_] 
          $T[R_next_last_dest_id_187_sample_completed_] 
          $T[R_next_last_dest_id_187_update_start_] 
          $T[R_next_last_dest_id_187_update_completed_] 
          ;;[R_next_last_dest_id_187_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_187_sample_start_ &-> (R_next_last_dest_id_187_Sample)
          R_next_last_dest_id_187_sample_completed_ <-& (R_next_last_dest_id_187_Sample)
          ;;[R_next_last_dest_id_187_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_187_update_start_ &-> (R_next_last_dest_id_187_Update)
          R_next_last_dest_id_187_update_completed_ <-& (R_next_last_dest_id_187_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_187_sample_start_ <-& (R_next_last_dest_id_187_sample_start__ps)
          R_next_last_dest_id_187_update_start_ <-& (R_next_last_dest_id_187_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_187_sample_completed__ps <-& (R_next_last_dest_id_187_sample_completed_)
          R_next_last_dest_id_187_update_completed__ps <-& (R_next_last_dest_id_187_update_completed_)
          $T[konst_188_sample_start__ps] 
          $T[konst_188_sample_completed__ps] 
          $T[konst_188_update_start__ps] 
          $T[konst_188_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_188_sample_start_] 
          $T[konst_188_sample_completed_] 
          konst_188_sample_completed_ <-& (konst_188_sample_start_)
          $T[konst_188_update_start_] 
          $T [konst_188_update_completed_] $delay 
          konst_188_update_completed_ <-& (konst_188_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_188_sample_start_ <-& (konst_188_sample_start__ps)
          konst_188_update_start_ <-& (konst_188_update_start__ps)
          // Phi complete dependency.
          konst_188_sample_completed__ps <-& (konst_188_sample_completed_)
          konst_188_update_completed__ps <-& (konst_188_update_completed_)
          $phisequencer [ phi_stmt_185_phi_seq] : 
          phi_stmt_185_loopback_trigger R_next_last_dest_id_187_sample_start__ps R_next_last_dest_id_187_sample_completed__ps R_next_last_dest_id_187_update_start__ps R_next_last_dest_id_187_update_completed__ps phi_stmt_185_entry_trigger konst_188_sample_start__ps konst_188_sample_completed__ps konst_188_update_start__ps konst_188_update_completed__ps :
          phi_stmt_185_sample_start__ps phi_stmt_185_sample_completed__ps phi_stmt_185_update_start__ps phi_stmt_185_update_completed__ps :
          phi_stmt_185_loopback_sample_req_ps phi_stmt_185_entry_sample_req_ps : 
          phi_stmt_185_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_185
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 121
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 123
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 124
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 125
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 126
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 127
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 128
          // volatile! 
          // Source expression
          // (next_last_dest_id == 1 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          // start:  			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch4x4.opt.aa, line 129
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_2_1
          $T[WPIPE_noblock_obuf_2_1_232_sample_start_] 
          $T[WPIPE_noblock_obuf_2_1_232_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_1_232_update_start_] 
          $T[WPIPE_noblock_obuf_2_1_232_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_1_232 with guard R_send_to_1_231
          WPIPE_noblock_obuf_2_1_232_sample_start_ <-& (phi_stmt_177_update_completed_)
          WPIPE_noblock_obuf_2_1_232_sample_start_ <-& (phi_stmt_182_update_completed_)
          WPIPE_noblock_obuf_2_1_232_sample_start_ <-& (phi_stmt_185_update_completed_)
          // RAW reenables for send_to_1
          phi_stmt_177_update_start_ o<-& (WPIPE_noblock_obuf_2_1_232_sample_completed_ 0)
          phi_stmt_182_update_start_ o<-& (WPIPE_noblock_obuf_2_1_232_sample_completed_ 0)
          phi_stmt_185_update_start_ o<-& (WPIPE_noblock_obuf_2_1_232_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_1_232_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_1_232_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_1_232_sample_start_ &-> (WPIPE_noblock_obuf_2_1_232_Sample)
          WPIPE_noblock_obuf_2_1_232_sample_completed_ <-& (WPIPE_noblock_obuf_2_1_232_Sample)
          WPIPE_noblock_obuf_2_1_232_update_start_ <-& (WPIPE_noblock_obuf_2_1_232_sample_completed_)
          WPIPE_noblock_obuf_2_1_232_update_start_ &-> (WPIPE_noblock_obuf_2_1_232_Update)
          WPIPE_noblock_obuf_2_1_232_update_completed_ <-& (WPIPE_noblock_obuf_2_1_232_Update)
          WPIPE_noblock_obuf_2_1_232_sample_start_ o<-& (WPIPE_noblock_obuf_2_1_232_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_1_232_sample_start_
          WPIPE_noblock_obuf_2_1_232_sample_start_ <-& (phi_stmt_182_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_1_232_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_182_update_start_ o<-& (WPIPE_noblock_obuf_2_1_232_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 130
          // volatile! 
          // Source expression
          // (next_last_dest_id == 2 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          // start:  			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch4x4.opt.aa, line 131
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_2_2
          $T[WPIPE_noblock_obuf_2_2_241_sample_start_] 
          $T[WPIPE_noblock_obuf_2_2_241_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_2_241_update_start_] 
          $T[WPIPE_noblock_obuf_2_2_241_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_2_241 with guard R_send_to_2_240
          WPIPE_noblock_obuf_2_2_241_sample_start_ <-& (phi_stmt_177_update_completed_)
          WPIPE_noblock_obuf_2_2_241_sample_start_ <-& (phi_stmt_182_update_completed_)
          WPIPE_noblock_obuf_2_2_241_sample_start_ <-& (phi_stmt_185_update_completed_)
          // RAW reenables for send_to_2
          phi_stmt_177_update_start_ o<-& (WPIPE_noblock_obuf_2_2_241_sample_completed_ 0)
          phi_stmt_182_update_start_ o<-& (WPIPE_noblock_obuf_2_2_241_sample_completed_ 0)
          phi_stmt_185_update_start_ o<-& (WPIPE_noblock_obuf_2_2_241_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_2_241_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_2_241_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_2_241_sample_start_ &-> (WPIPE_noblock_obuf_2_2_241_Sample)
          WPIPE_noblock_obuf_2_2_241_sample_completed_ <-& (WPIPE_noblock_obuf_2_2_241_Sample)
          WPIPE_noblock_obuf_2_2_241_update_start_ <-& (WPIPE_noblock_obuf_2_2_241_sample_completed_)
          WPIPE_noblock_obuf_2_2_241_update_start_ &-> (WPIPE_noblock_obuf_2_2_241_Update)
          WPIPE_noblock_obuf_2_2_241_update_completed_ <-& (WPIPE_noblock_obuf_2_2_241_Update)
          WPIPE_noblock_obuf_2_2_241_sample_start_ o<-& (WPIPE_noblock_obuf_2_2_241_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_2_241_sample_start_
          WPIPE_noblock_obuf_2_2_241_sample_start_ <-& (phi_stmt_182_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_2_241_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_182_update_start_ o<-& (WPIPE_noblock_obuf_2_2_241_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 132
          // volatile! 
          // Source expression
          // (next_last_dest_id == 3 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          // start:  			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch4x4.opt.aa, line 133
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_2_3
          $T[WPIPE_noblock_obuf_2_3_250_sample_start_] 
          $T[WPIPE_noblock_obuf_2_3_250_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_3_250_update_start_] 
          $T[WPIPE_noblock_obuf_2_3_250_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_3_250 with guard R_send_to_3_249
          WPIPE_noblock_obuf_2_3_250_sample_start_ <-& (phi_stmt_177_update_completed_)
          WPIPE_noblock_obuf_2_3_250_sample_start_ <-& (phi_stmt_182_update_completed_)
          WPIPE_noblock_obuf_2_3_250_sample_start_ <-& (phi_stmt_185_update_completed_)
          // RAW reenables for send_to_3
          phi_stmt_177_update_start_ o<-& (WPIPE_noblock_obuf_2_3_250_sample_completed_ 0)
          phi_stmt_182_update_start_ o<-& (WPIPE_noblock_obuf_2_3_250_sample_completed_ 0)
          phi_stmt_185_update_start_ o<-& (WPIPE_noblock_obuf_2_3_250_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_3_250_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_3_250_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_3_250_sample_start_ &-> (WPIPE_noblock_obuf_2_3_250_Sample)
          WPIPE_noblock_obuf_2_3_250_sample_completed_ <-& (WPIPE_noblock_obuf_2_3_250_Sample)
          WPIPE_noblock_obuf_2_3_250_update_start_ <-& (WPIPE_noblock_obuf_2_3_250_sample_completed_)
          WPIPE_noblock_obuf_2_3_250_update_start_ &-> (WPIPE_noblock_obuf_2_3_250_Update)
          WPIPE_noblock_obuf_2_3_250_update_completed_ <-& (WPIPE_noblock_obuf_2_3_250_Update)
          WPIPE_noblock_obuf_2_3_250_sample_start_ o<-& (WPIPE_noblock_obuf_2_3_250_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_3_250_sample_start_
          WPIPE_noblock_obuf_2_3_250_sample_start_ <-& (phi_stmt_182_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_3_250_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_182_update_start_ o<-& (WPIPE_noblock_obuf_2_3_250_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 134
          // volatile! 
          // Source expression
          // (next_last_dest_id == 4 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          // start:  			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch4x4.opt.aa, line 135
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_2_4
          $T[WPIPE_noblock_obuf_2_4_259_sample_start_] 
          $T[WPIPE_noblock_obuf_2_4_259_sample_completed_] 
          $T[WPIPE_noblock_obuf_2_4_259_update_start_] 
          $T[WPIPE_noblock_obuf_2_4_259_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_2_4_259 with guard R_send_to_4_258
          WPIPE_noblock_obuf_2_4_259_sample_start_ <-& (phi_stmt_177_update_completed_)
          WPIPE_noblock_obuf_2_4_259_sample_start_ <-& (phi_stmt_182_update_completed_)
          WPIPE_noblock_obuf_2_4_259_sample_start_ <-& (phi_stmt_185_update_completed_)
          // RAW reenables for send_to_4
          phi_stmt_177_update_start_ o<-& (WPIPE_noblock_obuf_2_4_259_sample_completed_ 0)
          phi_stmt_182_update_start_ o<-& (WPIPE_noblock_obuf_2_4_259_sample_completed_ 0)
          phi_stmt_185_update_start_ o<-& (WPIPE_noblock_obuf_2_4_259_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_2_4_259_Sample] 
          {
            // pipe write sample-start noblock_obuf_2_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_2_4_259_Update] 
          {
            // pipe write update (complete) noblock_obuf_2_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_2_4_259_sample_start_ &-> (WPIPE_noblock_obuf_2_4_259_Sample)
          WPIPE_noblock_obuf_2_4_259_sample_completed_ <-& (WPIPE_noblock_obuf_2_4_259_Sample)
          WPIPE_noblock_obuf_2_4_259_update_start_ <-& (WPIPE_noblock_obuf_2_4_259_sample_completed_)
          WPIPE_noblock_obuf_2_4_259_update_start_ &-> (WPIPE_noblock_obuf_2_4_259_Update)
          WPIPE_noblock_obuf_2_4_259_update_completed_ <-& (WPIPE_noblock_obuf_2_4_259_Update)
          WPIPE_noblock_obuf_2_4_259_sample_start_ o<-& (WPIPE_noblock_obuf_2_4_259_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_4_259_sample_start_
          WPIPE_noblock_obuf_2_4_259_sample_start_ <-& (phi_stmt_182_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_2_4_259_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_182_update_start_ o<-& (WPIPE_noblock_obuf_2_4_259_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe in_data_2
          // read-dependencies for pipe in_data_2
          // write-dependencies for pipe in_data_2
          // signal write dependencies for in_data_2
          // pipe read/write dependencies for pipe noblock_obuf_2_1
          // read-dependencies for pipe noblock_obuf_2_1
          // write-dependencies for pipe noblock_obuf_2_1
          // signal write dependencies for noblock_obuf_2_1
          // pipe read/write dependencies for pipe noblock_obuf_2_2
          // read-dependencies for pipe noblock_obuf_2_2
          // write-dependencies for pipe noblock_obuf_2_2
          // signal write dependencies for noblock_obuf_2_2
          // pipe read/write dependencies for pipe noblock_obuf_2_3
          // read-dependencies for pipe noblock_obuf_2_3
          // write-dependencies for pipe noblock_obuf_2_3
          // signal write dependencies for noblock_obuf_2_3
          // pipe read/write dependencies for pipe noblock_obuf_2_4
          // read-dependencies for pipe noblock_obuf_2_4
          // write-dependencies for pipe noblock_obuf_2_4
          // signal write dependencies for noblock_obuf_2_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_175__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_175_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_175__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_175_loop_body : condition_evaluated
        $bind do_while_stmt_175__entry__  => do_while_stmt_175_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_175_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_175__exit__)
      }
      do_while_stmt_175__entry__ |-> (do_while_stmt_175)
      do_while_stmt_175__exit__ <-| (do_while_stmt_175)
      do_while_stmt_175__entry__ <-| (branch_block_stmt_174__entry__)
      do_while_stmt_175__exit__ |-> (branch_block_stmt_174__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_2_Daemon%loop%
    //  file .Aa/switch4x4.opt.aa, line 113
    // constant-object-declarations for block %inputPort_2_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 109
    // constant-object-declarations for block %inputPort_2_Daemon
    //  file .Aa/switch4x4.opt.aa, line 104
    // constant-declarations for block %inputPort_2_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 109
    // do-while statement  
    //  file .Aa/switch4x4.opt.aa, line 111
    // 1 
    $constant $W[konst_273_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_2_Daemon%loop%
    //  file .Aa/switch4x4.opt.aa, line 113
    // constant-declarations for phi:  			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 114
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_180_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch4x4.opt.aa, line 116
    // constant-declarations for phi:  			$phi last_dest_id := 			  next_last_dest_id $on   $loopback 			  0  $on   $entry 
    // type of target is $uint<8>
    //  file .Aa/switch4x4.opt.aa, line 118
    // 0 
    $constant $W[konst_188_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_192_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_208_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_211_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_222_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_228_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_237_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_246_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_255_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_2_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 109
    // do-while statement  
    //  file .Aa/switch4x4.opt.aa, line 111
    // merge-statement  
    //  file .Aa/switch4x4.opt.aa, line 113
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 114
    $W[next_count_down_214_181_buffered] : $int<16>
    // count_down
    $W[count_down_177] : $int<16>
    // 			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch4x4.opt.aa, line 116
    // in_data_2
    $W[RPIPE_in_data_2_184_wire] : $int<32>
    // input_word
    $W[input_word_182] : $int<32>
    // 			$phi last_dest_id := 			  next_last_dest_id $on   $loopback 			  0  $on   $entry 
    // type of target is $uint<8>
    //  file .Aa/switch4x4.opt.aa, line 118
    $W[next_last_dest_id_220_187_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_185] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 121
    // new_packet
    $W[new_packet_194] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 123
    // dest_id
    $W[dest_id_200] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 124
    // pkt_length
    $W[pkt_length_204] : $int<16>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 125
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_209_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_212_wire] : $int<16>
    // next_count_down
    $W[next_count_down_214] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 126
    // next_last_dest_id
    $W[next_last_dest_id_220] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 127
    // data_to_outport
    $W[data_to_outport_225] : $int<33>
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 128
    // send_to_1
    $W[send_to_1_230] : $int<1>
    // 			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 129
    // noblock_obuf_2_1
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 130
    // send_to_2
    $W[send_to_2_239] : $int<1>
    // 			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 131
    // noblock_obuf_2_2
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 132
    // send_to_3
    $W[send_to_3_248] : $int<1>
    // 			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 133
    // noblock_obuf_2_3
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 134
    // send_to_4
    $W[send_to_4_257] : $int<1>
    // 			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 135
    // noblock_obuf_2_4
    // datapath-instances for block %inputPort_2_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 109
    // datapath-instances for do-while  
    //  file .Aa/switch4x4.opt.aa, line 111
    ==0? [do_while_stmt_175_branch] (konst_273_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch4x4.opt.aa, line 113
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 114
    # := [next_count_down_214_181_buf] (next_count_down_214) (next_count_down_214_181_buffered)     $fullrate
    $buffering $out next_count_down_214_181_buf next_count_down_214_181_buffered  1
    # $phi [phi_stmt_177] (type_cast_180_wire_constant next_count_down_214_181_buffered) ( count_down_177 ) $fullrate
    // $buffering  $out phi_stmt_177 count_down_177 2
    // 			$phi input_word := 			  in_data_2 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch4x4.opt.aa, line 116
    // in_data_2
    $ioport $in [RPIPE_in_data_2_184_inst] (in_data_2) (RPIPE_in_data_2_184_wire)  $fullrate 
    $buffering $out RPIPE_in_data_2_184_inst RPIPE_in_data_2_184_wire 1
    # := [ssrc_phi_stmt_182] (RPIPE_in_data_2_184_wire) (input_word_182)    $flowthrough 
    // 			$phi last_dest_id := 			  next_last_dest_id $on   $loopback 			  0  $on   $entry 
    // type of target is $uint<8>
    //  file .Aa/switch4x4.opt.aa, line 118
    # := [next_last_dest_id_220_187_buf] (next_last_dest_id_220) (next_last_dest_id_220_187_buffered)     $fullrate
    $buffering $out next_last_dest_id_220_187_buf next_last_dest_id_220_187_buffered  1
    # $phi [phi_stmt_185] (next_last_dest_id_220_187_buffered konst_188_wire_constant) ( last_dest_id_185 ) $fullrate
    // $buffering  $out phi_stmt_185 last_dest_id_185 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 121
    // (count_down == 0 )
    ==[EQ_u16_u1_193_inst] (count_down_177 konst_192_wire_constant) (new_packet_194)   $flowthrough 
    $delay EQ_u16_u1_193_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 123
    // ( $slice input_word 31 24 ) 
    [:] [slice_199_inst] (input_word_182 31 24) (dest_id_200)  $flowthrough
    $delay slice_199_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 124
    // ( $slice input_word 23 8 ) 
    [:] [slice_203_inst] (input_word_182 23 8) (pkt_length_204)  $flowthrough
    $delay slice_203_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 125
    // (pkt_length - 1 )
    -[SUB_u16_u16_209_inst] (pkt_length_204 konst_208_wire_constant) (SUB_u16_u16_209_wire)   $flowthrough 
    $delay SUB_u16_u16_209_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_212_inst] (count_down_177 konst_211_wire_constant) (SUB_u16_u16_212_wire)   $flowthrough 
    $delay SUB_u16_u16_212_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_213_inst] (new_packet_194 SUB_u16_u16_209_wire SUB_u16_u16_212_wire) (next_count_down_214)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 126
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_219_inst] (new_packet_194 dest_id_200 last_dest_id_185) (next_last_dest_id_220)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 127
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_224_inst] (R_ONE_1_222_wire_constant input_word_182) (data_to_outport_225)   $flowthrough 
    $delay CONCAT_u1_u33_224_inst 0
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 128
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_229_inst] (next_last_dest_id_220 konst_228_wire_constant) (send_to_1_230)   $flowthrough 
    $delay EQ_u8_u1_229_inst 0
    // 			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 129
    // noblock_obuf_2_1
    $ioport $out [WPIPE_noblock_obuf_2_1_232_inst]  (data_to_outport_225) (noblock_obuf_2_1) $guard ( send_to_1_230 )  $fullrate 
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 130
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_238_inst] (next_last_dest_id_220 konst_237_wire_constant) (send_to_2_239)   $flowthrough 
    $delay EQ_u8_u1_238_inst 0
    // 			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 131
    // noblock_obuf_2_2
    $ioport $out [WPIPE_noblock_obuf_2_2_241_inst]  (data_to_outport_225) (noblock_obuf_2_2) $guard ( send_to_2_239 )  $fullrate 
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 132
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_247_inst] (next_last_dest_id_220 konst_246_wire_constant) (send_to_3_248)   $flowthrough 
    $delay EQ_u8_u1_247_inst 0
    // 			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 133
    // noblock_obuf_2_3
    $ioport $out [WPIPE_noblock_obuf_2_3_250_inst]  (data_to_outport_225) (noblock_obuf_2_3) $guard ( send_to_3_248 )  $fullrate 
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 134
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_256_inst] (next_last_dest_id_220 konst_255_wire_constant) (send_to_4_257)   $flowthrough 
    $delay EQ_u8_u1_256_inst 0
    // 			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 135
    // noblock_obuf_2_4
    $ioport $out [WPIPE_noblock_obuf_2_4_259_inst]  (data_to_outport_225) (noblock_obuf_2_4) $guard ( send_to_4_257 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_175
  //  file .Aa/switch4x4.opt.aa, line 111
  phi_stmt_177 <=> (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/phi_stmt_177_entry_sample_req branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/phi_stmt_177_loopback_sample_req) (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/phi_stmt_177_phi_mux_ack)
  next_count_down_214_181_buf <=> (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/R_next_count_down_181_Sample/req branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/R_next_count_down_181_Update/req) (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/R_next_count_down_181_Sample/ack branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/R_next_count_down_181_Update/ack)
  // in_data_2
  RPIPE_in_data_2_184_inst <=> (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/RPIPE_in_data_2_184_Sample/rr branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/RPIPE_in_data_2_184_Update/cr) (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/RPIPE_in_data_2_184_Sample/ra branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/RPIPE_in_data_2_184_Update/ca)
  phi_stmt_185 <=> (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/phi_stmt_185_loopback_sample_req branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/phi_stmt_185_entry_sample_req) (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/phi_stmt_185_phi_mux_ack)
  next_last_dest_id_220_187_buf <=> (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/R_next_last_dest_id_187_Sample/req branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/R_next_last_dest_id_187_Update/req) (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/R_next_last_dest_id_187_Sample/ack branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/R_next_last_dest_id_187_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 121
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 123
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 124
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 125
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 126
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 127
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 128
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  // 			$guard (send_to_1) noblock_obuf_2_1 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch4x4.opt.aa, line 129
  // data_to_outport
  // noblock_obuf_2_1
  WPIPE_noblock_obuf_2_1_232_inst <=> (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/WPIPE_noblock_obuf_2_1_232_Sample/req branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/WPIPE_noblock_obuf_2_1_232_Update/req) (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/WPIPE_noblock_obuf_2_1_232_Sample/ack branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/WPIPE_noblock_obuf_2_1_232_Update/ack)
  // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 130
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  // 			$guard (send_to_2) noblock_obuf_2_2 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch4x4.opt.aa, line 131
  // data_to_outport
  // noblock_obuf_2_2
  WPIPE_noblock_obuf_2_2_241_inst <=> (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/WPIPE_noblock_obuf_2_2_241_Sample/req branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/WPIPE_noblock_obuf_2_2_241_Update/req) (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/WPIPE_noblock_obuf_2_2_241_Sample/ack branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/WPIPE_noblock_obuf_2_2_241_Update/ack)
  // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 132
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  // 			$guard (send_to_3) noblock_obuf_2_3 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch4x4.opt.aa, line 133
  // data_to_outport
  // noblock_obuf_2_3
  WPIPE_noblock_obuf_2_3_250_inst <=> (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/WPIPE_noblock_obuf_2_3_250_Sample/req branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/WPIPE_noblock_obuf_2_3_250_Update/req) (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/WPIPE_noblock_obuf_2_3_250_Sample/ack branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/WPIPE_noblock_obuf_2_3_250_Update/ack)
  // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 134
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  // 			$guard (send_to_4) noblock_obuf_2_4 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch4x4.opt.aa, line 135
  // data_to_outport
  // noblock_obuf_2_4
  WPIPE_noblock_obuf_2_4_259_inst <=> (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/WPIPE_noblock_obuf_2_4_259_Sample/req branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/WPIPE_noblock_obuf_2_4_259_Update/req) (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/WPIPE_noblock_obuf_2_4_259_Sample/ack branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/WPIPE_noblock_obuf_2_4_259_Update/ack)
  do_while_stmt_175_branch <=> (branch_block_stmt_174/do_while_stmt_175/do_while_stmt_175_loop_body/condition_evaluated) (branch_block_stmt_174/do_while_stmt_175/loop_exit/ack branch_block_stmt_174/do_while_stmt_175/loop_taken/ack)
}
$module [inputPort_3_Daemon] 
{
  // pipe-declarations for block %inputPort_3_Daemon
  //  file .Aa/switch4x4.opt.aa, line 140
  // pipe-declarations for block %inputPort_3_Daemon%loop
  //  file .Aa/switch4x4.opt.aa, line 145
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_277] // Branch Block  file .Aa/switch4x4.opt.aa, line 145
    {
      $P [branch_block_stmt_277__entry__]
      branch_block_stmt_277__entry__ <-| ($entry)
      $P [branch_block_stmt_277__exit__]
      branch_block_stmt_277__exit__ |-> ($exit)
      $P [do_while_stmt_278__entry__] 
      $P [do_while_stmt_278__exit__] 
      // do-while-statement  
      //  file .Aa/switch4x4.opt.aa, line 147
      <o> [do_while_stmt_278]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_278__entry__] 
        $P[do_while_stmt_278__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_278_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_280
          // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_280_sample_start_] 
          $T[phi_stmt_280_sample_completed_] 
          $T[phi_stmt_280_update_start_] 
          $T[phi_stmt_280_update_completed_] 
          $T[phi_stmt_280_sample_start__ps] 
          phi_stmt_280_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_280_sample_completed__ps] 
          phi_stmt_280_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_280_update_start__ps] 
          phi_stmt_280_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_280_update_completed__ps] 
          phi_stmt_280_update_completed_ <-& (phi_stmt_280_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_280_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_280_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_280_update_start_)
          $T[phi_stmt_280_loopback_trigger] 
          phi_stmt_280_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_280_loopback_sample_req] 
          $T[phi_stmt_280_loopback_sample_req_ps] 
          phi_stmt_280_loopback_sample_req <-& (phi_stmt_280_loopback_sample_req_ps)
          phi_stmt_280_loopback_sample_req &-> ($null)
          $T[phi_stmt_280_entry_trigger] 
          phi_stmt_280_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_280_entry_sample_req] 
          $T[phi_stmt_280_entry_sample_req_ps] 
          phi_stmt_280_entry_sample_req <-& (phi_stmt_280_entry_sample_req_ps)
          phi_stmt_280_entry_sample_req &-> ($null)
          phi_stmt_280_update_start_ o<-& (phi_stmt_280_update_completed_ 0)
          phi_stmt_280_sample_start_ o<-& (phi_stmt_280_sample_completed_ 1)
          $T[phi_stmt_280_merged_reqs] 
          $T[phi_stmt_280_phi_mux_ack] 
          $T[phi_stmt_280_phi_mux_ack_ps] 
          phi_stmt_280_phi_mux_ack_ps <-& (phi_stmt_280_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_280_update_completed_)
          $T[type_cast_283_sample_start__ps] 
          $T[type_cast_283_sample_completed__ps] 
          $T[type_cast_283_update_start__ps] 
          $T[type_cast_283_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_283_sample_start_] 
          $T[type_cast_283_sample_completed_] 
          type_cast_283_sample_completed_ <-& (type_cast_283_sample_start_)
          $T[type_cast_283_update_start_] 
          $T [type_cast_283_update_completed_] $delay 
          type_cast_283_update_completed_ <-& (type_cast_283_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_283_sample_start_ <-& (type_cast_283_sample_start__ps)
          type_cast_283_update_start_ <-& (type_cast_283_update_start__ps)
          // Phi complete dependency.
          type_cast_283_sample_completed__ps <-& (type_cast_283_sample_completed_)
          type_cast_283_update_completed__ps <-& (type_cast_283_update_completed_)
          $T[R_next_count_down_284_sample_start__ps] 
          $T[R_next_count_down_284_sample_completed__ps] 
          $T[R_next_count_down_284_update_start__ps] 
          $T[R_next_count_down_284_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_count_down_284_sample_start_] 
          $T[R_next_count_down_284_sample_completed_] 
          $T[R_next_count_down_284_update_start_] 
          $T[R_next_count_down_284_update_completed_] 
          ;;[R_next_count_down_284_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_284_sample_start_ &-> (R_next_count_down_284_Sample)
          R_next_count_down_284_sample_completed_ <-& (R_next_count_down_284_Sample)
          ;;[R_next_count_down_284_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_284_update_start_ &-> (R_next_count_down_284_Update)
          R_next_count_down_284_update_completed_ <-& (R_next_count_down_284_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_284_sample_start_ <-& (R_next_count_down_284_sample_start__ps)
          R_next_count_down_284_update_start_ <-& (R_next_count_down_284_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_284_sample_completed__ps <-& (R_next_count_down_284_sample_completed_)
          R_next_count_down_284_update_completed__ps <-& (R_next_count_down_284_update_completed_)
          $phisequencer [ phi_stmt_280_phi_seq] : 
          phi_stmt_280_entry_trigger type_cast_283_sample_start__ps type_cast_283_sample_completed__ps type_cast_283_update_start__ps type_cast_283_update_completed__ps phi_stmt_280_loopback_trigger R_next_count_down_284_sample_start__ps R_next_count_down_284_sample_completed__ps R_next_count_down_284_update_start__ps R_next_count_down_284_update_completed__ps :
          phi_stmt_280_sample_start__ps phi_stmt_280_sample_completed__ps phi_stmt_280_update_start__ps phi_stmt_280_update_completed__ps :
          phi_stmt_280_entry_sample_req_ps phi_stmt_280_loopback_sample_req_ps : 
          phi_stmt_280_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_280
          // start:  single source PHI statement phi_stmt_285
          // 			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_285_sample_start_] 
          $T[phi_stmt_285_sample_completed_] 
          $T[phi_stmt_285_update_start_] 
          $T[phi_stmt_285_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_285_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_285_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_285_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_3
          $T[RPIPE_in_data_3_287_sample_start_] 
          $T[RPIPE_in_data_3_287_sample_completed_] 
          $T[RPIPE_in_data_3_287_update_start_] 
          $T[RPIPE_in_data_3_287_update_completed_] 
          ;;[RPIPE_in_data_3_287_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_3_287_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_3_287_sample_start_ &-> (RPIPE_in_data_3_287_Sample)
          RPIPE_in_data_3_287_sample_completed_ <-& (RPIPE_in_data_3_287_Sample)
          RPIPE_in_data_3_287_update_start_ <-& (RPIPE_in_data_3_287_sample_completed_)
          RPIPE_in_data_3_287_update_start_ &-> (RPIPE_in_data_3_287_Update)
          RPIPE_in_data_3_287_update_completed_ <-& (RPIPE_in_data_3_287_Update)
          RPIPE_in_data_3_287_sample_start_ o<-& (RPIPE_in_data_3_287_update_completed_ 0)
          // RAW reenables for in_data_3
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_3_287_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_3_287_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_3_287_update_start_)
          phi_stmt_285_update_completed_ <-& (RPIPE_in_data_3_287_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_285_update_completed_)
          // done: PHI Statement phi_stmt_285
          // start:  PHI statement phi_stmt_288
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_288_sample_start_] 
          $T[phi_stmt_288_sample_completed_] 
          $T[phi_stmt_288_update_start_] 
          $T[phi_stmt_288_update_completed_] 
          $T[phi_stmt_288_sample_start__ps] 
          phi_stmt_288_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_288_sample_completed__ps] 
          phi_stmt_288_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_288_update_start__ps] 
          phi_stmt_288_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_288_update_completed__ps] 
          phi_stmt_288_update_completed_ <-& (phi_stmt_288_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_288_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_288_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_288_update_start_)
          $T[phi_stmt_288_loopback_trigger] 
          phi_stmt_288_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_288_loopback_sample_req] 
          $T[phi_stmt_288_loopback_sample_req_ps] 
          phi_stmt_288_loopback_sample_req <-& (phi_stmt_288_loopback_sample_req_ps)
          phi_stmt_288_loopback_sample_req &-> ($null)
          $T[phi_stmt_288_entry_trigger] 
          phi_stmt_288_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_288_entry_sample_req] 
          $T[phi_stmt_288_entry_sample_req_ps] 
          phi_stmt_288_entry_sample_req <-& (phi_stmt_288_entry_sample_req_ps)
          phi_stmt_288_entry_sample_req &-> ($null)
          phi_stmt_288_update_start_ o<-& (phi_stmt_288_update_completed_ 0)
          phi_stmt_288_sample_start_ o<-& (phi_stmt_288_sample_completed_ 1)
          $T[phi_stmt_288_merged_reqs] 
          $T[phi_stmt_288_phi_mux_ack] 
          $T[phi_stmt_288_phi_mux_ack_ps] 
          phi_stmt_288_phi_mux_ack_ps <-& (phi_stmt_288_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_288_update_completed_)
          $T[konst_290_sample_start__ps] 
          $T[konst_290_sample_completed__ps] 
          $T[konst_290_update_start__ps] 
          $T[konst_290_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_290_sample_start_] 
          $T[konst_290_sample_completed_] 
          konst_290_sample_completed_ <-& (konst_290_sample_start_)
          $T[konst_290_update_start_] 
          $T [konst_290_update_completed_] $delay 
          konst_290_update_completed_ <-& (konst_290_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_290_sample_start_ <-& (konst_290_sample_start__ps)
          konst_290_update_start_ <-& (konst_290_update_start__ps)
          // Phi complete dependency.
          konst_290_sample_completed__ps <-& (konst_290_sample_completed_)
          konst_290_update_completed__ps <-& (konst_290_update_completed_)
          $T[R_next_last_dest_id_291_sample_start__ps] 
          $T[R_next_last_dest_id_291_sample_completed__ps] 
          $T[R_next_last_dest_id_291_update_start__ps] 
          $T[R_next_last_dest_id_291_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_291_sample_start_] 
          $T[R_next_last_dest_id_291_sample_completed_] 
          $T[R_next_last_dest_id_291_update_start_] 
          $T[R_next_last_dest_id_291_update_completed_] 
          ;;[R_next_last_dest_id_291_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_291_sample_start_ &-> (R_next_last_dest_id_291_Sample)
          R_next_last_dest_id_291_sample_completed_ <-& (R_next_last_dest_id_291_Sample)
          ;;[R_next_last_dest_id_291_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_291_update_start_ &-> (R_next_last_dest_id_291_Update)
          R_next_last_dest_id_291_update_completed_ <-& (R_next_last_dest_id_291_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_291_sample_start_ <-& (R_next_last_dest_id_291_sample_start__ps)
          R_next_last_dest_id_291_update_start_ <-& (R_next_last_dest_id_291_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_291_sample_completed__ps <-& (R_next_last_dest_id_291_sample_completed_)
          R_next_last_dest_id_291_update_completed__ps <-& (R_next_last_dest_id_291_update_completed_)
          $phisequencer [ phi_stmt_288_phi_seq] : 
          phi_stmt_288_entry_trigger konst_290_sample_start__ps konst_290_sample_completed__ps konst_290_update_start__ps konst_290_update_completed__ps phi_stmt_288_loopback_trigger R_next_last_dest_id_291_sample_start__ps R_next_last_dest_id_291_sample_completed__ps R_next_last_dest_id_291_update_start__ps R_next_last_dest_id_291_update_completed__ps :
          phi_stmt_288_sample_start__ps phi_stmt_288_sample_completed__ps phi_stmt_288_update_start__ps phi_stmt_288_update_completed__ps :
          phi_stmt_288_entry_sample_req_ps phi_stmt_288_loopback_sample_req_ps : 
          phi_stmt_288_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_288
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 157
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 159
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 160
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 161
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 162
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 163
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 164
          // volatile! 
          // Source expression
          // (next_last_dest_id == 1 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          // start:  			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch4x4.opt.aa, line 165
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_3_1
          $T[WPIPE_noblock_obuf_3_1_335_sample_start_] 
          $T[WPIPE_noblock_obuf_3_1_335_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_1_335_update_start_] 
          $T[WPIPE_noblock_obuf_3_1_335_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_1_335 with guard R_send_to_1_334
          WPIPE_noblock_obuf_3_1_335_sample_start_ <-& (phi_stmt_280_update_completed_)
          WPIPE_noblock_obuf_3_1_335_sample_start_ <-& (phi_stmt_285_update_completed_)
          WPIPE_noblock_obuf_3_1_335_sample_start_ <-& (phi_stmt_288_update_completed_)
          // RAW reenables for send_to_1
          phi_stmt_280_update_start_ o<-& (WPIPE_noblock_obuf_3_1_335_sample_completed_ 0)
          phi_stmt_285_update_start_ o<-& (WPIPE_noblock_obuf_3_1_335_sample_completed_ 0)
          phi_stmt_288_update_start_ o<-& (WPIPE_noblock_obuf_3_1_335_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_1_335_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_1_335_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_1_335_sample_start_ &-> (WPIPE_noblock_obuf_3_1_335_Sample)
          WPIPE_noblock_obuf_3_1_335_sample_completed_ <-& (WPIPE_noblock_obuf_3_1_335_Sample)
          WPIPE_noblock_obuf_3_1_335_update_start_ <-& (WPIPE_noblock_obuf_3_1_335_sample_completed_)
          WPIPE_noblock_obuf_3_1_335_update_start_ &-> (WPIPE_noblock_obuf_3_1_335_Update)
          WPIPE_noblock_obuf_3_1_335_update_completed_ <-& (WPIPE_noblock_obuf_3_1_335_Update)
          WPIPE_noblock_obuf_3_1_335_sample_start_ o<-& (WPIPE_noblock_obuf_3_1_335_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_1_335_sample_start_
          WPIPE_noblock_obuf_3_1_335_sample_start_ <-& (phi_stmt_285_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_1_335_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_285_update_start_ o<-& (WPIPE_noblock_obuf_3_1_335_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 166
          // volatile! 
          // Source expression
          // (next_last_dest_id == 2 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          // start:  			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch4x4.opt.aa, line 167
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_3_2
          $T[WPIPE_noblock_obuf_3_2_344_sample_start_] 
          $T[WPIPE_noblock_obuf_3_2_344_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_2_344_update_start_] 
          $T[WPIPE_noblock_obuf_3_2_344_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_2_344 with guard R_send_to_2_343
          WPIPE_noblock_obuf_3_2_344_sample_start_ <-& (phi_stmt_280_update_completed_)
          WPIPE_noblock_obuf_3_2_344_sample_start_ <-& (phi_stmt_285_update_completed_)
          WPIPE_noblock_obuf_3_2_344_sample_start_ <-& (phi_stmt_288_update_completed_)
          // RAW reenables for send_to_2
          phi_stmt_280_update_start_ o<-& (WPIPE_noblock_obuf_3_2_344_sample_completed_ 0)
          phi_stmt_285_update_start_ o<-& (WPIPE_noblock_obuf_3_2_344_sample_completed_ 0)
          phi_stmt_288_update_start_ o<-& (WPIPE_noblock_obuf_3_2_344_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_2_344_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_2_344_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_2_344_sample_start_ &-> (WPIPE_noblock_obuf_3_2_344_Sample)
          WPIPE_noblock_obuf_3_2_344_sample_completed_ <-& (WPIPE_noblock_obuf_3_2_344_Sample)
          WPIPE_noblock_obuf_3_2_344_update_start_ <-& (WPIPE_noblock_obuf_3_2_344_sample_completed_)
          WPIPE_noblock_obuf_3_2_344_update_start_ &-> (WPIPE_noblock_obuf_3_2_344_Update)
          WPIPE_noblock_obuf_3_2_344_update_completed_ <-& (WPIPE_noblock_obuf_3_2_344_Update)
          WPIPE_noblock_obuf_3_2_344_sample_start_ o<-& (WPIPE_noblock_obuf_3_2_344_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_2_344_sample_start_
          WPIPE_noblock_obuf_3_2_344_sample_start_ <-& (phi_stmt_285_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_2_344_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_285_update_start_ o<-& (WPIPE_noblock_obuf_3_2_344_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 168
          // volatile! 
          // Source expression
          // (next_last_dest_id == 3 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          // start:  			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch4x4.opt.aa, line 169
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_3_3
          $T[WPIPE_noblock_obuf_3_3_353_sample_start_] 
          $T[WPIPE_noblock_obuf_3_3_353_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_3_353_update_start_] 
          $T[WPIPE_noblock_obuf_3_3_353_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_3_353 with guard R_send_to_3_352
          WPIPE_noblock_obuf_3_3_353_sample_start_ <-& (phi_stmt_280_update_completed_)
          WPIPE_noblock_obuf_3_3_353_sample_start_ <-& (phi_stmt_285_update_completed_)
          WPIPE_noblock_obuf_3_3_353_sample_start_ <-& (phi_stmt_288_update_completed_)
          // RAW reenables for send_to_3
          phi_stmt_280_update_start_ o<-& (WPIPE_noblock_obuf_3_3_353_sample_completed_ 0)
          phi_stmt_285_update_start_ o<-& (WPIPE_noblock_obuf_3_3_353_sample_completed_ 0)
          phi_stmt_288_update_start_ o<-& (WPIPE_noblock_obuf_3_3_353_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_3_353_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_3_353_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_3_353_sample_start_ &-> (WPIPE_noblock_obuf_3_3_353_Sample)
          WPIPE_noblock_obuf_3_3_353_sample_completed_ <-& (WPIPE_noblock_obuf_3_3_353_Sample)
          WPIPE_noblock_obuf_3_3_353_update_start_ <-& (WPIPE_noblock_obuf_3_3_353_sample_completed_)
          WPIPE_noblock_obuf_3_3_353_update_start_ &-> (WPIPE_noblock_obuf_3_3_353_Update)
          WPIPE_noblock_obuf_3_3_353_update_completed_ <-& (WPIPE_noblock_obuf_3_3_353_Update)
          WPIPE_noblock_obuf_3_3_353_sample_start_ o<-& (WPIPE_noblock_obuf_3_3_353_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_3_353_sample_start_
          WPIPE_noblock_obuf_3_3_353_sample_start_ <-& (phi_stmt_285_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_3_353_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_285_update_start_ o<-& (WPIPE_noblock_obuf_3_3_353_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 170
          // volatile! 
          // Source expression
          // (next_last_dest_id == 4 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          // start:  			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch4x4.opt.aa, line 171
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_3_4
          $T[WPIPE_noblock_obuf_3_4_362_sample_start_] 
          $T[WPIPE_noblock_obuf_3_4_362_sample_completed_] 
          $T[WPIPE_noblock_obuf_3_4_362_update_start_] 
          $T[WPIPE_noblock_obuf_3_4_362_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_3_4_362 with guard R_send_to_4_361
          WPIPE_noblock_obuf_3_4_362_sample_start_ <-& (phi_stmt_280_update_completed_)
          WPIPE_noblock_obuf_3_4_362_sample_start_ <-& (phi_stmt_285_update_completed_)
          WPIPE_noblock_obuf_3_4_362_sample_start_ <-& (phi_stmt_288_update_completed_)
          // RAW reenables for send_to_4
          phi_stmt_280_update_start_ o<-& (WPIPE_noblock_obuf_3_4_362_sample_completed_ 0)
          phi_stmt_285_update_start_ o<-& (WPIPE_noblock_obuf_3_4_362_sample_completed_ 0)
          phi_stmt_288_update_start_ o<-& (WPIPE_noblock_obuf_3_4_362_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_3_4_362_Sample] 
          {
            // pipe write sample-start noblock_obuf_3_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_3_4_362_Update] 
          {
            // pipe write update (complete) noblock_obuf_3_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_3_4_362_sample_start_ &-> (WPIPE_noblock_obuf_3_4_362_Sample)
          WPIPE_noblock_obuf_3_4_362_sample_completed_ <-& (WPIPE_noblock_obuf_3_4_362_Sample)
          WPIPE_noblock_obuf_3_4_362_update_start_ <-& (WPIPE_noblock_obuf_3_4_362_sample_completed_)
          WPIPE_noblock_obuf_3_4_362_update_start_ &-> (WPIPE_noblock_obuf_3_4_362_Update)
          WPIPE_noblock_obuf_3_4_362_update_completed_ <-& (WPIPE_noblock_obuf_3_4_362_Update)
          WPIPE_noblock_obuf_3_4_362_sample_start_ o<-& (WPIPE_noblock_obuf_3_4_362_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_4_362_sample_start_
          WPIPE_noblock_obuf_3_4_362_sample_start_ <-& (phi_stmt_285_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_3_4_362_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_285_update_start_ o<-& (WPIPE_noblock_obuf_3_4_362_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_3_4
          // read-dependencies for pipe noblock_obuf_3_4
          // write-dependencies for pipe noblock_obuf_3_4
          // signal write dependencies for noblock_obuf_3_4
          // pipe read/write dependencies for pipe in_data_3
          // read-dependencies for pipe in_data_3
          // write-dependencies for pipe in_data_3
          // signal write dependencies for in_data_3
          // pipe read/write dependencies for pipe noblock_obuf_3_1
          // read-dependencies for pipe noblock_obuf_3_1
          // write-dependencies for pipe noblock_obuf_3_1
          // signal write dependencies for noblock_obuf_3_1
          // pipe read/write dependencies for pipe noblock_obuf_3_2
          // read-dependencies for pipe noblock_obuf_3_2
          // write-dependencies for pipe noblock_obuf_3_2
          // signal write dependencies for noblock_obuf_3_2
          // pipe read/write dependencies for pipe noblock_obuf_3_3
          // read-dependencies for pipe noblock_obuf_3_3
          // write-dependencies for pipe noblock_obuf_3_3
          // signal write dependencies for noblock_obuf_3_3
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_278__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_278_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_278__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_278_loop_body : condition_evaluated
        $bind do_while_stmt_278__entry__  => do_while_stmt_278_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_278_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_278__exit__)
      }
      do_while_stmt_278__entry__ |-> (do_while_stmt_278)
      do_while_stmt_278__exit__ <-| (do_while_stmt_278)
      do_while_stmt_278__entry__ <-| (branch_block_stmt_277__entry__)
      do_while_stmt_278__exit__ |-> (branch_block_stmt_277__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_3_Daemon%loop%
    //  file .Aa/switch4x4.opt.aa, line 149
    // constant-object-declarations for block %inputPort_3_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 145
    // constant-object-declarations for block %inputPort_3_Daemon
    //  file .Aa/switch4x4.opt.aa, line 140
    // constant-declarations for block %inputPort_3_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 145
    // do-while statement  
    //  file .Aa/switch4x4.opt.aa, line 147
    // 1 
    $constant $W[konst_376_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_3_Daemon%loop%
    //  file .Aa/switch4x4.opt.aa, line 149
    // constant-declarations for phi:  			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 150
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_283_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch4x4.opt.aa, line 152
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch4x4.opt.aa, line 154
    // 0 
    $constant $W[konst_290_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_295_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_311_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_314_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_325_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_331_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_340_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_349_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_358_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_3_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 145
    // do-while statement  
    //  file .Aa/switch4x4.opt.aa, line 147
    // merge-statement  
    //  file .Aa/switch4x4.opt.aa, line 149
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 150
    $W[next_count_down_317_284_buffered] : $int<16>
    // count_down
    $W[count_down_280] : $int<16>
    // 			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch4x4.opt.aa, line 152
    // in_data_3
    $W[RPIPE_in_data_3_287_wire] : $int<32>
    // input_word
    $W[input_word_285] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch4x4.opt.aa, line 154
    $W[next_last_dest_id_323_291_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_288] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 157
    // new_packet
    $W[new_packet_297] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 159
    // dest_id
    $W[dest_id_303] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 160
    // pkt_length
    $W[pkt_length_307] : $int<16>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 161
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_312_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_315_wire] : $int<16>
    // next_count_down
    $W[next_count_down_317] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 162
    // next_last_dest_id
    $W[next_last_dest_id_323] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 163
    // data_to_outport
    $W[data_to_outport_328] : $int<33>
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 164
    // send_to_1
    $W[send_to_1_333] : $int<1>
    // 			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 165
    // noblock_obuf_3_1
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 166
    // send_to_2
    $W[send_to_2_342] : $int<1>
    // 			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 167
    // noblock_obuf_3_2
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 168
    // send_to_3
    $W[send_to_3_351] : $int<1>
    // 			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 169
    // noblock_obuf_3_3
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 170
    // send_to_4
    $W[send_to_4_360] : $int<1>
    // 			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 171
    // noblock_obuf_3_4
    // datapath-instances for block %inputPort_3_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 145
    // datapath-instances for do-while  
    //  file .Aa/switch4x4.opt.aa, line 147
    ==0? [do_while_stmt_278_branch] (konst_376_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch4x4.opt.aa, line 149
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 150
    # := [next_count_down_317_284_buf] (next_count_down_317) (next_count_down_317_284_buffered)     $fullrate
    $buffering $out next_count_down_317_284_buf next_count_down_317_284_buffered  1
    # $phi [phi_stmt_280] (type_cast_283_wire_constant next_count_down_317_284_buffered) ( count_down_280 ) $fullrate
    // $buffering  $out phi_stmt_280 count_down_280 2
    // 			$phi input_word := 			  in_data_3 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch4x4.opt.aa, line 152
    // in_data_3
    $ioport $in [RPIPE_in_data_3_287_inst] (in_data_3) (RPIPE_in_data_3_287_wire)  $fullrate 
    $buffering $out RPIPE_in_data_3_287_inst RPIPE_in_data_3_287_wire 1
    # := [ssrc_phi_stmt_285] (RPIPE_in_data_3_287_wire) (input_word_285)    $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch4x4.opt.aa, line 154
    # := [next_last_dest_id_323_291_buf] (next_last_dest_id_323) (next_last_dest_id_323_291_buffered)     $fullrate
    $buffering $out next_last_dest_id_323_291_buf next_last_dest_id_323_291_buffered  1
    # $phi [phi_stmt_288] (konst_290_wire_constant next_last_dest_id_323_291_buffered) ( last_dest_id_288 ) $fullrate
    // $buffering  $out phi_stmt_288 last_dest_id_288 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 157
    // (count_down == 0 )
    ==[EQ_u16_u1_296_inst] (count_down_280 konst_295_wire_constant) (new_packet_297)   $flowthrough 
    $delay EQ_u16_u1_296_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 159
    // ( $slice input_word 31 24 ) 
    [:] [slice_302_inst] (input_word_285 31 24) (dest_id_303)  $flowthrough
    $delay slice_302_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 160
    // ( $slice input_word 23 8 ) 
    [:] [slice_306_inst] (input_word_285 23 8) (pkt_length_307)  $flowthrough
    $delay slice_306_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 161
    // (pkt_length - 1 )
    -[SUB_u16_u16_312_inst] (pkt_length_307 konst_311_wire_constant) (SUB_u16_u16_312_wire)   $flowthrough 
    $delay SUB_u16_u16_312_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_315_inst] (count_down_280 konst_314_wire_constant) (SUB_u16_u16_315_wire)   $flowthrough 
    $delay SUB_u16_u16_315_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_316_inst] (new_packet_297 SUB_u16_u16_312_wire SUB_u16_u16_315_wire) (next_count_down_317)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 162
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_322_inst] (new_packet_297 dest_id_303 last_dest_id_288) (next_last_dest_id_323)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 163
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_327_inst] (R_ONE_1_325_wire_constant input_word_285) (data_to_outport_328)   $flowthrough 
    $delay CONCAT_u1_u33_327_inst 0
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 164
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_332_inst] (next_last_dest_id_323 konst_331_wire_constant) (send_to_1_333)   $flowthrough 
    $delay EQ_u8_u1_332_inst 0
    // 			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 165
    // noblock_obuf_3_1
    $ioport $out [WPIPE_noblock_obuf_3_1_335_inst]  (data_to_outport_328) (noblock_obuf_3_1) $guard ( send_to_1_333 )  $fullrate 
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 166
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_341_inst] (next_last_dest_id_323 konst_340_wire_constant) (send_to_2_342)   $flowthrough 
    $delay EQ_u8_u1_341_inst 0
    // 			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 167
    // noblock_obuf_3_2
    $ioport $out [WPIPE_noblock_obuf_3_2_344_inst]  (data_to_outport_328) (noblock_obuf_3_2) $guard ( send_to_2_342 )  $fullrate 
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 168
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_350_inst] (next_last_dest_id_323 konst_349_wire_constant) (send_to_3_351)   $flowthrough 
    $delay EQ_u8_u1_350_inst 0
    // 			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 169
    // noblock_obuf_3_3
    $ioport $out [WPIPE_noblock_obuf_3_3_353_inst]  (data_to_outport_328) (noblock_obuf_3_3) $guard ( send_to_3_351 )  $fullrate 
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 170
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_359_inst] (next_last_dest_id_323 konst_358_wire_constant) (send_to_4_360)   $flowthrough 
    $delay EQ_u8_u1_359_inst 0
    // 			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 171
    // noblock_obuf_3_4
    $ioport $out [WPIPE_noblock_obuf_3_4_362_inst]  (data_to_outport_328) (noblock_obuf_3_4) $guard ( send_to_4_360 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_278
  //  file .Aa/switch4x4.opt.aa, line 147
  phi_stmt_280 <=> (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/phi_stmt_280_entry_sample_req branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/phi_stmt_280_loopback_sample_req) (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/phi_stmt_280_phi_mux_ack)
  next_count_down_317_284_buf <=> (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/R_next_count_down_284_Sample/req branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/R_next_count_down_284_Update/req) (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/R_next_count_down_284_Sample/ack branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/R_next_count_down_284_Update/ack)
  // in_data_3
  RPIPE_in_data_3_287_inst <=> (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/RPIPE_in_data_3_287_Sample/rr branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/RPIPE_in_data_3_287_Update/cr) (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/RPIPE_in_data_3_287_Sample/ra branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/RPIPE_in_data_3_287_Update/ca)
  phi_stmt_288 <=> (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/phi_stmt_288_entry_sample_req branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/phi_stmt_288_loopback_sample_req) (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/phi_stmt_288_phi_mux_ack)
  next_last_dest_id_323_291_buf <=> (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/R_next_last_dest_id_291_Sample/req branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/R_next_last_dest_id_291_Update/req) (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/R_next_last_dest_id_291_Sample/ack branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/R_next_last_dest_id_291_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 157
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 159
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 160
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 161
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 162
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 163
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 164
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  // 			$guard (send_to_1) noblock_obuf_3_1 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch4x4.opt.aa, line 165
  // data_to_outport
  // noblock_obuf_3_1
  WPIPE_noblock_obuf_3_1_335_inst <=> (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/WPIPE_noblock_obuf_3_1_335_Sample/req branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/WPIPE_noblock_obuf_3_1_335_Update/req) (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/WPIPE_noblock_obuf_3_1_335_Sample/ack branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/WPIPE_noblock_obuf_3_1_335_Update/ack)
  // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 166
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  // 			$guard (send_to_2) noblock_obuf_3_2 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch4x4.opt.aa, line 167
  // data_to_outport
  // noblock_obuf_3_2
  WPIPE_noblock_obuf_3_2_344_inst <=> (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/WPIPE_noblock_obuf_3_2_344_Sample/req branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/WPIPE_noblock_obuf_3_2_344_Update/req) (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/WPIPE_noblock_obuf_3_2_344_Sample/ack branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/WPIPE_noblock_obuf_3_2_344_Update/ack)
  // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 168
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  // 			$guard (send_to_3) noblock_obuf_3_3 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch4x4.opt.aa, line 169
  // data_to_outport
  // noblock_obuf_3_3
  WPIPE_noblock_obuf_3_3_353_inst <=> (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/WPIPE_noblock_obuf_3_3_353_Sample/req branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/WPIPE_noblock_obuf_3_3_353_Update/req) (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/WPIPE_noblock_obuf_3_3_353_Sample/ack branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/WPIPE_noblock_obuf_3_3_353_Update/ack)
  // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 170
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  // 			$guard (send_to_4) noblock_obuf_3_4 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch4x4.opt.aa, line 171
  // data_to_outport
  // noblock_obuf_3_4
  WPIPE_noblock_obuf_3_4_362_inst <=> (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/WPIPE_noblock_obuf_3_4_362_Sample/req branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/WPIPE_noblock_obuf_3_4_362_Update/req) (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/WPIPE_noblock_obuf_3_4_362_Sample/ack branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/WPIPE_noblock_obuf_3_4_362_Update/ack)
  do_while_stmt_278_branch <=> (branch_block_stmt_277/do_while_stmt_278/do_while_stmt_278_loop_body/condition_evaluated) (branch_block_stmt_277/do_while_stmt_278/loop_exit/ack branch_block_stmt_277/do_while_stmt_278/loop_taken/ack)
}
$module [inputPort_4_Daemon] 
{
  // pipe-declarations for block %inputPort_4_Daemon
  //  file .Aa/switch4x4.opt.aa, line 176
  // pipe-declarations for block %inputPort_4_Daemon%loop
  //  file .Aa/switch4x4.opt.aa, line 181
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_380] // Branch Block  file .Aa/switch4x4.opt.aa, line 181
    {
      $P [branch_block_stmt_380__entry__]
      branch_block_stmt_380__entry__ <-| ($entry)
      $P [branch_block_stmt_380__exit__]
      branch_block_stmt_380__exit__ |-> ($exit)
      $P [do_while_stmt_381__entry__] 
      $P [do_while_stmt_381__exit__] 
      // do-while-statement  
      //  file .Aa/switch4x4.opt.aa, line 183
      <o> [do_while_stmt_381]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_381__entry__] 
        $P[do_while_stmt_381__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_381_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_383
          // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_383_sample_start_] 
          $T[phi_stmt_383_sample_completed_] 
          $T[phi_stmt_383_update_start_] 
          $T[phi_stmt_383_update_completed_] 
          $T[phi_stmt_383_sample_start__ps] 
          phi_stmt_383_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_383_sample_completed__ps] 
          phi_stmt_383_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_383_update_start__ps] 
          phi_stmt_383_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_383_update_completed__ps] 
          phi_stmt_383_update_completed_ <-& (phi_stmt_383_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_383_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_383_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_383_update_start_)
          $T[phi_stmt_383_loopback_trigger] 
          phi_stmt_383_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_383_loopback_sample_req] 
          $T[phi_stmt_383_loopback_sample_req_ps] 
          phi_stmt_383_loopback_sample_req <-& (phi_stmt_383_loopback_sample_req_ps)
          phi_stmt_383_loopback_sample_req &-> ($null)
          $T[phi_stmt_383_entry_trigger] 
          phi_stmt_383_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_383_entry_sample_req] 
          $T[phi_stmt_383_entry_sample_req_ps] 
          phi_stmt_383_entry_sample_req <-& (phi_stmt_383_entry_sample_req_ps)
          phi_stmt_383_entry_sample_req &-> ($null)
          phi_stmt_383_update_start_ o<-& (phi_stmt_383_update_completed_ 0)
          phi_stmt_383_sample_start_ o<-& (phi_stmt_383_sample_completed_ 1)
          $T[phi_stmt_383_merged_reqs] 
          $T[phi_stmt_383_phi_mux_ack] 
          $T[phi_stmt_383_phi_mux_ack_ps] 
          phi_stmt_383_phi_mux_ack_ps <-& (phi_stmt_383_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_383_update_completed_)
          $T[type_cast_386_sample_start__ps] 
          $T[type_cast_386_sample_completed__ps] 
          $T[type_cast_386_update_start__ps] 
          $T[type_cast_386_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_386_sample_start_] 
          $T[type_cast_386_sample_completed_] 
          type_cast_386_sample_completed_ <-& (type_cast_386_sample_start_)
          $T[type_cast_386_update_start_] 
          $T [type_cast_386_update_completed_] $delay 
          type_cast_386_update_completed_ <-& (type_cast_386_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_386_sample_start_ <-& (type_cast_386_sample_start__ps)
          type_cast_386_update_start_ <-& (type_cast_386_update_start__ps)
          // Phi complete dependency.
          type_cast_386_sample_completed__ps <-& (type_cast_386_sample_completed_)
          type_cast_386_update_completed__ps <-& (type_cast_386_update_completed_)
          $T[R_next_count_down_387_sample_start__ps] 
          $T[R_next_count_down_387_sample_completed__ps] 
          $T[R_next_count_down_387_update_start__ps] 
          $T[R_next_count_down_387_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_count_down_387_sample_start_] 
          $T[R_next_count_down_387_sample_completed_] 
          $T[R_next_count_down_387_update_start_] 
          $T[R_next_count_down_387_update_completed_] 
          ;;[R_next_count_down_387_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_count_down_387_sample_start_ &-> (R_next_count_down_387_Sample)
          R_next_count_down_387_sample_completed_ <-& (R_next_count_down_387_Sample)
          ;;[R_next_count_down_387_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_count_down_387_update_start_ &-> (R_next_count_down_387_Update)
          R_next_count_down_387_update_completed_ <-& (R_next_count_down_387_Update)
          // RAW reenables for next_count_down
          // Phi start dependency for implicit/constant alternative.
          R_next_count_down_387_sample_start_ <-& (R_next_count_down_387_sample_start__ps)
          R_next_count_down_387_update_start_ <-& (R_next_count_down_387_update_start__ps)
          // Phi complete dependency.
          R_next_count_down_387_sample_completed__ps <-& (R_next_count_down_387_sample_completed_)
          R_next_count_down_387_update_completed__ps <-& (R_next_count_down_387_update_completed_)
          $phisequencer [ phi_stmt_383_phi_seq] : 
          phi_stmt_383_entry_trigger type_cast_386_sample_start__ps type_cast_386_sample_completed__ps type_cast_386_update_start__ps type_cast_386_update_completed__ps phi_stmt_383_loopback_trigger R_next_count_down_387_sample_start__ps R_next_count_down_387_sample_completed__ps R_next_count_down_387_update_start__ps R_next_count_down_387_update_completed__ps :
          phi_stmt_383_sample_start__ps phi_stmt_383_sample_completed__ps phi_stmt_383_update_start__ps phi_stmt_383_update_completed__ps :
          phi_stmt_383_entry_sample_req_ps phi_stmt_383_loopback_sample_req_ps : 
          phi_stmt_383_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_383
          // start:  single source PHI statement phi_stmt_388
          // 			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_388_sample_start_] 
          $T[phi_stmt_388_sample_completed_] 
          $T[phi_stmt_388_update_start_] 
          $T[phi_stmt_388_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_388_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_388_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_388_update_start_)
          // non-implicit source expression in single-source phi
          // in_data_4
          $T[RPIPE_in_data_4_390_sample_start_] 
          $T[RPIPE_in_data_4_390_sample_completed_] 
          $T[RPIPE_in_data_4_390_update_start_] 
          $T[RPIPE_in_data_4_390_update_completed_] 
          ;;[RPIPE_in_data_4_390_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_in_data_4_390_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_in_data_4_390_sample_start_ &-> (RPIPE_in_data_4_390_Sample)
          RPIPE_in_data_4_390_sample_completed_ <-& (RPIPE_in_data_4_390_Sample)
          RPIPE_in_data_4_390_update_start_ <-& (RPIPE_in_data_4_390_sample_completed_)
          RPIPE_in_data_4_390_update_start_ &-> (RPIPE_in_data_4_390_Update)
          RPIPE_in_data_4_390_update_completed_ <-& (RPIPE_in_data_4_390_Update)
          RPIPE_in_data_4_390_sample_start_ o<-& (RPIPE_in_data_4_390_update_completed_ 0)
          // RAW reenables for in_data_4
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_in_data_4_390_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_in_data_4_390_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_in_data_4_390_update_start_)
          phi_stmt_388_update_completed_ <-& (RPIPE_in_data_4_390_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_388_update_completed_)
          // done: PHI Statement phi_stmt_388
          // start:  PHI statement phi_stmt_391
          // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_391_sample_start_] 
          $T[phi_stmt_391_sample_completed_] 
          $T[phi_stmt_391_update_start_] 
          $T[phi_stmt_391_update_completed_] 
          $T[phi_stmt_391_sample_start__ps] 
          phi_stmt_391_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_391_sample_completed__ps] 
          phi_stmt_391_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_391_update_start__ps] 
          phi_stmt_391_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_391_update_completed__ps] 
          phi_stmt_391_update_completed_ <-& (phi_stmt_391_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_391_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_391_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_391_update_start_)
          $T[phi_stmt_391_loopback_trigger] 
          phi_stmt_391_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_391_loopback_sample_req] 
          $T[phi_stmt_391_loopback_sample_req_ps] 
          phi_stmt_391_loopback_sample_req <-& (phi_stmt_391_loopback_sample_req_ps)
          phi_stmt_391_loopback_sample_req &-> ($null)
          $T[phi_stmt_391_entry_trigger] 
          phi_stmt_391_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_391_entry_sample_req] 
          $T[phi_stmt_391_entry_sample_req_ps] 
          phi_stmt_391_entry_sample_req <-& (phi_stmt_391_entry_sample_req_ps)
          phi_stmt_391_entry_sample_req &-> ($null)
          phi_stmt_391_update_start_ o<-& (phi_stmt_391_update_completed_ 0)
          phi_stmt_391_sample_start_ o<-& (phi_stmt_391_sample_completed_ 1)
          $T[phi_stmt_391_merged_reqs] 
          $T[phi_stmt_391_phi_mux_ack] 
          $T[phi_stmt_391_phi_mux_ack_ps] 
          phi_stmt_391_phi_mux_ack_ps <-& (phi_stmt_391_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_391_update_completed_)
          $T[konst_393_sample_start__ps] 
          $T[konst_393_sample_completed__ps] 
          $T[konst_393_update_start__ps] 
          $T[konst_393_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_393_sample_start_] 
          $T[konst_393_sample_completed_] 
          konst_393_sample_completed_ <-& (konst_393_sample_start_)
          $T[konst_393_update_start_] 
          $T [konst_393_update_completed_] $delay 
          konst_393_update_completed_ <-& (konst_393_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_393_sample_start_ <-& (konst_393_sample_start__ps)
          konst_393_update_start_ <-& (konst_393_update_start__ps)
          // Phi complete dependency.
          konst_393_sample_completed__ps <-& (konst_393_sample_completed_)
          konst_393_update_completed__ps <-& (konst_393_update_completed_)
          $T[R_next_last_dest_id_394_sample_start__ps] 
          $T[R_next_last_dest_id_394_sample_completed__ps] 
          $T[R_next_last_dest_id_394_update_start__ps] 
          $T[R_next_last_dest_id_394_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_last_dest_id_394_sample_start_] 
          $T[R_next_last_dest_id_394_sample_completed_] 
          $T[R_next_last_dest_id_394_update_start_] 
          $T[R_next_last_dest_id_394_update_completed_] 
          ;;[R_next_last_dest_id_394_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_last_dest_id_394_sample_start_ &-> (R_next_last_dest_id_394_Sample)
          R_next_last_dest_id_394_sample_completed_ <-& (R_next_last_dest_id_394_Sample)
          ;;[R_next_last_dest_id_394_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_last_dest_id_394_update_start_ &-> (R_next_last_dest_id_394_Update)
          R_next_last_dest_id_394_update_completed_ <-& (R_next_last_dest_id_394_Update)
          // RAW reenables for next_last_dest_id
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_last_dest_id_394_sample_start_ <-& (R_next_last_dest_id_394_sample_start__ps)
          R_next_last_dest_id_394_update_start_ <-& (R_next_last_dest_id_394_update_start__ps)
          // Phi complete dependency.
          R_next_last_dest_id_394_sample_completed__ps <-& (R_next_last_dest_id_394_sample_completed_)
          R_next_last_dest_id_394_update_completed__ps <-& (R_next_last_dest_id_394_update_completed_)
          $phisequencer [ phi_stmt_391_phi_seq] : 
          phi_stmt_391_entry_trigger konst_393_sample_start__ps konst_393_sample_completed__ps konst_393_update_start__ps konst_393_update_completed__ps phi_stmt_391_loopback_trigger R_next_last_dest_id_394_sample_start__ps R_next_last_dest_id_394_sample_completed__ps R_next_last_dest_id_394_update_start__ps R_next_last_dest_id_394_update_completed__ps :
          phi_stmt_391_sample_start__ps phi_stmt_391_sample_completed__ps phi_stmt_391_update_start__ps phi_stmt_391_update_completed__ps :
          phi_stmt_391_entry_sample_req_ps phi_stmt_391_loopback_sample_req_ps : 
          phi_stmt_391_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_391
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // start:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 193
          // volatile! 
          // Source expression
          // (count_down == 0 )
          // count_down
          // Target expression
          // (as target) new_packet
          // start: WAR dependencies for new_packet
          // done: WAR dependencies for new_packet
          // end:  			$volatile new_packet := (count_down == 0 ) $buffering 1
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // start:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 195
          // volatile! 
          // Source expression
          // ( $slice input_word 31 24 ) 
          // input_word
          // Target expression
          // (as target) dest_id
          // start: WAR dependencies for dest_id
          // done: WAR dependencies for dest_id
          // end:  			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // start:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 196
          // volatile! 
          // Source expression
          // ( $slice input_word 23 8 ) 
          // input_word
          // Target expression
          // (as target) pkt_length
          // start: WAR dependencies for pkt_length
          // done: WAR dependencies for pkt_length
          // end:  			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // start:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 197
          // volatile! 
          // Source expression
          // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
          // new_packet
          // (pkt_length - 1 )
          // pkt_length
          // (count_down - 1 )
          // count_down
          // Target expression
          // (as target) next_count_down
          // start: WAR dependencies for next_count_down
          // WAR dependency: Read: next_count_down before Write: 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_count_down
          // end:  			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // start:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 198
          // volatile! 
          // Source expression
          // ( $mux new_packet dest_id  last_dest_id ) 
          // new_packet
          // dest_id
          // last_dest_id
          // Target expression
          // (as target) next_last_dest_id
          // start: WAR dependencies for next_last_dest_id
          // WAR dependency: Read: next_last_dest_id before Write: 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_last_dest_id
          // end:  			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // start:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 199
          // volatile! 
          // Source expression
          // (ONE_1 && input_word)
          // input_word
          // Target expression
          // (as target) data_to_outport
          // start: WAR dependencies for data_to_outport
          // done: WAR dependencies for data_to_outport
          // end:  			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // start:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 200
          // volatile! 
          // Source expression
          // (next_last_dest_id == 1 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_1
          // start: WAR dependencies for send_to_1
          // done: WAR dependencies for send_to_1
          // end:  			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
          // start:  			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch4x4.opt.aa, line 201
          // Guard expression 
          // send_to_1
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_4_1
          $T[WPIPE_noblock_obuf_4_1_438_sample_start_] 
          $T[WPIPE_noblock_obuf_4_1_438_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_1_438_update_start_] 
          $T[WPIPE_noblock_obuf_4_1_438_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_1_438 with guard R_send_to_1_437
          WPIPE_noblock_obuf_4_1_438_sample_start_ <-& (phi_stmt_383_update_completed_)
          WPIPE_noblock_obuf_4_1_438_sample_start_ <-& (phi_stmt_388_update_completed_)
          WPIPE_noblock_obuf_4_1_438_sample_start_ <-& (phi_stmt_391_update_completed_)
          // RAW reenables for send_to_1
          phi_stmt_383_update_start_ o<-& (WPIPE_noblock_obuf_4_1_438_sample_completed_ 0)
          phi_stmt_388_update_start_ o<-& (WPIPE_noblock_obuf_4_1_438_sample_completed_ 0)
          phi_stmt_391_update_start_ o<-& (WPIPE_noblock_obuf_4_1_438_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_1_438_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_1_438_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_1
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_1_438_sample_start_ &-> (WPIPE_noblock_obuf_4_1_438_Sample)
          WPIPE_noblock_obuf_4_1_438_sample_completed_ <-& (WPIPE_noblock_obuf_4_1_438_Sample)
          WPIPE_noblock_obuf_4_1_438_update_start_ <-& (WPIPE_noblock_obuf_4_1_438_sample_completed_)
          WPIPE_noblock_obuf_4_1_438_update_start_ &-> (WPIPE_noblock_obuf_4_1_438_Update)
          WPIPE_noblock_obuf_4_1_438_update_completed_ <-& (WPIPE_noblock_obuf_4_1_438_Update)
          WPIPE_noblock_obuf_4_1_438_sample_start_ o<-& (WPIPE_noblock_obuf_4_1_438_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_1_438_sample_start_
          WPIPE_noblock_obuf_4_1_438_sample_start_ <-& (phi_stmt_388_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_1_438_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_388_update_start_ o<-& (WPIPE_noblock_obuf_4_1_438_sample_completed_ 0)
          // end:  			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // start:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 202
          // volatile! 
          // Source expression
          // (next_last_dest_id == 2 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_2
          // start: WAR dependencies for send_to_2
          // done: WAR dependencies for send_to_2
          // end:  			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
          // start:  			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch4x4.opt.aa, line 203
          // Guard expression 
          // send_to_2
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_4_2
          $T[WPIPE_noblock_obuf_4_2_447_sample_start_] 
          $T[WPIPE_noblock_obuf_4_2_447_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_2_447_update_start_] 
          $T[WPIPE_noblock_obuf_4_2_447_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_2_447 with guard R_send_to_2_446
          WPIPE_noblock_obuf_4_2_447_sample_start_ <-& (phi_stmt_383_update_completed_)
          WPIPE_noblock_obuf_4_2_447_sample_start_ <-& (phi_stmt_388_update_completed_)
          WPIPE_noblock_obuf_4_2_447_sample_start_ <-& (phi_stmt_391_update_completed_)
          // RAW reenables for send_to_2
          phi_stmt_383_update_start_ o<-& (WPIPE_noblock_obuf_4_2_447_sample_completed_ 0)
          phi_stmt_388_update_start_ o<-& (WPIPE_noblock_obuf_4_2_447_sample_completed_ 0)
          phi_stmt_391_update_start_ o<-& (WPIPE_noblock_obuf_4_2_447_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_2_447_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_2_447_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_2
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_2_447_sample_start_ &-> (WPIPE_noblock_obuf_4_2_447_Sample)
          WPIPE_noblock_obuf_4_2_447_sample_completed_ <-& (WPIPE_noblock_obuf_4_2_447_Sample)
          WPIPE_noblock_obuf_4_2_447_update_start_ <-& (WPIPE_noblock_obuf_4_2_447_sample_completed_)
          WPIPE_noblock_obuf_4_2_447_update_start_ &-> (WPIPE_noblock_obuf_4_2_447_Update)
          WPIPE_noblock_obuf_4_2_447_update_completed_ <-& (WPIPE_noblock_obuf_4_2_447_Update)
          WPIPE_noblock_obuf_4_2_447_sample_start_ o<-& (WPIPE_noblock_obuf_4_2_447_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_2_447_sample_start_
          WPIPE_noblock_obuf_4_2_447_sample_start_ <-& (phi_stmt_388_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_2_447_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_388_update_start_ o<-& (WPIPE_noblock_obuf_4_2_447_sample_completed_ 0)
          // end:  			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // start:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 204
          // volatile! 
          // Source expression
          // (next_last_dest_id == 3 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_3
          // start: WAR dependencies for send_to_3
          // done: WAR dependencies for send_to_3
          // end:  			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
          // start:  			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch4x4.opt.aa, line 205
          // Guard expression 
          // send_to_3
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_4_3
          $T[WPIPE_noblock_obuf_4_3_456_sample_start_] 
          $T[WPIPE_noblock_obuf_4_3_456_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_3_456_update_start_] 
          $T[WPIPE_noblock_obuf_4_3_456_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_3_456 with guard R_send_to_3_455
          WPIPE_noblock_obuf_4_3_456_sample_start_ <-& (phi_stmt_383_update_completed_)
          WPIPE_noblock_obuf_4_3_456_sample_start_ <-& (phi_stmt_388_update_completed_)
          WPIPE_noblock_obuf_4_3_456_sample_start_ <-& (phi_stmt_391_update_completed_)
          // RAW reenables for send_to_3
          phi_stmt_383_update_start_ o<-& (WPIPE_noblock_obuf_4_3_456_sample_completed_ 0)
          phi_stmt_388_update_start_ o<-& (WPIPE_noblock_obuf_4_3_456_sample_completed_ 0)
          phi_stmt_391_update_start_ o<-& (WPIPE_noblock_obuf_4_3_456_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_3_456_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_3_456_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_3
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_3_456_sample_start_ &-> (WPIPE_noblock_obuf_4_3_456_Sample)
          WPIPE_noblock_obuf_4_3_456_sample_completed_ <-& (WPIPE_noblock_obuf_4_3_456_Sample)
          WPIPE_noblock_obuf_4_3_456_update_start_ <-& (WPIPE_noblock_obuf_4_3_456_sample_completed_)
          WPIPE_noblock_obuf_4_3_456_update_start_ &-> (WPIPE_noblock_obuf_4_3_456_Update)
          WPIPE_noblock_obuf_4_3_456_update_completed_ <-& (WPIPE_noblock_obuf_4_3_456_Update)
          WPIPE_noblock_obuf_4_3_456_sample_start_ o<-& (WPIPE_noblock_obuf_4_3_456_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_3_456_sample_start_
          WPIPE_noblock_obuf_4_3_456_sample_start_ <-& (phi_stmt_388_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_3_456_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_388_update_start_ o<-& (WPIPE_noblock_obuf_4_3_456_sample_completed_ 0)
          // end:  			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // start:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 206
          // volatile! 
          // Source expression
          // (next_last_dest_id == 4 )
          // next_last_dest_id
          // Target expression
          // (as target) send_to_4
          // start: WAR dependencies for send_to_4
          // done: WAR dependencies for send_to_4
          // end:  			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
          // start:  			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          //  file .Aa/switch4x4.opt.aa, line 207
          // Guard expression 
          // send_to_4
          // Source expression
          // data_to_outport
          // Target expression
          // (as target) noblock_obuf_4_4
          $T[WPIPE_noblock_obuf_4_4_465_sample_start_] 
          $T[WPIPE_noblock_obuf_4_4_465_sample_completed_] 
          $T[WPIPE_noblock_obuf_4_4_465_update_start_] 
          $T[WPIPE_noblock_obuf_4_4_465_update_completed_] 
          // Guard dependency for expression WPIPE_noblock_obuf_4_4_465 with guard R_send_to_4_464
          WPIPE_noblock_obuf_4_4_465_sample_start_ <-& (phi_stmt_383_update_completed_)
          WPIPE_noblock_obuf_4_4_465_sample_start_ <-& (phi_stmt_388_update_completed_)
          WPIPE_noblock_obuf_4_4_465_sample_start_ <-& (phi_stmt_391_update_completed_)
          // RAW reenables for send_to_4
          phi_stmt_383_update_start_ o<-& (WPIPE_noblock_obuf_4_4_465_sample_completed_ 0)
          phi_stmt_388_update_start_ o<-& (WPIPE_noblock_obuf_4_4_465_sample_completed_ 0)
          phi_stmt_391_update_start_ o<-& (WPIPE_noblock_obuf_4_4_465_sample_completed_ 0)
          ;;[WPIPE_noblock_obuf_4_4_465_Sample] 
          {
            // pipe write sample-start noblock_obuf_4_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_noblock_obuf_4_4_465_Update] 
          {
            // pipe write update (complete) noblock_obuf_4_4
            $T [req] $T [ack] 
          }
          WPIPE_noblock_obuf_4_4_465_sample_start_ &-> (WPIPE_noblock_obuf_4_4_465_Sample)
          WPIPE_noblock_obuf_4_4_465_sample_completed_ <-& (WPIPE_noblock_obuf_4_4_465_Sample)
          WPIPE_noblock_obuf_4_4_465_update_start_ <-& (WPIPE_noblock_obuf_4_4_465_sample_completed_)
          WPIPE_noblock_obuf_4_4_465_update_start_ &-> (WPIPE_noblock_obuf_4_4_465_Update)
          WPIPE_noblock_obuf_4_4_465_update_completed_ <-& (WPIPE_noblock_obuf_4_4_465_Update)
          WPIPE_noblock_obuf_4_4_465_sample_start_ o<-& (WPIPE_noblock_obuf_4_4_465_update_completed_ 0)
          // start: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_4_465_sample_start_
          WPIPE_noblock_obuf_4_4_465_sample_start_ <-& (phi_stmt_388_update_completed_)
          // done: Forward dependencies from data_to_outport to transition WPIPE_noblock_obuf_4_4_465_sample_start_
          // RAW reenables for data_to_outport
          phi_stmt_388_update_start_ o<-& (WPIPE_noblock_obuf_4_4_465_sample_completed_ 0)
          // end:  			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe in_data_4
          // read-dependencies for pipe in_data_4
          // write-dependencies for pipe in_data_4
          // signal write dependencies for in_data_4
          // pipe read/write dependencies for pipe noblock_obuf_4_1
          // read-dependencies for pipe noblock_obuf_4_1
          // write-dependencies for pipe noblock_obuf_4_1
          // signal write dependencies for noblock_obuf_4_1
          // pipe read/write dependencies for pipe noblock_obuf_4_2
          // read-dependencies for pipe noblock_obuf_4_2
          // write-dependencies for pipe noblock_obuf_4_2
          // signal write dependencies for noblock_obuf_4_2
          // pipe read/write dependencies for pipe noblock_obuf_4_3
          // read-dependencies for pipe noblock_obuf_4_3
          // write-dependencies for pipe noblock_obuf_4_3
          // signal write dependencies for noblock_obuf_4_3
          // pipe read/write dependencies for pipe noblock_obuf_4_4
          // read-dependencies for pipe noblock_obuf_4_4
          // write-dependencies for pipe noblock_obuf_4_4
          // signal write dependencies for noblock_obuf_4_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_381__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_381_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_381__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_381_loop_body : condition_evaluated
        $bind do_while_stmt_381__entry__  => do_while_stmt_381_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_381_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_381__exit__)
      }
      do_while_stmt_381__entry__ |-> (do_while_stmt_381)
      do_while_stmt_381__exit__ <-| (do_while_stmt_381)
      do_while_stmt_381__entry__ <-| (branch_block_stmt_380__entry__)
      do_while_stmt_381__exit__ |-> (branch_block_stmt_380__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %inputPort_4_Daemon%loop%
    //  file .Aa/switch4x4.opt.aa, line 185
    // constant-object-declarations for block %inputPort_4_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 181
    // constant-object-declarations for block %inputPort_4_Daemon
    //  file .Aa/switch4x4.opt.aa, line 176
    // constant-declarations for block %inputPort_4_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 181
    // do-while statement  
    //  file .Aa/switch4x4.opt.aa, line 183
    // 1 
    $constant $W[konst_479_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %inputPort_4_Daemon%loop%
    //  file .Aa/switch4x4.opt.aa, line 185
    // constant-declarations for phi:  			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 186
    // ($bitcast ($uint<16>) 0  )
    $constant $W[type_cast_386_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch4x4.opt.aa, line 188
    // constant-declarations for phi:  			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch4x4.opt.aa, line 190
    // 0 
    $constant $W[konst_393_wire_constant] : $int<8> := _b00000000// 0
    // 0 
    $constant $W[konst_398_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    // 1 
    $constant $W[konst_414_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_417_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux new_packet dest_id  last_dest_id ) 
    // ONE_1
    $constant $W[R_ONE_1_428_wire_constant] : $int<1> := _b1// 1
    // 1 
    $constant $W[konst_434_wire_constant] : $int<8> := _b00000001// 1
    // 2 
    $constant $W[konst_443_wire_constant] : $int<8> := _b00000010// 2
    // 3 
    $constant $W[konst_452_wire_constant] : $int<8> := _b00000011// 3
    // 4 
    $constant $W[konst_461_wire_constant] : $int<8> := _b00000100// 4
    // block %inputPort_4_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 181
    // do-while statement  
    //  file .Aa/switch4x4.opt.aa, line 183
    // merge-statement  
    //  file .Aa/switch4x4.opt.aa, line 185
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 186
    $W[next_count_down_420_387_buffered] : $int<16>
    // count_down
    $W[count_down_383] : $int<16>
    // 			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch4x4.opt.aa, line 188
    // in_data_4
    $W[RPIPE_in_data_4_390_wire] : $int<32>
    // input_word
    $W[input_word_388] : $int<32>
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch4x4.opt.aa, line 190
    $W[next_last_dest_id_426_394_buffered] : $int<8>
    // last_dest_id
    $W[last_dest_id_391] : $int<8>
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 193
    // new_packet
    $W[new_packet_400] : $int<1>
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 195
    // dest_id
    $W[dest_id_406] : $int<8>
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 196
    // pkt_length
    $W[pkt_length_410] : $int<16>
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 197
    // (pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_415_wire] : $int<16>
    // (count_down - 1 )
    $intermediate $W[SUB_u16_u16_418_wire] : $int<16>
    // next_count_down
    $W[next_count_down_420] : $int<16>
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 198
    // next_last_dest_id
    $W[next_last_dest_id_426] : $int<8>
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 199
    // data_to_outport
    $W[data_to_outport_431] : $int<33>
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 200
    // send_to_1
    $W[send_to_1_436] : $int<1>
    // 			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 201
    // noblock_obuf_4_1
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 202
    // send_to_2
    $W[send_to_2_445] : $int<1>
    // 			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 203
    // noblock_obuf_4_2
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 204
    // send_to_3
    $W[send_to_3_454] : $int<1>
    // 			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 205
    // noblock_obuf_4_3
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 206
    // send_to_4
    $W[send_to_4_463] : $int<1>
    // 			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 207
    // noblock_obuf_4_4
    // datapath-instances for block %inputPort_4_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 181
    // datapath-instances for do-while  
    //  file .Aa/switch4x4.opt.aa, line 183
    ==0? [do_while_stmt_381_branch] (konst_479_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch4x4.opt.aa, line 185
    // 			$phi count_down := 			  ($bitcast ($uint<16>) 0  ) $on   $entry 			  next_count_down $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 186
    # := [next_count_down_420_387_buf] (next_count_down_420) (next_count_down_420_387_buffered)     $fullrate
    $buffering $out next_count_down_420_387_buf next_count_down_420_387_buffered  1
    # $phi [phi_stmt_383] (type_cast_386_wire_constant next_count_down_420_387_buffered) ( count_down_383 ) $fullrate
    // $buffering  $out phi_stmt_383 count_down_383 2
    // 			$phi input_word := 			  in_data_4 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file .Aa/switch4x4.opt.aa, line 188
    // in_data_4
    $ioport $in [RPIPE_in_data_4_390_inst] (in_data_4) (RPIPE_in_data_4_390_wire)  $fullrate 
    $buffering $out RPIPE_in_data_4_390_inst RPIPE_in_data_4_390_wire 1
    # := [ssrc_phi_stmt_388] (RPIPE_in_data_4_390_wire) (input_word_388)    $flowthrough 
    // 			$phi last_dest_id := 			  0  $on   $entry 			  next_last_dest_id $on   $loopback 
    // type of target is $uint<8>
    //  file .Aa/switch4x4.opt.aa, line 190
    # := [next_last_dest_id_426_394_buf] (next_last_dest_id_426) (next_last_dest_id_426_394_buffered)     $fullrate
    $buffering $out next_last_dest_id_426_394_buf next_last_dest_id_426_394_buffered  1
    # $phi [phi_stmt_391] (konst_393_wire_constant next_last_dest_id_426_394_buffered) ( last_dest_id_391 ) $fullrate
    // $buffering  $out phi_stmt_391 last_dest_id_391 2
    // 			$volatile new_packet := (count_down == 0 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 193
    // (count_down == 0 )
    ==[EQ_u16_u1_399_inst] (count_down_383 konst_398_wire_constant) (new_packet_400)   $flowthrough 
    $delay EQ_u16_u1_399_inst 0
    // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 195
    // ( $slice input_word 31 24 ) 
    [:] [slice_405_inst] (input_word_388 31 24) (dest_id_406)  $flowthrough
    $delay slice_405_inst 0
    // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 196
    // ( $slice input_word 23 8 ) 
    [:] [slice_409_inst] (input_word_388 23 8) (pkt_length_410)  $flowthrough
    $delay slice_409_inst 0
    // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 197
    // (pkt_length - 1 )
    -[SUB_u16_u16_415_inst] (pkt_length_410 konst_414_wire_constant) (SUB_u16_u16_415_wire)   $flowthrough 
    $delay SUB_u16_u16_415_inst 0
    // (count_down - 1 )
    -[SUB_u16_u16_418_inst] (count_down_383 konst_417_wire_constant) (SUB_u16_u16_418_wire)   $flowthrough 
    $delay SUB_u16_u16_418_inst 0
    // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
    ? [MUX_419_inst] (new_packet_400 SUB_u16_u16_415_wire SUB_u16_u16_418_wire) (next_count_down_420)  $flowthrough
    // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 198
    // ( $mux new_packet dest_id  last_dest_id ) 
    ? [MUX_425_inst] (new_packet_400 dest_id_406 last_dest_id_391) (next_last_dest_id_426)  $flowthrough
    // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 199
    // (ONE_1 && input_word)
    &&[CONCAT_u1_u33_430_inst] (R_ONE_1_428_wire_constant input_word_388) (data_to_outport_431)   $flowthrough 
    $delay CONCAT_u1_u33_430_inst 0
    // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 200
    // (next_last_dest_id == 1 )
    ==[EQ_u8_u1_435_inst] (next_last_dest_id_426 konst_434_wire_constant) (send_to_1_436)   $flowthrough 
    $delay EQ_u8_u1_435_inst 0
    // 			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 201
    // noblock_obuf_4_1
    $ioport $out [WPIPE_noblock_obuf_4_1_438_inst]  (data_to_outport_431) (noblock_obuf_4_1) $guard ( send_to_1_436 )  $fullrate 
    // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 202
    // (next_last_dest_id == 2 )
    ==[EQ_u8_u1_444_inst] (next_last_dest_id_426 konst_443_wire_constant) (send_to_2_445)   $flowthrough 
    $delay EQ_u8_u1_444_inst 0
    // 			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 203
    // noblock_obuf_4_2
    $ioport $out [WPIPE_noblock_obuf_4_2_447_inst]  (data_to_outport_431) (noblock_obuf_4_2) $guard ( send_to_2_445 )  $fullrate 
    // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 204
    // (next_last_dest_id == 3 )
    ==[EQ_u8_u1_453_inst] (next_last_dest_id_426 konst_452_wire_constant) (send_to_3_454)   $flowthrough 
    $delay EQ_u8_u1_453_inst 0
    // 			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 205
    // noblock_obuf_4_3
    $ioport $out [WPIPE_noblock_obuf_4_3_456_inst]  (data_to_outport_431) (noblock_obuf_4_3) $guard ( send_to_3_454 )  $fullrate 
    // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 206
    // (next_last_dest_id == 4 )
    ==[EQ_u8_u1_462_inst] (next_last_dest_id_426 konst_461_wire_constant) (send_to_4_463)   $flowthrough 
    $delay EQ_u8_u1_462_inst 0
    // 			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
    //  file .Aa/switch4x4.opt.aa, line 207
    // noblock_obuf_4_4
    $ioport $out [WPIPE_noblock_obuf_4_4_465_inst]  (data_to_outport_431) (noblock_obuf_4_4) $guard ( send_to_4_463 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_381
  //  file .Aa/switch4x4.opt.aa, line 183
  phi_stmt_383 <=> (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/phi_stmt_383_entry_sample_req branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/phi_stmt_383_loopback_sample_req) (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/phi_stmt_383_phi_mux_ack)
  next_count_down_420_387_buf <=> (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/R_next_count_down_387_Sample/req branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/R_next_count_down_387_Update/req) (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/R_next_count_down_387_Sample/ack branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/R_next_count_down_387_Update/ack)
  // in_data_4
  RPIPE_in_data_4_390_inst <=> (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/RPIPE_in_data_4_390_Sample/rr branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/RPIPE_in_data_4_390_Update/cr) (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/RPIPE_in_data_4_390_Sample/ra branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/RPIPE_in_data_4_390_Update/ca)
  phi_stmt_391 <=> (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/phi_stmt_391_entry_sample_req branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/phi_stmt_391_loopback_sample_req) (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/phi_stmt_391_phi_mux_ack)
  next_last_dest_id_426_394_buf <=> (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/R_next_last_dest_id_394_Sample/req branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/R_next_last_dest_id_394_Update/req) (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/R_next_last_dest_id_394_Sample/ack branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/R_next_last_dest_id_394_Update/ack)
  // 			$volatile new_packet := (count_down == 0 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 193
  // (count_down == 0 )
  // count_down
  // 			$volatile dest_id := ( $slice input_word 31 24 )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 195
  // input_word
  // 			$volatile pkt_length := ( $slice input_word 23 8 )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 196
  // input_word
  // 			$volatile next_count_down := ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 197
  // new_packet
  // (pkt_length - 1 )
  // pkt_length
  // (count_down - 1 )
  // count_down
  // ( $mux new_packet (pkt_length - 1 )  (count_down - 1 ) ) 
  // 			$volatile next_last_dest_id := ( $mux new_packet dest_id  last_dest_id )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 198
  // new_packet
  // dest_id
  // last_dest_id
  // ( $mux new_packet dest_id  last_dest_id ) 
  // 			$volatile data_to_outport := (ONE_1 && input_word) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 199
  // (ONE_1 && input_word)
  // input_word
  // 			$volatile send_to_1 := (next_last_dest_id == 1 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 200
  // (next_last_dest_id == 1 )
  // next_last_dest_id
  // 			$guard (send_to_1) noblock_obuf_4_1 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch4x4.opt.aa, line 201
  // data_to_outport
  // noblock_obuf_4_1
  WPIPE_noblock_obuf_4_1_438_inst <=> (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/WPIPE_noblock_obuf_4_1_438_Sample/req branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/WPIPE_noblock_obuf_4_1_438_Update/req) (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/WPIPE_noblock_obuf_4_1_438_Sample/ack branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/WPIPE_noblock_obuf_4_1_438_Update/ack)
  // 			$volatile send_to_2 := (next_last_dest_id == 2 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 202
  // (next_last_dest_id == 2 )
  // next_last_dest_id
  // 			$guard (send_to_2) noblock_obuf_4_2 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch4x4.opt.aa, line 203
  // data_to_outport
  // noblock_obuf_4_2
  WPIPE_noblock_obuf_4_2_447_inst <=> (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/WPIPE_noblock_obuf_4_2_447_Sample/req branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/WPIPE_noblock_obuf_4_2_447_Update/req) (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/WPIPE_noblock_obuf_4_2_447_Sample/ack branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/WPIPE_noblock_obuf_4_2_447_Update/ack)
  // 			$volatile send_to_3 := (next_last_dest_id == 3 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 204
  // (next_last_dest_id == 3 )
  // next_last_dest_id
  // 			$guard (send_to_3) noblock_obuf_4_3 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch4x4.opt.aa, line 205
  // data_to_outport
  // noblock_obuf_4_3
  WPIPE_noblock_obuf_4_3_456_inst <=> (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/WPIPE_noblock_obuf_4_3_456_Sample/req branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/WPIPE_noblock_obuf_4_3_456_Update/req) (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/WPIPE_noblock_obuf_4_3_456_Sample/ack branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/WPIPE_noblock_obuf_4_3_456_Update/ack)
  // 			$volatile send_to_4 := (next_last_dest_id == 4 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 206
  // (next_last_dest_id == 4 )
  // next_last_dest_id
  // 			$guard (send_to_4) noblock_obuf_4_4 := data_to_outport $buffering 1// bits of buffering = 33. 
  //  file .Aa/switch4x4.opt.aa, line 207
  // data_to_outport
  // noblock_obuf_4_4
  WPIPE_noblock_obuf_4_4_465_inst <=> (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/WPIPE_noblock_obuf_4_4_465_Sample/req branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/WPIPE_noblock_obuf_4_4_465_Update/req) (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/WPIPE_noblock_obuf_4_4_465_Sample/ack branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/WPIPE_noblock_obuf_4_4_465_Update/ack)
  do_while_stmt_381_branch <=> (branch_block_stmt_380/do_while_stmt_381/do_while_stmt_381_loop_body/condition_evaluated) (branch_block_stmt_380/do_while_stmt_381/loop_exit/ack branch_block_stmt_380/do_while_stmt_381/loop_taken/ack)
}
$volatile $module [prioritySelect] 
{
  $in down_counter:$int<16>
  // can point into 
  active_packet:$int<3>
  // can point into 
  pkt_with_priority:$int<3>
  // can point into 
  p1_valid:$int<1>
  // can point into 
  p2_valid:$int<1>
  // can point into 
  p3_valid:$int<1>
  // can point into 
  p4_valid:$int<1>
  // can point into 
  $out next_active_packet:$int<3>
  // can point into 
  next_pkt_with_priority:$int<3>
  // can point into 
  // pipe-declarations for block %prioritySelect
  //  file .Aa/switch4x4.opt.aa, line 212
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // Volatile! CP is left blank 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %prioritySelect
    //  file .Aa/switch4x4.opt.aa, line 212
    // 0 
    $constant $W[konst_494_wire_constant] : $int<16> := _b0000000000000000// 0
    // 0 
    $constant $W[konst_500_wire_constant] : $int<3> := _b000// 0
    // ( $mux (pkt_with_priority == 1 ) p1_valid  ( $mux (pkt_with_priority == 2 ) p2_valid  ( $mux (pkt_with_priority == 3 ) p3_valid  p4_valid )  )  ) 
    // 1 
    $constant $W[konst_508_wire_constant] : $int<3> := _b001// 1
    // ( $mux (pkt_with_priority == 2 ) p2_valid  ( $mux (pkt_with_priority == 3 ) p3_valid  p4_valid )  ) 
    // 2 
    $constant $W[konst_512_wire_constant] : $int<3> := _b010// 2
    // ( $mux (pkt_with_priority == 3 ) p3_valid  p4_valid ) 
    // 3 
    $constant $W[konst_516_wire_constant] : $int<3> := _b011// 3
    // ( $mux (active_packet == 1 ) p1_valid  ( $mux (active_packet == 2 ) p2_valid  ( $mux (active_packet == 3 ) p3_valid  p4_valid )  )  ) 
    // 1 
    $constant $W[konst_526_wire_constant] : $int<3> := _b001// 1
    // ( $mux (active_packet == 2 ) p2_valid  ( $mux (active_packet == 3 ) p3_valid  p4_valid )  ) 
    // 2 
    $constant $W[konst_530_wire_constant] : $int<3> := _b010// 2
    // ( $mux (active_packet == 3 ) p3_valid  p4_valid ) 
    // 3 
    $constant $W[konst_534_wire_constant] : $int<3> := _b011// 3
    // ( $mux (pkt_with_priority == 1 ) 2   ( $mux (pkt_with_priority == 2 ) 3   ( $mux (pkt_with_priority == 3 ) 4   1  )  )  ) 
    // 1 
    $constant $W[konst_544_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_546_wire_constant] : $int<3> := _b010// 2
    // ( $mux (pkt_with_priority == 2 ) 3   ( $mux (pkt_with_priority == 3 ) 4   1  )  ) 
    // 2 
    $constant $W[konst_548_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_550_wire_constant] : $int<3> := _b011// 3
    // ( $mux (pkt_with_priority == 3 ) 4   1  ) 
    // 3 
    $constant $W[konst_552_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_554_wire_constant] : $int<3> := _b100// 4
    // 1 
    $constant $W[konst_555_wire_constant] : $int<3> := _b001// 1
    // ( $mux (next_to_pkt_with_priority == 1 ) p1_valid  ( $mux (next_to_pkt_with_priority == 2 ) p2_valid  ( $mux (next_to_pkt_with_priority == 3 ) p3_valid  p4_valid )  )  ) 
    // 1 
    $constant $W[konst_562_wire_constant] : $int<3> := _b001// 1
    // ( $mux (next_to_pkt_with_priority == 2 ) p2_valid  ( $mux (next_to_pkt_with_priority == 3 ) p3_valid  p4_valid )  ) 
    // 2 
    $constant $W[konst_566_wire_constant] : $int<3> := _b010// 2
    // ( $mux (next_to_pkt_with_priority == 3 ) p3_valid  p4_valid ) 
    // 3 
    $constant $W[konst_570_wire_constant] : $int<3> := _b011// 3
    // ( $mux (next_to_pkt_with_priority == 1 ) 2   ( $mux (next_to_pkt_with_priority == 2 ) 3   ( $mux (next_to_pkt_with_priority == 3 ) 4   1  )  )  ) 
    // 1 
    $constant $W[konst_580_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_582_wire_constant] : $int<3> := _b010// 2
    // ( $mux (next_to_pkt_with_priority == 2 ) 3   ( $mux (next_to_pkt_with_priority == 3 ) 4   1  )  ) 
    // 2 
    $constant $W[konst_584_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_586_wire_constant] : $int<3> := _b011// 3
    // ( $mux (next_to_pkt_with_priority == 3 ) 4   1  ) 
    // 3 
    $constant $W[konst_588_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_590_wire_constant] : $int<3> := _b100// 4
    // 1 
    $constant $W[konst_591_wire_constant] : $int<3> := _b001// 1
    // ( $mux (last_pkt_with_priority == 1 ) p1_valid  ( $mux (last_pkt_with_priority == 2 ) p2_valid  ( $mux (last_pkt_with_priority == 3 ) p3_valid  p4_valid )  )  ) 
    // 1 
    $constant $W[konst_598_wire_constant] : $int<3> := _b001// 1
    // ( $mux (last_pkt_with_priority == 2 ) p2_valid  ( $mux (last_pkt_with_priority == 3 ) p3_valid  p4_valid )  ) 
    // 2 
    $constant $W[konst_602_wire_constant] : $int<3> := _b010// 2
    // ( $mux (last_pkt_with_priority == 3 ) p3_valid  p4_valid ) 
    // 3 
    $constant $W[konst_606_wire_constant] : $int<3> := _b011// 3
    // ( $mux check_pkt_4 4   ( $mux pkt_with_priority_valid pkt_with_priority  ( $mux next_to_pkt_with_priority_valid next_to_pkt_with_priority  ( $mux last_pkt_with_priority_valid last_pkt_with_priority  ( $mux active_packet_priority_valid active_packet  0  )  )  )  )  ) 
    // 4 
    $constant $W[konst_616_wire_constant] : $int<3> := _b100// 4
    // ( $mux pkt_with_priority_valid pkt_with_priority  ( $mux next_to_pkt_with_priority_valid next_to_pkt_with_priority  ( $mux last_pkt_with_priority_valid last_pkt_with_priority  ( $mux active_packet_priority_valid active_packet  0  )  )  )  ) 
    // ( $mux next_to_pkt_with_priority_valid next_to_pkt_with_priority  ( $mux last_pkt_with_priority_valid last_pkt_with_priority  ( $mux active_packet_priority_valid active_packet  0  )  )  ) 
    // ( $mux last_pkt_with_priority_valid last_pkt_with_priority  ( $mux active_packet_priority_valid active_packet  0  )  ) 
    // ( $mux active_packet_priority_valid active_packet  0  ) 
    // 0 
    $constant $W[konst_625_wire_constant] : $int<3> := _b000// 0
    // ( $mux d0 selected_packet  active_packet ) 
    // ( $mux (next_active_packet == 1 ) 2   ( $mux (next_active_packet == 2 ) 3   ( $mux (next_active_packet == 3 ) 4   1  )  )  ) 
    // 1 
    $constant $W[konst_640_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_642_wire_constant] : $int<3> := _b010// 2
    // ( $mux (next_active_packet == 2 ) 3   ( $mux (next_active_packet == 3 ) 4   1  )  ) 
    // 2 
    $constant $W[konst_644_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_646_wire_constant] : $int<3> := _b011// 3
    // ( $mux (next_active_packet == 3 ) 4   1  ) 
    // 3 
    $constant $W[konst_648_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_650_wire_constant] : $int<3> := _b100// 4
    // 1 
    $constant $W[konst_651_wire_constant] : $int<3> := _b001// 1
    // 	d0 := (down_counter == 0 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 217
    // d0
    $W[d0_496] : $int<1>
    // 	check_pkt_4 := ((d0 & (active_packet == 0 )) & p4_valid) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 218
    // (active_packet == 0 )
    $intermediate $W[EQ_u3_u1_501_wire] : $int<1>
    // (d0 & (active_packet == 0 ))
    $intermediate $W[AND_u1_u1_502_wire] : $int<1>
    // check_pkt_4
    $W[check_pkt_4_505] : $int<1>
    // 	$volatile pkt_with_priority_valid := ( $mux (pkt_with_priority == 1 ) p1_valid  ( $mux (pkt_with_priority == 2 ) p2_valid  ( $mux (pkt_with_priority == 3 ) p3_valid  p4_valid )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 219
    // (pkt_with_priority == 1 )
    $intermediate $W[EQ_u3_u1_509_wire] : $int<1>
    // (pkt_with_priority == 2 )
    $intermediate $W[EQ_u3_u1_513_wire] : $int<1>
    // (pkt_with_priority == 3 )
    $intermediate $W[EQ_u3_u1_517_wire] : $int<1>
    // ( $mux (pkt_with_priority == 3 ) p3_valid  p4_valid ) 
    $intermediate $W[MUX_520_wire] : $int<1>
    // ( $mux (pkt_with_priority == 2 ) p2_valid  ( $mux (pkt_with_priority == 3 ) p3_valid  p4_valid )  ) 
    $intermediate $W[MUX_521_wire] : $int<1>
    // pkt_with_priority_valid
    $W[pkt_with_priority_valid_523] : $int<1>
    // 	$volatile active_packet_priority_valid := ( $mux (active_packet == 1 ) p1_valid  ( $mux (active_packet == 2 ) p2_valid  ( $mux (active_packet == 3 ) p3_valid  p4_valid )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 220
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_527_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_531_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_535_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  p4_valid ) 
    $intermediate $W[MUX_538_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  ( $mux (active_packet == 3 ) p3_valid  p4_valid )  ) 
    $intermediate $W[MUX_539_wire] : $int<1>
    // active_packet_priority_valid
    $W[active_packet_priority_valid_541] : $int<1>
    // 	$volatile next_to_pkt_with_priority := ( $mux (pkt_with_priority == 1 ) 2   ( $mux (pkt_with_priority == 2 ) 3   ( $mux (pkt_with_priority == 3 ) 4   1  )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 221
    // (pkt_with_priority == 1 )
    $intermediate $W[EQ_u3_u1_545_wire] : $int<1>
    // (pkt_with_priority == 2 )
    $intermediate $W[EQ_u3_u1_549_wire] : $int<1>
    // (pkt_with_priority == 3 )
    $intermediate $W[EQ_u3_u1_553_wire] : $int<1>
    // ( $mux (pkt_with_priority == 3 ) 4   1  ) 
    $intermediate $W[MUX_556_wire] : $int<3>
    // ( $mux (pkt_with_priority == 2 ) 3   ( $mux (pkt_with_priority == 3 ) 4   1  )  ) 
    $intermediate $W[MUX_557_wire] : $int<3>
    // next_to_pkt_with_priority
    $W[next_to_pkt_with_priority_559] : $int<3>
    // 	$volatile next_to_pkt_with_priority_valid := ( $mux (next_to_pkt_with_priority == 1 ) p1_valid  ( $mux (next_to_pkt_with_priority == 2 ) p2_valid  ( $mux (next_to_pkt_with_priority == 3 ) p3_valid  p4_valid )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 222
    // (next_to_pkt_with_priority == 1 )
    $intermediate $W[EQ_u3_u1_563_wire] : $int<1>
    // (next_to_pkt_with_priority == 2 )
    $intermediate $W[EQ_u3_u1_567_wire] : $int<1>
    // (next_to_pkt_with_priority == 3 )
    $intermediate $W[EQ_u3_u1_571_wire] : $int<1>
    // ( $mux (next_to_pkt_with_priority == 3 ) p3_valid  p4_valid ) 
    $intermediate $W[MUX_574_wire] : $int<1>
    // ( $mux (next_to_pkt_with_priority == 2 ) p2_valid  ( $mux (next_to_pkt_with_priority == 3 ) p3_valid  p4_valid )  ) 
    $intermediate $W[MUX_575_wire] : $int<1>
    // next_to_pkt_with_priority_valid
    $W[next_to_pkt_with_priority_valid_577] : $int<1>
    // 	$volatile last_pkt_with_priority := ( $mux (next_to_pkt_with_priority == 1 ) 2   ( $mux (next_to_pkt_with_priority == 2 ) 3   ( $mux (next_to_pkt_with_priority == 3 ) 4   1  )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 223
    // (next_to_pkt_with_priority == 1 )
    $intermediate $W[EQ_u3_u1_581_wire] : $int<1>
    // (next_to_pkt_with_priority == 2 )
    $intermediate $W[EQ_u3_u1_585_wire] : $int<1>
    // (next_to_pkt_with_priority == 3 )
    $intermediate $W[EQ_u3_u1_589_wire] : $int<1>
    // ( $mux (next_to_pkt_with_priority == 3 ) 4   1  ) 
    $intermediate $W[MUX_592_wire] : $int<3>
    // ( $mux (next_to_pkt_with_priority == 2 ) 3   ( $mux (next_to_pkt_with_priority == 3 ) 4   1  )  ) 
    $intermediate $W[MUX_593_wire] : $int<3>
    // last_pkt_with_priority
    $W[last_pkt_with_priority_595] : $int<3>
    // 	$volatile last_pkt_with_priority_valid := ( $mux (last_pkt_with_priority == 1 ) p1_valid  ( $mux (last_pkt_with_priority == 2 ) p2_valid  ( $mux (last_pkt_with_priority == 3 ) p3_valid  p4_valid )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 224
    // (last_pkt_with_priority == 1 )
    $intermediate $W[EQ_u3_u1_599_wire] : $int<1>
    // (last_pkt_with_priority == 2 )
    $intermediate $W[EQ_u3_u1_603_wire] : $int<1>
    // (last_pkt_with_priority == 3 )
    $intermediate $W[EQ_u3_u1_607_wire] : $int<1>
    // ( $mux (last_pkt_with_priority == 3 ) p3_valid  p4_valid ) 
    $intermediate $W[MUX_610_wire] : $int<1>
    // ( $mux (last_pkt_with_priority == 2 ) p2_valid  ( $mux (last_pkt_with_priority == 3 ) p3_valid  p4_valid )  ) 
    $intermediate $W[MUX_611_wire] : $int<1>
    // last_pkt_with_priority_valid
    $W[last_pkt_with_priority_valid_613] : $int<1>
    // 	$volatile selected_packet := ( $mux check_pkt_4 4   ( $mux pkt_with_priority_valid pkt_with_priority  ( $mux next_to_pkt_with_priority_valid next_to_pkt_with_priority  ( $mux last_pkt_with_priority_valid last_pkt_with_priority  ( $mux active_packet_priority_valid active_packet  0  )  )  )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 225
    // ( $mux active_packet_priority_valid active_packet  0  ) 
    $intermediate $W[MUX_626_wire] : $int<3>
    // ( $mux last_pkt_with_priority_valid last_pkt_with_priority  ( $mux active_packet_priority_valid active_packet  0  )  ) 
    $intermediate $W[MUX_627_wire] : $int<3>
    // ( $mux next_to_pkt_with_priority_valid next_to_pkt_with_priority  ( $mux last_pkt_with_priority_valid last_pkt_with_priority  ( $mux active_packet_priority_valid active_packet  0  )  )  ) 
    $intermediate $W[MUX_628_wire] : $int<3>
    // ( $mux pkt_with_priority_valid pkt_with_priority  ( $mux next_to_pkt_with_priority_valid next_to_pkt_with_priority  ( $mux last_pkt_with_priority_valid last_pkt_with_priority  ( $mux active_packet_priority_valid active_packet  0  )  )  )  ) 
    $intermediate $W[MUX_629_wire] : $int<3>
    // selected_packet
    $W[selected_packet_631] : $int<3>
    // 	next_active_packet := ( $mux d0 selected_packet  active_packet )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 226
    // next_active_packet
    // 	next_pkt_with_priority := ( $mux (next_active_packet == 1 ) 2   ( $mux (next_active_packet == 2 ) 3   ( $mux (next_active_packet == 3 ) 4   1  )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 227
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_641_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_645_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_649_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) 4   1  ) 
    $intermediate $W[MUX_652_wire] : $int<3>
    // ( $mux (next_active_packet == 2 ) 3   ( $mux (next_active_packet == 3 ) 4   1  )  ) 
    $intermediate $W[MUX_653_wire] : $int<3>
    // next_pkt_with_priority
    // 	d0 := (down_counter == 0 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 217
    // (down_counter == 0 )
    ==[EQ_u16_u1_495_inst] (down_counter konst_494_wire_constant) (d0_496)   
    $buffering  $out EQ_u16_u1_495_inst d0_496 1
    $delay EQ_u16_u1_495_inst 1
    // 	check_pkt_4 := ((d0 & (active_packet == 0 )) & p4_valid) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 218
    // (active_packet == 0 )
    ==[EQ_u3_u1_501_inst] (active_packet konst_500_wire_constant) (EQ_u3_u1_501_wire)   $flowthrough 
    $delay EQ_u3_u1_501_inst 0
    // (d0 & (active_packet == 0 ))
    &[AND_u1_u1_502_inst] (d0_496 EQ_u3_u1_501_wire) (AND_u1_u1_502_wire)   $flowthrough 
    $delay AND_u1_u1_502_inst 0
    // ((d0 & (active_packet == 0 )) & p4_valid)
    &[AND_u1_u1_504_inst] (AND_u1_u1_502_wire p4_valid) (check_pkt_4_505)   
    $buffering  $out AND_u1_u1_504_inst check_pkt_4_505 1
    $delay AND_u1_u1_504_inst 1
    // 	$volatile pkt_with_priority_valid := ( $mux (pkt_with_priority == 1 ) p1_valid  ( $mux (pkt_with_priority == 2 ) p2_valid  ( $mux (pkt_with_priority == 3 ) p3_valid  p4_valid )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 219
    // (pkt_with_priority == 1 )
    ==[EQ_u3_u1_509_inst] (pkt_with_priority konst_508_wire_constant) (EQ_u3_u1_509_wire)   $flowthrough 
    $delay EQ_u3_u1_509_inst 0
    // (pkt_with_priority == 2 )
    ==[EQ_u3_u1_513_inst] (pkt_with_priority konst_512_wire_constant) (EQ_u3_u1_513_wire)   $flowthrough 
    $delay EQ_u3_u1_513_inst 0
    // (pkt_with_priority == 3 )
    ==[EQ_u3_u1_517_inst] (pkt_with_priority konst_516_wire_constant) (EQ_u3_u1_517_wire)   $flowthrough 
    $delay EQ_u3_u1_517_inst 0
    // ( $mux (pkt_with_priority == 3 ) p3_valid  p4_valid ) 
    ? [MUX_520_inst] (EQ_u3_u1_517_wire p3_valid p4_valid) (MUX_520_wire)  $flowthrough
    // ( $mux (pkt_with_priority == 2 ) p2_valid  ( $mux (pkt_with_priority == 3 ) p3_valid  p4_valid )  ) 
    ? [MUX_521_inst] (EQ_u3_u1_513_wire p2_valid MUX_520_wire) (MUX_521_wire)  $flowthrough
    // ( $mux (pkt_with_priority == 1 ) p1_valid  ( $mux (pkt_with_priority == 2 ) p2_valid  ( $mux (pkt_with_priority == 3 ) p3_valid  p4_valid )  )  ) 
    ? [MUX_522_inst] (EQ_u3_u1_509_wire p1_valid MUX_521_wire) (pkt_with_priority_valid_523)  $flowthrough
    // 	$volatile active_packet_priority_valid := ( $mux (active_packet == 1 ) p1_valid  ( $mux (active_packet == 2 ) p2_valid  ( $mux (active_packet == 3 ) p3_valid  p4_valid )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 220
    // (active_packet == 1 )
    ==[EQ_u3_u1_527_inst] (active_packet konst_526_wire_constant) (EQ_u3_u1_527_wire)   $flowthrough 
    $delay EQ_u3_u1_527_inst 0
    // (active_packet == 2 )
    ==[EQ_u3_u1_531_inst] (active_packet konst_530_wire_constant) (EQ_u3_u1_531_wire)   $flowthrough 
    $delay EQ_u3_u1_531_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_535_inst] (active_packet konst_534_wire_constant) (EQ_u3_u1_535_wire)   $flowthrough 
    $delay EQ_u3_u1_535_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  p4_valid ) 
    ? [MUX_538_inst] (EQ_u3_u1_535_wire p3_valid p4_valid) (MUX_538_wire)  $flowthrough
    // ( $mux (active_packet == 2 ) p2_valid  ( $mux (active_packet == 3 ) p3_valid  p4_valid )  ) 
    ? [MUX_539_inst] (EQ_u3_u1_531_wire p2_valid MUX_538_wire) (MUX_539_wire)  $flowthrough
    // ( $mux (active_packet == 1 ) p1_valid  ( $mux (active_packet == 2 ) p2_valid  ( $mux (active_packet == 3 ) p3_valid  p4_valid )  )  ) 
    ? [MUX_540_inst] (EQ_u3_u1_527_wire p1_valid MUX_539_wire) (active_packet_priority_valid_541)  $flowthrough
    // 	$volatile next_to_pkt_with_priority := ( $mux (pkt_with_priority == 1 ) 2   ( $mux (pkt_with_priority == 2 ) 3   ( $mux (pkt_with_priority == 3 ) 4   1  )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 221
    // (pkt_with_priority == 1 )
    ==[EQ_u3_u1_545_inst] (pkt_with_priority konst_544_wire_constant) (EQ_u3_u1_545_wire)   $flowthrough 
    $delay EQ_u3_u1_545_inst 0
    // (pkt_with_priority == 2 )
    ==[EQ_u3_u1_549_inst] (pkt_with_priority konst_548_wire_constant) (EQ_u3_u1_549_wire)   $flowthrough 
    $delay EQ_u3_u1_549_inst 0
    // (pkt_with_priority == 3 )
    ==[EQ_u3_u1_553_inst] (pkt_with_priority konst_552_wire_constant) (EQ_u3_u1_553_wire)   $flowthrough 
    $delay EQ_u3_u1_553_inst 0
    // ( $mux (pkt_with_priority == 3 ) 4   1  ) 
    ? [MUX_556_inst] (EQ_u3_u1_553_wire konst_554_wire_constant konst_555_wire_constant) (MUX_556_wire)  $flowthrough
    // ( $mux (pkt_with_priority == 2 ) 3   ( $mux (pkt_with_priority == 3 ) 4   1  )  ) 
    ? [MUX_557_inst] (EQ_u3_u1_549_wire konst_550_wire_constant MUX_556_wire) (MUX_557_wire)  $flowthrough
    // ( $mux (pkt_with_priority == 1 ) 2   ( $mux (pkt_with_priority == 2 ) 3   ( $mux (pkt_with_priority == 3 ) 4   1  )  )  ) 
    ? [MUX_558_inst] (EQ_u3_u1_545_wire konst_546_wire_constant MUX_557_wire) (next_to_pkt_with_priority_559)  $flowthrough
    // 	$volatile next_to_pkt_with_priority_valid := ( $mux (next_to_pkt_with_priority == 1 ) p1_valid  ( $mux (next_to_pkt_with_priority == 2 ) p2_valid  ( $mux (next_to_pkt_with_priority == 3 ) p3_valid  p4_valid )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 222
    // (next_to_pkt_with_priority == 1 )
    ==[EQ_u3_u1_563_inst] (next_to_pkt_with_priority_559 konst_562_wire_constant) (EQ_u3_u1_563_wire)   $flowthrough 
    $delay EQ_u3_u1_563_inst 0
    // (next_to_pkt_with_priority == 2 )
    ==[EQ_u3_u1_567_inst] (next_to_pkt_with_priority_559 konst_566_wire_constant) (EQ_u3_u1_567_wire)   $flowthrough 
    $delay EQ_u3_u1_567_inst 0
    // (next_to_pkt_with_priority == 3 )
    ==[EQ_u3_u1_571_inst] (next_to_pkt_with_priority_559 konst_570_wire_constant) (EQ_u3_u1_571_wire)   $flowthrough 
    $delay EQ_u3_u1_571_inst 0
    // ( $mux (next_to_pkt_with_priority == 3 ) p3_valid  p4_valid ) 
    ? [MUX_574_inst] (EQ_u3_u1_571_wire p3_valid p4_valid) (MUX_574_wire)  $flowthrough
    // ( $mux (next_to_pkt_with_priority == 2 ) p2_valid  ( $mux (next_to_pkt_with_priority == 3 ) p3_valid  p4_valid )  ) 
    ? [MUX_575_inst] (EQ_u3_u1_567_wire p2_valid MUX_574_wire) (MUX_575_wire)  $flowthrough
    // ( $mux (next_to_pkt_with_priority == 1 ) p1_valid  ( $mux (next_to_pkt_with_priority == 2 ) p2_valid  ( $mux (next_to_pkt_with_priority == 3 ) p3_valid  p4_valid )  )  ) 
    ? [MUX_576_inst] (EQ_u3_u1_563_wire p1_valid MUX_575_wire) (next_to_pkt_with_priority_valid_577)  $flowthrough
    // 	$volatile last_pkt_with_priority := ( $mux (next_to_pkt_with_priority == 1 ) 2   ( $mux (next_to_pkt_with_priority == 2 ) 3   ( $mux (next_to_pkt_with_priority == 3 ) 4   1  )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 223
    // (next_to_pkt_with_priority == 1 )
    ==[EQ_u3_u1_581_inst] (next_to_pkt_with_priority_559 konst_580_wire_constant) (EQ_u3_u1_581_wire)   $flowthrough 
    $delay EQ_u3_u1_581_inst 0
    // (next_to_pkt_with_priority == 2 )
    ==[EQ_u3_u1_585_inst] (next_to_pkt_with_priority_559 konst_584_wire_constant) (EQ_u3_u1_585_wire)   $flowthrough 
    $delay EQ_u3_u1_585_inst 0
    // (next_to_pkt_with_priority == 3 )
    ==[EQ_u3_u1_589_inst] (next_to_pkt_with_priority_559 konst_588_wire_constant) (EQ_u3_u1_589_wire)   $flowthrough 
    $delay EQ_u3_u1_589_inst 0
    // ( $mux (next_to_pkt_with_priority == 3 ) 4   1  ) 
    ? [MUX_592_inst] (EQ_u3_u1_589_wire konst_590_wire_constant konst_591_wire_constant) (MUX_592_wire)  $flowthrough
    // ( $mux (next_to_pkt_with_priority == 2 ) 3   ( $mux (next_to_pkt_with_priority == 3 ) 4   1  )  ) 
    ? [MUX_593_inst] (EQ_u3_u1_585_wire konst_586_wire_constant MUX_592_wire) (MUX_593_wire)  $flowthrough
    // ( $mux (next_to_pkt_with_priority == 1 ) 2   ( $mux (next_to_pkt_with_priority == 2 ) 3   ( $mux (next_to_pkt_with_priority == 3 ) 4   1  )  )  ) 
    ? [MUX_594_inst] (EQ_u3_u1_581_wire konst_582_wire_constant MUX_593_wire) (last_pkt_with_priority_595)  $flowthrough
    // 	$volatile last_pkt_with_priority_valid := ( $mux (last_pkt_with_priority == 1 ) p1_valid  ( $mux (last_pkt_with_priority == 2 ) p2_valid  ( $mux (last_pkt_with_priority == 3 ) p3_valid  p4_valid )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 224
    // (last_pkt_with_priority == 1 )
    ==[EQ_u3_u1_599_inst] (last_pkt_with_priority_595 konst_598_wire_constant) (EQ_u3_u1_599_wire)   $flowthrough 
    $delay EQ_u3_u1_599_inst 0
    // (last_pkt_with_priority == 2 )
    ==[EQ_u3_u1_603_inst] (last_pkt_with_priority_595 konst_602_wire_constant) (EQ_u3_u1_603_wire)   $flowthrough 
    $delay EQ_u3_u1_603_inst 0
    // (last_pkt_with_priority == 3 )
    ==[EQ_u3_u1_607_inst] (last_pkt_with_priority_595 konst_606_wire_constant) (EQ_u3_u1_607_wire)   $flowthrough 
    $delay EQ_u3_u1_607_inst 0
    // ( $mux (last_pkt_with_priority == 3 ) p3_valid  p4_valid ) 
    ? [MUX_610_inst] (EQ_u3_u1_607_wire p3_valid p4_valid) (MUX_610_wire)  $flowthrough
    // ( $mux (last_pkt_with_priority == 2 ) p2_valid  ( $mux (last_pkt_with_priority == 3 ) p3_valid  p4_valid )  ) 
    ? [MUX_611_inst] (EQ_u3_u1_603_wire p2_valid MUX_610_wire) (MUX_611_wire)  $flowthrough
    // ( $mux (last_pkt_with_priority == 1 ) p1_valid  ( $mux (last_pkt_with_priority == 2 ) p2_valid  ( $mux (last_pkt_with_priority == 3 ) p3_valid  p4_valid )  )  ) 
    ? [MUX_612_inst] (EQ_u3_u1_599_wire p1_valid MUX_611_wire) (last_pkt_with_priority_valid_613)  $flowthrough
    // 	$volatile selected_packet := ( $mux check_pkt_4 4   ( $mux pkt_with_priority_valid pkt_with_priority  ( $mux next_to_pkt_with_priority_valid next_to_pkt_with_priority  ( $mux last_pkt_with_priority_valid last_pkt_with_priority  ( $mux active_packet_priority_valid active_packet  0  )  )  )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 225
    // ( $mux active_packet_priority_valid active_packet  0  ) 
    ? [MUX_626_inst] (active_packet_priority_valid_541 active_packet konst_625_wire_constant) (MUX_626_wire)  $flowthrough
    // ( $mux last_pkt_with_priority_valid last_pkt_with_priority  ( $mux active_packet_priority_valid active_packet  0  )  ) 
    ? [MUX_627_inst] (last_pkt_with_priority_valid_613 last_pkt_with_priority_595 MUX_626_wire) (MUX_627_wire)  $flowthrough
    // ( $mux next_to_pkt_with_priority_valid next_to_pkt_with_priority  ( $mux last_pkt_with_priority_valid last_pkt_with_priority  ( $mux active_packet_priority_valid active_packet  0  )  )  ) 
    ? [MUX_628_inst] (next_to_pkt_with_priority_valid_577 next_to_pkt_with_priority_559 MUX_627_wire) (MUX_628_wire)  $flowthrough
    // ( $mux pkt_with_priority_valid pkt_with_priority  ( $mux next_to_pkt_with_priority_valid next_to_pkt_with_priority  ( $mux last_pkt_with_priority_valid last_pkt_with_priority  ( $mux active_packet_priority_valid active_packet  0  )  )  )  ) 
    ? [MUX_629_inst] (pkt_with_priority_valid_523 pkt_with_priority MUX_628_wire) (MUX_629_wire)  $flowthrough
    // ( $mux check_pkt_4 4   ( $mux pkt_with_priority_valid pkt_with_priority  ( $mux next_to_pkt_with_priority_valid next_to_pkt_with_priority  ( $mux last_pkt_with_priority_valid last_pkt_with_priority  ( $mux active_packet_priority_valid active_packet  0  )  )  )  )  ) 
    ? [MUX_630_inst] (check_pkt_4_505 konst_616_wire_constant MUX_629_wire) (selected_packet_631)  $flowthrough
    // 	next_active_packet := ( $mux d0 selected_packet  active_packet )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 226
    // ( $mux d0 selected_packet  active_packet ) 
    ? [MUX_636_inst] (d0_496 selected_packet_631 active_packet) (next_active_packet) 
    $buffering  $out MUX_636_inst next_active_packet 1
    // 	next_pkt_with_priority := ( $mux (next_active_packet == 1 ) 2   ( $mux (next_active_packet == 2 ) 3   ( $mux (next_active_packet == 3 ) 4   1  )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 227
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_641_inst] (next_active_packet konst_640_wire_constant) (EQ_u3_u1_641_wire)   $flowthrough 
    $delay EQ_u3_u1_641_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_645_inst] (next_active_packet konst_644_wire_constant) (EQ_u3_u1_645_wire)   $flowthrough 
    $delay EQ_u3_u1_645_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_649_inst] (next_active_packet konst_648_wire_constant) (EQ_u3_u1_649_wire)   $flowthrough 
    $delay EQ_u3_u1_649_inst 0
    // ( $mux (next_active_packet == 3 ) 4   1  ) 
    ? [MUX_652_inst] (EQ_u3_u1_649_wire konst_650_wire_constant konst_651_wire_constant) (MUX_652_wire)  $flowthrough
    // ( $mux (next_active_packet == 2 ) 3   ( $mux (next_active_packet == 3 ) 4   1  )  ) 
    ? [MUX_653_inst] (EQ_u3_u1_645_wire konst_646_wire_constant MUX_652_wire) (MUX_653_wire)  $flowthrough
    // ( $mux (next_active_packet == 1 ) 2   ( $mux (next_active_packet == 2 ) 3   ( $mux (next_active_packet == 3 ) 4   1  )  )  ) 
    ? [MUX_654_inst] (EQ_u3_u1_641_wire konst_642_wire_constant MUX_653_wire) (next_pkt_with_priority) 
    $buffering  $out MUX_654_inst next_pkt_with_priority 1
  }
  // end data-path
  // Volatile module.. no links.
}
$module [outputPort_1_Daemon] 
{
  // pipe-declarations for block %outputPort_1_Daemon
  //  file .Aa/switch4x4.opt.aa, line 229
  // pipe-declarations for block %outputPort_1_Daemon%loop
  //  file .Aa/switch4x4.opt.aa, line 234
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_658] // Branch Block  file .Aa/switch4x4.opt.aa, line 234
    {
      $P [branch_block_stmt_658__entry__]
      branch_block_stmt_658__entry__ <-| ($entry)
      $P [branch_block_stmt_658__exit__]
      branch_block_stmt_658__exit__ |-> ($exit)
      $P [do_while_stmt_659__entry__] 
      $P [do_while_stmt_659__exit__] 
      // do-while-statement  
      //  file .Aa/switch4x4.opt.aa, line 236
      <o> [do_while_stmt_659]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_659__entry__] 
        $P[do_while_stmt_659__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_659_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_661
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_661_sample_start_] 
          $T[phi_stmt_661_sample_completed_] 
          $T[phi_stmt_661_update_start_] 
          $T[phi_stmt_661_update_completed_] 
          $T[phi_stmt_661_sample_start__ps] 
          phi_stmt_661_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_661_sample_completed__ps] 
          phi_stmt_661_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_661_update_start__ps] 
          phi_stmt_661_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_661_update_completed__ps] 
          phi_stmt_661_update_completed_ <-& (phi_stmt_661_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_661_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_661_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_661_update_start_)
          $T[phi_stmt_661_loopback_trigger] 
          phi_stmt_661_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_661_loopback_sample_req] 
          $T[phi_stmt_661_loopback_sample_req_ps] 
          phi_stmt_661_loopback_sample_req <-& (phi_stmt_661_loopback_sample_req_ps)
          phi_stmt_661_loopback_sample_req &-> ($null)
          $T[phi_stmt_661_entry_trigger] 
          phi_stmt_661_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_661_entry_sample_req] 
          $T[phi_stmt_661_entry_sample_req_ps] 
          phi_stmt_661_entry_sample_req <-& (phi_stmt_661_entry_sample_req_ps)
          phi_stmt_661_entry_sample_req &-> ($null)
          phi_stmt_661_update_start_ o<-& (phi_stmt_661_update_completed_ 0)
          phi_stmt_661_sample_start_ o<-& (phi_stmt_661_sample_completed_ 1)
          $T[phi_stmt_661_merged_reqs] 
          $T[phi_stmt_661_phi_mux_ack] 
          $T[phi_stmt_661_phi_mux_ack_ps] 
          phi_stmt_661_phi_mux_ack_ps <-& (phi_stmt_661_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_661_update_completed_)
          $T[R_ZERO_33_663_sample_start__ps] 
          $T[R_ZERO_33_663_sample_completed__ps] 
          $T[R_ZERO_33_663_update_start__ps] 
          $T[R_ZERO_33_663_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_663_sample_start_] 
          $T[R_ZERO_33_663_sample_completed_] 
          R_ZERO_33_663_sample_completed_ <-& (R_ZERO_33_663_sample_start_)
          $T[R_ZERO_33_663_update_start_] 
          $T [R_ZERO_33_663_update_completed_] $delay 
          R_ZERO_33_663_update_completed_ <-& (R_ZERO_33_663_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_663_sample_start_ <-& (R_ZERO_33_663_sample_start__ps)
          R_ZERO_33_663_update_start_ <-& (R_ZERO_33_663_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_663_sample_completed__ps <-& (R_ZERO_33_663_sample_completed_)
          R_ZERO_33_663_update_completed__ps <-& (R_ZERO_33_663_update_completed_)
          $T[RPIPE_noblock_obuf_1_1_665_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_1_665_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_1_665_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_1_665_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_1
          $T[RPIPE_noblock_obuf_1_1_665_sample_start_] 
          $T[RPIPE_noblock_obuf_1_1_665_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_1_665_update_start_] 
          $T[RPIPE_noblock_obuf_1_1_665_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_1_665 with guard R_read_from_1_664
          // root phi_stmt_661 not in visited_elements
          // root phi_stmt_666 not in visited_elements
          // root phi_stmt_671 not in visited_elements
          // root phi_stmt_676 not in visited_elements
          // root phi_stmt_681 not in visited_elements
          // root phi_stmt_685 not in visited_elements
          // root phi_stmt_689 not in visited_elements
          // RAW reenables for read_from_1
          ;;[RPIPE_noblock_obuf_1_1_665_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_1_665_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_1_665_sample_start_ &-> (RPIPE_noblock_obuf_1_1_665_Sample)
          RPIPE_noblock_obuf_1_1_665_sample_completed_ <-& (RPIPE_noblock_obuf_1_1_665_Sample)
          RPIPE_noblock_obuf_1_1_665_update_start_ <-& (RPIPE_noblock_obuf_1_1_665_sample_completed_)
          RPIPE_noblock_obuf_1_1_665_update_start_ &-> (RPIPE_noblock_obuf_1_1_665_Update)
          RPIPE_noblock_obuf_1_1_665_update_completed_ <-& (RPIPE_noblock_obuf_1_1_665_Update)
          RPIPE_noblock_obuf_1_1_665_sample_start_ o<-& (RPIPE_noblock_obuf_1_1_665_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_1_665_sample_start_ <-& (RPIPE_noblock_obuf_1_1_665_sample_start__ps)
          RPIPE_noblock_obuf_1_1_665_update_start_ <-& (RPIPE_noblock_obuf_1_1_665_update_start__ps)
          // RAW reenables for noblock_obuf_1_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_1_665_sample_completed__ps <-& (RPIPE_noblock_obuf_1_1_665_sample_completed_)
          RPIPE_noblock_obuf_1_1_665_update_completed__ps <-& (RPIPE_noblock_obuf_1_1_665_update_completed_)
          $phisequencer [ phi_stmt_661_phi_seq] : 
          phi_stmt_661_entry_trigger R_ZERO_33_663_sample_start__ps R_ZERO_33_663_sample_completed__ps R_ZERO_33_663_update_start__ps R_ZERO_33_663_update_completed__ps phi_stmt_661_loopback_trigger RPIPE_noblock_obuf_1_1_665_sample_start__ps RPIPE_noblock_obuf_1_1_665_sample_completed__ps RPIPE_noblock_obuf_1_1_665_update_start__ps RPIPE_noblock_obuf_1_1_665_update_completed__ps :
          phi_stmt_661_sample_start__ps phi_stmt_661_sample_completed__ps phi_stmt_661_update_start__ps phi_stmt_661_update_completed__ps :
          phi_stmt_661_entry_sample_req_ps phi_stmt_661_loopback_sample_req_ps : 
          phi_stmt_661_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_661
          // start:  PHI statement phi_stmt_666
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_666_sample_start_] 
          $T[phi_stmt_666_sample_completed_] 
          $T[phi_stmt_666_update_start_] 
          $T[phi_stmt_666_update_completed_] 
          $T[phi_stmt_666_sample_start__ps] 
          phi_stmt_666_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_666_sample_completed__ps] 
          phi_stmt_666_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_666_update_start__ps] 
          phi_stmt_666_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_666_update_completed__ps] 
          phi_stmt_666_update_completed_ <-& (phi_stmt_666_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_666_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_666_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_666_update_start_)
          $T[phi_stmt_666_loopback_trigger] 
          phi_stmt_666_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_666_loopback_sample_req] 
          $T[phi_stmt_666_loopback_sample_req_ps] 
          phi_stmt_666_loopback_sample_req <-& (phi_stmt_666_loopback_sample_req_ps)
          phi_stmt_666_loopback_sample_req &-> ($null)
          $T[phi_stmt_666_entry_trigger] 
          phi_stmt_666_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_666_entry_sample_req] 
          $T[phi_stmt_666_entry_sample_req_ps] 
          phi_stmt_666_entry_sample_req <-& (phi_stmt_666_entry_sample_req_ps)
          phi_stmt_666_entry_sample_req &-> ($null)
          phi_stmt_666_update_start_ o<-& (phi_stmt_666_update_completed_ 0)
          phi_stmt_666_sample_start_ o<-& (phi_stmt_666_sample_completed_ 1)
          $T[phi_stmt_666_merged_reqs] 
          $T[phi_stmt_666_phi_mux_ack] 
          $T[phi_stmt_666_phi_mux_ack_ps] 
          phi_stmt_666_phi_mux_ack_ps <-& (phi_stmt_666_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_666_update_completed_)
          $T[R_ZERO_33_668_sample_start__ps] 
          $T[R_ZERO_33_668_sample_completed__ps] 
          $T[R_ZERO_33_668_update_start__ps] 
          $T[R_ZERO_33_668_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_668_sample_start_] 
          $T[R_ZERO_33_668_sample_completed_] 
          R_ZERO_33_668_sample_completed_ <-& (R_ZERO_33_668_sample_start_)
          $T[R_ZERO_33_668_update_start_] 
          $T [R_ZERO_33_668_update_completed_] $delay 
          R_ZERO_33_668_update_completed_ <-& (R_ZERO_33_668_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_668_sample_start_ <-& (R_ZERO_33_668_sample_start__ps)
          R_ZERO_33_668_update_start_ <-& (R_ZERO_33_668_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_668_sample_completed__ps <-& (R_ZERO_33_668_sample_completed_)
          R_ZERO_33_668_update_completed__ps <-& (R_ZERO_33_668_update_completed_)
          $T[RPIPE_noblock_obuf_2_1_670_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_1_670_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_1_670_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_1_670_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_1
          $T[RPIPE_noblock_obuf_2_1_670_sample_start_] 
          $T[RPIPE_noblock_obuf_2_1_670_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_1_670_update_start_] 
          $T[RPIPE_noblock_obuf_2_1_670_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_1_670 with guard R_read_from_2_669
          // root phi_stmt_666 not in visited_elements
          // root phi_stmt_671 not in visited_elements
          // root phi_stmt_676 not in visited_elements
          // root phi_stmt_681 not in visited_elements
          // root phi_stmt_685 not in visited_elements
          // root phi_stmt_689 not in visited_elements
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_1_670_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_1_670_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_1_670_sample_start_ &-> (RPIPE_noblock_obuf_2_1_670_Sample)
          RPIPE_noblock_obuf_2_1_670_sample_completed_ <-& (RPIPE_noblock_obuf_2_1_670_Sample)
          RPIPE_noblock_obuf_2_1_670_update_start_ <-& (RPIPE_noblock_obuf_2_1_670_sample_completed_)
          RPIPE_noblock_obuf_2_1_670_update_start_ &-> (RPIPE_noblock_obuf_2_1_670_Update)
          RPIPE_noblock_obuf_2_1_670_update_completed_ <-& (RPIPE_noblock_obuf_2_1_670_Update)
          RPIPE_noblock_obuf_2_1_670_sample_start_ o<-& (RPIPE_noblock_obuf_2_1_670_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_1_670_sample_start_ <-& (RPIPE_noblock_obuf_2_1_670_sample_start__ps)
          RPIPE_noblock_obuf_2_1_670_update_start_ <-& (RPIPE_noblock_obuf_2_1_670_update_start__ps)
          // RAW reenables for noblock_obuf_2_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_1_670_sample_completed__ps <-& (RPIPE_noblock_obuf_2_1_670_sample_completed_)
          RPIPE_noblock_obuf_2_1_670_update_completed__ps <-& (RPIPE_noblock_obuf_2_1_670_update_completed_)
          $phisequencer [ phi_stmt_666_phi_seq] : 
          phi_stmt_666_entry_trigger R_ZERO_33_668_sample_start__ps R_ZERO_33_668_sample_completed__ps R_ZERO_33_668_update_start__ps R_ZERO_33_668_update_completed__ps phi_stmt_666_loopback_trigger RPIPE_noblock_obuf_2_1_670_sample_start__ps RPIPE_noblock_obuf_2_1_670_sample_completed__ps RPIPE_noblock_obuf_2_1_670_update_start__ps RPIPE_noblock_obuf_2_1_670_update_completed__ps :
          phi_stmt_666_sample_start__ps phi_stmt_666_sample_completed__ps phi_stmt_666_update_start__ps phi_stmt_666_update_completed__ps :
          phi_stmt_666_entry_sample_req_ps phi_stmt_666_loopback_sample_req_ps : 
          phi_stmt_666_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_666
          // start:  PHI statement phi_stmt_671
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_671_sample_start_] 
          $T[phi_stmt_671_sample_completed_] 
          $T[phi_stmt_671_update_start_] 
          $T[phi_stmt_671_update_completed_] 
          $T[phi_stmt_671_sample_start__ps] 
          phi_stmt_671_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_671_sample_completed__ps] 
          phi_stmt_671_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_671_update_start__ps] 
          phi_stmt_671_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_671_update_completed__ps] 
          phi_stmt_671_update_completed_ <-& (phi_stmt_671_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_671_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_671_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_671_update_start_)
          $T[phi_stmt_671_loopback_trigger] 
          phi_stmt_671_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_671_loopback_sample_req] 
          $T[phi_stmt_671_loopback_sample_req_ps] 
          phi_stmt_671_loopback_sample_req <-& (phi_stmt_671_loopback_sample_req_ps)
          phi_stmt_671_loopback_sample_req &-> ($null)
          $T[phi_stmt_671_entry_trigger] 
          phi_stmt_671_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_671_entry_sample_req] 
          $T[phi_stmt_671_entry_sample_req_ps] 
          phi_stmt_671_entry_sample_req <-& (phi_stmt_671_entry_sample_req_ps)
          phi_stmt_671_entry_sample_req &-> ($null)
          phi_stmt_671_update_start_ o<-& (phi_stmt_671_update_completed_ 0)
          phi_stmt_671_sample_start_ o<-& (phi_stmt_671_sample_completed_ 1)
          $T[phi_stmt_671_merged_reqs] 
          $T[phi_stmt_671_phi_mux_ack] 
          $T[phi_stmt_671_phi_mux_ack_ps] 
          phi_stmt_671_phi_mux_ack_ps <-& (phi_stmt_671_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_671_update_completed_)
          $T[R_ZERO_33_673_sample_start__ps] 
          $T[R_ZERO_33_673_sample_completed__ps] 
          $T[R_ZERO_33_673_update_start__ps] 
          $T[R_ZERO_33_673_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_673_sample_start_] 
          $T[R_ZERO_33_673_sample_completed_] 
          R_ZERO_33_673_sample_completed_ <-& (R_ZERO_33_673_sample_start_)
          $T[R_ZERO_33_673_update_start_] 
          $T [R_ZERO_33_673_update_completed_] $delay 
          R_ZERO_33_673_update_completed_ <-& (R_ZERO_33_673_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_673_sample_start_ <-& (R_ZERO_33_673_sample_start__ps)
          R_ZERO_33_673_update_start_ <-& (R_ZERO_33_673_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_673_sample_completed__ps <-& (R_ZERO_33_673_sample_completed_)
          R_ZERO_33_673_update_completed__ps <-& (R_ZERO_33_673_update_completed_)
          $T[RPIPE_noblock_obuf_3_1_675_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_1_675_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_1_675_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_1_675_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_1
          $T[RPIPE_noblock_obuf_3_1_675_sample_start_] 
          $T[RPIPE_noblock_obuf_3_1_675_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_1_675_update_start_] 
          $T[RPIPE_noblock_obuf_3_1_675_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_1_675 with guard R_read_from_3_674
          // root phi_stmt_671 not in visited_elements
          // root phi_stmt_676 not in visited_elements
          // root phi_stmt_681 not in visited_elements
          // root phi_stmt_685 not in visited_elements
          // root phi_stmt_689 not in visited_elements
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_1_675_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_1_675_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_1_675_sample_start_ &-> (RPIPE_noblock_obuf_3_1_675_Sample)
          RPIPE_noblock_obuf_3_1_675_sample_completed_ <-& (RPIPE_noblock_obuf_3_1_675_Sample)
          RPIPE_noblock_obuf_3_1_675_update_start_ <-& (RPIPE_noblock_obuf_3_1_675_sample_completed_)
          RPIPE_noblock_obuf_3_1_675_update_start_ &-> (RPIPE_noblock_obuf_3_1_675_Update)
          RPIPE_noblock_obuf_3_1_675_update_completed_ <-& (RPIPE_noblock_obuf_3_1_675_Update)
          RPIPE_noblock_obuf_3_1_675_sample_start_ o<-& (RPIPE_noblock_obuf_3_1_675_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_1_675_sample_start_ <-& (RPIPE_noblock_obuf_3_1_675_sample_start__ps)
          RPIPE_noblock_obuf_3_1_675_update_start_ <-& (RPIPE_noblock_obuf_3_1_675_update_start__ps)
          // RAW reenables for noblock_obuf_3_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_1_675_sample_completed__ps <-& (RPIPE_noblock_obuf_3_1_675_sample_completed_)
          RPIPE_noblock_obuf_3_1_675_update_completed__ps <-& (RPIPE_noblock_obuf_3_1_675_update_completed_)
          $phisequencer [ phi_stmt_671_phi_seq] : 
          phi_stmt_671_entry_trigger R_ZERO_33_673_sample_start__ps R_ZERO_33_673_sample_completed__ps R_ZERO_33_673_update_start__ps R_ZERO_33_673_update_completed__ps phi_stmt_671_loopback_trigger RPIPE_noblock_obuf_3_1_675_sample_start__ps RPIPE_noblock_obuf_3_1_675_sample_completed__ps RPIPE_noblock_obuf_3_1_675_update_start__ps RPIPE_noblock_obuf_3_1_675_update_completed__ps :
          phi_stmt_671_sample_start__ps phi_stmt_671_sample_completed__ps phi_stmt_671_update_start__ps phi_stmt_671_update_completed__ps :
          phi_stmt_671_entry_sample_req_ps phi_stmt_671_loopback_sample_req_ps : 
          phi_stmt_671_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_671
          // start:  PHI statement phi_stmt_676
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_676_sample_start_] 
          $T[phi_stmt_676_sample_completed_] 
          $T[phi_stmt_676_update_start_] 
          $T[phi_stmt_676_update_completed_] 
          $T[phi_stmt_676_sample_start__ps] 
          phi_stmt_676_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_676_sample_completed__ps] 
          phi_stmt_676_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_676_update_start__ps] 
          phi_stmt_676_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_676_update_completed__ps] 
          phi_stmt_676_update_completed_ <-& (phi_stmt_676_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_676_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_676_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_676_update_start_)
          $T[phi_stmt_676_loopback_trigger] 
          phi_stmt_676_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_676_loopback_sample_req] 
          $T[phi_stmt_676_loopback_sample_req_ps] 
          phi_stmt_676_loopback_sample_req <-& (phi_stmt_676_loopback_sample_req_ps)
          phi_stmt_676_loopback_sample_req &-> ($null)
          $T[phi_stmt_676_entry_trigger] 
          phi_stmt_676_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_676_entry_sample_req] 
          $T[phi_stmt_676_entry_sample_req_ps] 
          phi_stmt_676_entry_sample_req <-& (phi_stmt_676_entry_sample_req_ps)
          phi_stmt_676_entry_sample_req &-> ($null)
          phi_stmt_676_update_start_ o<-& (phi_stmt_676_update_completed_ 0)
          phi_stmt_676_sample_start_ o<-& (phi_stmt_676_sample_completed_ 1)
          $T[phi_stmt_676_merged_reqs] 
          $T[phi_stmt_676_phi_mux_ack] 
          $T[phi_stmt_676_phi_mux_ack_ps] 
          phi_stmt_676_phi_mux_ack_ps <-& (phi_stmt_676_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_676_update_completed_)
          $T[R_ZERO_33_678_sample_start__ps] 
          $T[R_ZERO_33_678_sample_completed__ps] 
          $T[R_ZERO_33_678_update_start__ps] 
          $T[R_ZERO_33_678_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_678_sample_start_] 
          $T[R_ZERO_33_678_sample_completed_] 
          R_ZERO_33_678_sample_completed_ <-& (R_ZERO_33_678_sample_start_)
          $T[R_ZERO_33_678_update_start_] 
          $T [R_ZERO_33_678_update_completed_] $delay 
          R_ZERO_33_678_update_completed_ <-& (R_ZERO_33_678_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_678_sample_start_ <-& (R_ZERO_33_678_sample_start__ps)
          R_ZERO_33_678_update_start_ <-& (R_ZERO_33_678_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_678_sample_completed__ps <-& (R_ZERO_33_678_sample_completed_)
          R_ZERO_33_678_update_completed__ps <-& (R_ZERO_33_678_update_completed_)
          $T[RPIPE_noblock_obuf_4_1_680_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_1_680_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_1_680_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_1_680_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_1
          $T[RPIPE_noblock_obuf_4_1_680_sample_start_] 
          $T[RPIPE_noblock_obuf_4_1_680_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_1_680_update_start_] 
          $T[RPIPE_noblock_obuf_4_1_680_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_1_680 with guard R_read_from_4_679
          // root phi_stmt_676 not in visited_elements
          // root phi_stmt_681 not in visited_elements
          // root phi_stmt_685 not in visited_elements
          // root phi_stmt_689 not in visited_elements
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_1_680_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_1_680_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_1_680_sample_start_ &-> (RPIPE_noblock_obuf_4_1_680_Sample)
          RPIPE_noblock_obuf_4_1_680_sample_completed_ <-& (RPIPE_noblock_obuf_4_1_680_Sample)
          RPIPE_noblock_obuf_4_1_680_update_start_ <-& (RPIPE_noblock_obuf_4_1_680_sample_completed_)
          RPIPE_noblock_obuf_4_1_680_update_start_ &-> (RPIPE_noblock_obuf_4_1_680_Update)
          RPIPE_noblock_obuf_4_1_680_update_completed_ <-& (RPIPE_noblock_obuf_4_1_680_Update)
          RPIPE_noblock_obuf_4_1_680_sample_start_ o<-& (RPIPE_noblock_obuf_4_1_680_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_1_680_sample_start_ <-& (RPIPE_noblock_obuf_4_1_680_sample_start__ps)
          RPIPE_noblock_obuf_4_1_680_update_start_ <-& (RPIPE_noblock_obuf_4_1_680_update_start__ps)
          // RAW reenables for noblock_obuf_4_1
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_1_680_sample_completed__ps <-& (RPIPE_noblock_obuf_4_1_680_sample_completed_)
          RPIPE_noblock_obuf_4_1_680_update_completed__ps <-& (RPIPE_noblock_obuf_4_1_680_update_completed_)
          $phisequencer [ phi_stmt_676_phi_seq] : 
          phi_stmt_676_entry_trigger R_ZERO_33_678_sample_start__ps R_ZERO_33_678_sample_completed__ps R_ZERO_33_678_update_start__ps R_ZERO_33_678_update_completed__ps phi_stmt_676_loopback_trigger RPIPE_noblock_obuf_4_1_680_sample_start__ps RPIPE_noblock_obuf_4_1_680_sample_completed__ps RPIPE_noblock_obuf_4_1_680_update_start__ps RPIPE_noblock_obuf_4_1_680_update_completed__ps :
          phi_stmt_676_sample_start__ps phi_stmt_676_sample_completed__ps phi_stmt_676_update_start__ps phi_stmt_676_update_completed__ps :
          phi_stmt_676_entry_sample_req_ps phi_stmt_676_loopback_sample_req_ps : 
          phi_stmt_676_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_676
          // start:  PHI statement phi_stmt_681
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_681_sample_start_] 
          $T[phi_stmt_681_sample_completed_] 
          $T[phi_stmt_681_update_start_] 
          $T[phi_stmt_681_update_completed_] 
          $T[phi_stmt_681_sample_start__ps] 
          phi_stmt_681_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_681_sample_completed__ps] 
          phi_stmt_681_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_681_update_start__ps] 
          phi_stmt_681_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_681_update_completed__ps] 
          phi_stmt_681_update_completed_ <-& (phi_stmt_681_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_681_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_681_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_681_update_start_)
          $T[phi_stmt_681_loopback_trigger] 
          phi_stmt_681_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_681_loopback_sample_req] 
          $T[phi_stmt_681_loopback_sample_req_ps] 
          phi_stmt_681_loopback_sample_req <-& (phi_stmt_681_loopback_sample_req_ps)
          phi_stmt_681_loopback_sample_req &-> ($null)
          $T[phi_stmt_681_entry_trigger] 
          phi_stmt_681_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_681_entry_sample_req] 
          $T[phi_stmt_681_entry_sample_req_ps] 
          phi_stmt_681_entry_sample_req <-& (phi_stmt_681_entry_sample_req_ps)
          phi_stmt_681_entry_sample_req &-> ($null)
          phi_stmt_681_update_start_ o<-& (phi_stmt_681_update_completed_ 0)
          phi_stmt_681_sample_start_ o<-& (phi_stmt_681_sample_completed_ 1)
          $T[phi_stmt_681_merged_reqs] 
          $T[phi_stmt_681_phi_mux_ack] 
          $T[phi_stmt_681_phi_mux_ack_ps] 
          phi_stmt_681_phi_mux_ack_ps <-& (phi_stmt_681_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_681_update_completed_)
          $T[R_ZERO_3_683_sample_start__ps] 
          $T[R_ZERO_3_683_sample_completed__ps] 
          $T[R_ZERO_3_683_update_start__ps] 
          $T[R_ZERO_3_683_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_683_sample_start_] 
          $T[R_ZERO_3_683_sample_completed_] 
          R_ZERO_3_683_sample_completed_ <-& (R_ZERO_3_683_sample_start_)
          $T[R_ZERO_3_683_update_start_] 
          $T [R_ZERO_3_683_update_completed_] $delay 
          R_ZERO_3_683_update_completed_ <-& (R_ZERO_3_683_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_683_sample_start_ <-& (R_ZERO_3_683_sample_start__ps)
          R_ZERO_3_683_update_start_ <-& (R_ZERO_3_683_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_683_sample_completed__ps <-& (R_ZERO_3_683_sample_completed_)
          R_ZERO_3_683_update_completed__ps <-& (R_ZERO_3_683_update_completed_)
          $T[R_next_active_packet_684_sample_start__ps] 
          $T[R_next_active_packet_684_sample_completed__ps] 
          $T[R_next_active_packet_684_update_start__ps] 
          $T[R_next_active_packet_684_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_684_sample_start_] 
          $T[R_next_active_packet_684_sample_completed_] 
          $T[R_next_active_packet_684_update_start_] 
          $T[R_next_active_packet_684_update_completed_] 
          ;;[R_next_active_packet_684_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_684_sample_start_ &-> (R_next_active_packet_684_Sample)
          R_next_active_packet_684_sample_completed_ <-& (R_next_active_packet_684_Sample)
          ;;[R_next_active_packet_684_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_684_update_start_ &-> (R_next_active_packet_684_Update)
          R_next_active_packet_684_update_completed_ <-& (R_next_active_packet_684_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_684_sample_start_ <-& (R_next_active_packet_684_sample_start__ps)
          R_next_active_packet_684_update_start_ <-& (R_next_active_packet_684_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_684_sample_completed__ps <-& (R_next_active_packet_684_sample_completed_)
          R_next_active_packet_684_update_completed__ps <-& (R_next_active_packet_684_update_completed_)
          $phisequencer [ phi_stmt_681_phi_seq] : 
          phi_stmt_681_entry_trigger R_ZERO_3_683_sample_start__ps R_ZERO_3_683_sample_completed__ps R_ZERO_3_683_update_start__ps R_ZERO_3_683_update_completed__ps phi_stmt_681_loopback_trigger R_next_active_packet_684_sample_start__ps R_next_active_packet_684_sample_completed__ps R_next_active_packet_684_update_start__ps R_next_active_packet_684_update_completed__ps :
          phi_stmt_681_sample_start__ps phi_stmt_681_sample_completed__ps phi_stmt_681_update_start__ps phi_stmt_681_update_completed__ps :
          phi_stmt_681_entry_sample_req_ps phi_stmt_681_loopback_sample_req_ps : 
          phi_stmt_681_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_681
          // start:  PHI statement phi_stmt_685
          // 			$phi down_counter := 			  ZERO_16 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_685_sample_start_] 
          $T[phi_stmt_685_sample_completed_] 
          $T[phi_stmt_685_update_start_] 
          $T[phi_stmt_685_update_completed_] 
          $T[phi_stmt_685_sample_start__ps] 
          phi_stmt_685_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_685_sample_completed__ps] 
          phi_stmt_685_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_685_update_start__ps] 
          phi_stmt_685_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_685_update_completed__ps] 
          phi_stmt_685_update_completed_ <-& (phi_stmt_685_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_685_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_685_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_685_update_start_)
          $T[phi_stmt_685_loopback_trigger] 
          phi_stmt_685_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_685_loopback_sample_req] 
          $T[phi_stmt_685_loopback_sample_req_ps] 
          phi_stmt_685_loopback_sample_req <-& (phi_stmt_685_loopback_sample_req_ps)
          phi_stmt_685_loopback_sample_req &-> ($null)
          $T[phi_stmt_685_entry_trigger] 
          phi_stmt_685_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_685_entry_sample_req] 
          $T[phi_stmt_685_entry_sample_req_ps] 
          phi_stmt_685_entry_sample_req <-& (phi_stmt_685_entry_sample_req_ps)
          phi_stmt_685_entry_sample_req &-> ($null)
          phi_stmt_685_update_start_ o<-& (phi_stmt_685_update_completed_ 0)
          phi_stmt_685_sample_start_ o<-& (phi_stmt_685_sample_completed_ 1)
          $T[phi_stmt_685_merged_reqs] 
          $T[phi_stmt_685_phi_mux_ack] 
          $T[phi_stmt_685_phi_mux_ack_ps] 
          phi_stmt_685_phi_mux_ack_ps <-& (phi_stmt_685_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_685_update_completed_)
          $T[R_ZERO_16_687_sample_start__ps] 
          $T[R_ZERO_16_687_sample_completed__ps] 
          $T[R_ZERO_16_687_update_start__ps] 
          $T[R_ZERO_16_687_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_16_687_sample_start_] 
          $T[R_ZERO_16_687_sample_completed_] 
          R_ZERO_16_687_sample_completed_ <-& (R_ZERO_16_687_sample_start_)
          $T[R_ZERO_16_687_update_start_] 
          $T [R_ZERO_16_687_update_completed_] $delay 
          R_ZERO_16_687_update_completed_ <-& (R_ZERO_16_687_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_16_687_sample_start_ <-& (R_ZERO_16_687_sample_start__ps)
          R_ZERO_16_687_update_start_ <-& (R_ZERO_16_687_update_start__ps)
          // Phi complete dependency.
          R_ZERO_16_687_sample_completed__ps <-& (R_ZERO_16_687_sample_completed_)
          R_ZERO_16_687_update_completed__ps <-& (R_ZERO_16_687_update_completed_)
          $T[R_next_down_counter_688_sample_start__ps] 
          $T[R_next_down_counter_688_sample_completed__ps] 
          $T[R_next_down_counter_688_update_start__ps] 
          $T[R_next_down_counter_688_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_688_sample_start_] 
          $T[R_next_down_counter_688_sample_completed_] 
          $T[R_next_down_counter_688_update_start_] 
          $T[R_next_down_counter_688_update_completed_] 
          ;;[R_next_down_counter_688_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_688_sample_start_ &-> (R_next_down_counter_688_Sample)
          R_next_down_counter_688_sample_completed_ <-& (R_next_down_counter_688_Sample)
          ;;[R_next_down_counter_688_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_688_update_start_ &-> (R_next_down_counter_688_Update)
          R_next_down_counter_688_update_completed_ <-& (R_next_down_counter_688_Update)
          // RAW reenables for next_down_counter
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_688_sample_start_ <-& (R_next_down_counter_688_sample_start__ps)
          R_next_down_counter_688_update_start_ <-& (R_next_down_counter_688_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_688_sample_completed__ps <-& (R_next_down_counter_688_sample_completed_)
          R_next_down_counter_688_update_completed__ps <-& (R_next_down_counter_688_update_completed_)
          $phisequencer [ phi_stmt_685_phi_seq] : 
          phi_stmt_685_entry_trigger R_ZERO_16_687_sample_start__ps R_ZERO_16_687_sample_completed__ps R_ZERO_16_687_update_start__ps R_ZERO_16_687_update_completed__ps phi_stmt_685_loopback_trigger R_next_down_counter_688_sample_start__ps R_next_down_counter_688_sample_completed__ps R_next_down_counter_688_update_start__ps R_next_down_counter_688_update_completed__ps :
          phi_stmt_685_sample_start__ps phi_stmt_685_sample_completed__ps phi_stmt_685_update_start__ps phi_stmt_685_update_completed__ps :
          phi_stmt_685_entry_sample_req_ps phi_stmt_685_loopback_sample_req_ps : 
          phi_stmt_685_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_685
          // start:  PHI statement phi_stmt_689
          // 			$phi pkt_with_priority := 			  1  $on   $entry 			  next_pkt_with_priority $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_689_sample_start_] 
          $T[phi_stmt_689_sample_completed_] 
          $T[phi_stmt_689_update_start_] 
          $T[phi_stmt_689_update_completed_] 
          $T[phi_stmt_689_sample_start__ps] 
          phi_stmt_689_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_689_sample_completed__ps] 
          phi_stmt_689_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_689_update_start__ps] 
          phi_stmt_689_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_689_update_completed__ps] 
          phi_stmt_689_update_completed_ <-& (phi_stmt_689_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_689_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_689_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_689_update_start_)
          $T[phi_stmt_689_loopback_trigger] 
          phi_stmt_689_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_689_loopback_sample_req] 
          $T[phi_stmt_689_loopback_sample_req_ps] 
          phi_stmt_689_loopback_sample_req <-& (phi_stmt_689_loopback_sample_req_ps)
          phi_stmt_689_loopback_sample_req &-> ($null)
          $T[phi_stmt_689_entry_trigger] 
          phi_stmt_689_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_689_entry_sample_req] 
          $T[phi_stmt_689_entry_sample_req_ps] 
          phi_stmt_689_entry_sample_req <-& (phi_stmt_689_entry_sample_req_ps)
          phi_stmt_689_entry_sample_req &-> ($null)
          phi_stmt_689_update_start_ o<-& (phi_stmt_689_update_completed_ 0)
          phi_stmt_689_sample_start_ o<-& (phi_stmt_689_sample_completed_ 1)
          $T[phi_stmt_689_merged_reqs] 
          $T[phi_stmt_689_phi_mux_ack] 
          $T[phi_stmt_689_phi_mux_ack_ps] 
          phi_stmt_689_phi_mux_ack_ps <-& (phi_stmt_689_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_689_update_completed_)
          $T[konst_691_sample_start__ps] 
          $T[konst_691_sample_completed__ps] 
          $T[konst_691_update_start__ps] 
          $T[konst_691_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_691_sample_start_] 
          $T[konst_691_sample_completed_] 
          konst_691_sample_completed_ <-& (konst_691_sample_start_)
          $T[konst_691_update_start_] 
          $T [konst_691_update_completed_] $delay 
          konst_691_update_completed_ <-& (konst_691_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_691_sample_start_ <-& (konst_691_sample_start__ps)
          konst_691_update_start_ <-& (konst_691_update_start__ps)
          // Phi complete dependency.
          konst_691_sample_completed__ps <-& (konst_691_sample_completed_)
          konst_691_update_completed__ps <-& (konst_691_update_completed_)
          $T[R_next_pkt_with_priority_692_sample_start__ps] 
          $T[R_next_pkt_with_priority_692_sample_completed__ps] 
          $T[R_next_pkt_with_priority_692_update_start__ps] 
          $T[R_next_pkt_with_priority_692_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_pkt_with_priority_692_sample_start_] 
          $T[R_next_pkt_with_priority_692_sample_completed_] 
          $T[R_next_pkt_with_priority_692_update_start_] 
          $T[R_next_pkt_with_priority_692_update_completed_] 
          ;;[R_next_pkt_with_priority_692_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_pkt_with_priority_692_sample_start_ &-> (R_next_pkt_with_priority_692_Sample)
          R_next_pkt_with_priority_692_sample_completed_ <-& (R_next_pkt_with_priority_692_Sample)
          ;;[R_next_pkt_with_priority_692_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_pkt_with_priority_692_update_start_ &-> (R_next_pkt_with_priority_692_Update)
          R_next_pkt_with_priority_692_update_completed_ <-& (R_next_pkt_with_priority_692_Update)
          // RAW reenables for next_pkt_with_priority
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_pkt_with_priority_692_sample_start_ <-& (R_next_pkt_with_priority_692_sample_start__ps)
          R_next_pkt_with_priority_692_update_start_ <-& (R_next_pkt_with_priority_692_update_start__ps)
          // Phi complete dependency.
          R_next_pkt_with_priority_692_sample_completed__ps <-& (R_next_pkt_with_priority_692_sample_completed_)
          R_next_pkt_with_priority_692_update_completed__ps <-& (R_next_pkt_with_priority_692_update_completed_)
          $phisequencer [ phi_stmt_689_phi_seq] : 
          phi_stmt_689_entry_trigger konst_691_sample_start__ps konst_691_sample_completed__ps konst_691_update_start__ps konst_691_update_completed__ps phi_stmt_689_loopback_trigger R_next_pkt_with_priority_692_sample_start__ps R_next_pkt_with_priority_692_sample_completed__ps R_next_pkt_with_priority_692_update_start__ps R_next_pkt_with_priority_692_update_completed__ps :
          phi_stmt_689_sample_start__ps phi_stmt_689_sample_completed__ps phi_stmt_689_update_start__ps phi_stmt_689_update_completed__ps :
          phi_stmt_689_entry_sample_req_ps phi_stmt_689_loopback_sample_req_ps : 
          phi_stmt_689_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_689
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 254
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 255
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 256
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 257
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 259
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_with_priority
          // WAR dependency: Read: next_pkt_with_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_with_priority
          // start:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  file .Aa/switch4x4.opt.aa, line 260
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // pkt_with_priority
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_pkt_with_priority
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_with_priority
          // WAR dependency: Read: next_pkt_with_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_with_priority
          // end:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          // start: WAR dependencies for valid_active_pkt_length
          // done: WAR dependencies for valid_active_pkt_length
          // start:  			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 261
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 23 8 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 23 8 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 23 8 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 23 8 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) valid_active_pkt_length
          // start: WAR dependencies for valid_active_pkt_length
          // done: WAR dependencies for valid_active_pkt_length
          // end:  			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 262
          // volatile! 
          // Source expression
          // ((next_active_packet != 0 ) & (down_counter == 0 ))
          // (next_active_packet != 0 )
          // next_active_packet
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 263
          // volatile! 
          // Source expression
          // ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // (valid_active_pkt_length - 1 )
          // valid_active_pkt_length
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 264
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 265
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 266
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 267
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 268
          // volatile! 
          // Source expression
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 269
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch4x4.opt.aa, line 270
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_1
          $T[WPIPE_out_data_1_904_sample_start_] 
          $T[WPIPE_out_data_1_904_sample_completed_] 
          $T[WPIPE_out_data_1_904_update_start_] 
          $T[WPIPE_out_data_1_904_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_1_904 with guard R_send_flag_903
          WPIPE_out_data_1_904_sample_start_ <-& (phi_stmt_661_update_completed_)
          WPIPE_out_data_1_904_sample_start_ <-& (phi_stmt_666_update_completed_)
          WPIPE_out_data_1_904_sample_start_ <-& (phi_stmt_671_update_completed_)
          WPIPE_out_data_1_904_sample_start_ <-& (phi_stmt_676_update_completed_)
          WPIPE_out_data_1_904_sample_start_ <-& (phi_stmt_681_update_completed_)
          WPIPE_out_data_1_904_sample_start_ <-& (phi_stmt_685_update_completed_)
          WPIPE_out_data_1_904_sample_start_ <-& (phi_stmt_689_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_661_update_start_ o<-& (WPIPE_out_data_1_904_sample_completed_ 0)
          phi_stmt_666_update_start_ o<-& (WPIPE_out_data_1_904_sample_completed_ 0)
          phi_stmt_671_update_start_ o<-& (WPIPE_out_data_1_904_sample_completed_ 0)
          phi_stmt_676_update_start_ o<-& (WPIPE_out_data_1_904_sample_completed_ 0)
          phi_stmt_681_update_start_ o<-& (WPIPE_out_data_1_904_sample_completed_ 0)
          phi_stmt_685_update_start_ o<-& (WPIPE_out_data_1_904_sample_completed_ 0)
          phi_stmt_689_update_start_ o<-& (WPIPE_out_data_1_904_sample_completed_ 0)
          ;;[WPIPE_out_data_1_904_Sample] 
          {
            // pipe write sample-start out_data_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_1_904_Update] 
          {
            // pipe write update (complete) out_data_1
            $T [req] $T [ack] 
          }
          WPIPE_out_data_1_904_sample_start_ &-> (WPIPE_out_data_1_904_Sample)
          WPIPE_out_data_1_904_sample_completed_ <-& (WPIPE_out_data_1_904_Sample)
          WPIPE_out_data_1_904_update_start_ <-& (WPIPE_out_data_1_904_sample_completed_)
          WPIPE_out_data_1_904_update_start_ &-> (WPIPE_out_data_1_904_Update)
          WPIPE_out_data_1_904_update_completed_ <-& (WPIPE_out_data_1_904_Update)
          WPIPE_out_data_1_904_sample_start_ o<-& (WPIPE_out_data_1_904_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_1_904_sample_start_
          WPIPE_out_data_1_904_sample_start_ <-& (phi_stmt_661_update_completed_)
          WPIPE_out_data_1_904_sample_start_ <-& (phi_stmt_666_update_completed_)
          WPIPE_out_data_1_904_sample_start_ <-& (phi_stmt_671_update_completed_)
          WPIPE_out_data_1_904_sample_start_ <-& (phi_stmt_676_update_completed_)
          WPIPE_out_data_1_904_sample_start_ <-& (phi_stmt_681_update_completed_)
          WPIPE_out_data_1_904_sample_start_ <-& (phi_stmt_685_update_completed_)
          WPIPE_out_data_1_904_sample_start_ <-& (phi_stmt_689_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_1_904_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_661_update_start_ o<-& (WPIPE_out_data_1_904_sample_completed_ 0)
          phi_stmt_666_update_start_ o<-& (WPIPE_out_data_1_904_sample_completed_ 0)
          phi_stmt_671_update_start_ o<-& (WPIPE_out_data_1_904_sample_completed_ 0)
          phi_stmt_676_update_start_ o<-& (WPIPE_out_data_1_904_sample_completed_ 0)
          phi_stmt_681_update_start_ o<-& (WPIPE_out_data_1_904_sample_completed_ 0)
          phi_stmt_685_update_start_ o<-& (WPIPE_out_data_1_904_sample_completed_ 0)
          phi_stmt_689_update_start_ o<-& (WPIPE_out_data_1_904_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_2_1
          // read-dependencies for pipe noblock_obuf_2_1
          // write-dependencies for pipe noblock_obuf_2_1
          // signal write dependencies for noblock_obuf_2_1
          // pipe read/write dependencies for pipe noblock_obuf_1_1
          // read-dependencies for pipe noblock_obuf_1_1
          // write-dependencies for pipe noblock_obuf_1_1
          // signal write dependencies for noblock_obuf_1_1
          // pipe read/write dependencies for pipe noblock_obuf_3_1
          // read-dependencies for pipe noblock_obuf_3_1
          // write-dependencies for pipe noblock_obuf_3_1
          // signal write dependencies for noblock_obuf_3_1
          // pipe read/write dependencies for pipe noblock_obuf_4_1
          // read-dependencies for pipe noblock_obuf_4_1
          // write-dependencies for pipe noblock_obuf_4_1
          // signal write dependencies for noblock_obuf_4_1
          // pipe read/write dependencies for pipe out_data_1
          // read-dependencies for pipe out_data_1
          // write-dependencies for pipe out_data_1
          // signal write dependencies for out_data_1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_659__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_659_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_659__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_659_loop_body : condition_evaluated
        $bind do_while_stmt_659__entry__  => do_while_stmt_659_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_659_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_659__exit__)
      }
      do_while_stmt_659__entry__ |-> (do_while_stmt_659)
      do_while_stmt_659__exit__ <-| (do_while_stmt_659)
      do_while_stmt_659__entry__ <-| (branch_block_stmt_658__entry__)
      do_while_stmt_659__exit__ |-> (branch_block_stmt_658__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_1_Daemon%loop%
    //  file .Aa/switch4x4.opt.aa, line 238
    // constant-object-declarations for block %outputPort_1_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 234
    // constant-object-declarations for block %outputPort_1_Daemon
    //  file .Aa/switch4x4.opt.aa, line 229
    // constant-declarations for block %outputPort_1_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 234
    // do-while statement  
    //  file .Aa/switch4x4.opt.aa, line 236
    // 1 
    $constant $W[konst_917_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_1_Daemon%loop%
    //  file .Aa/switch4x4.opt.aa, line 238
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 239
    // ZERO_33
    $constant $W[R_ZERO_33_663_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 241
    // ZERO_33
    $constant $W[R_ZERO_33_668_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 243
    // ZERO_33
    $constant $W[R_ZERO_33_673_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 245
    // ZERO_33
    $constant $W[R_ZERO_33_678_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 247
    // ZERO_3
    $constant $W[R_ZERO_3_683_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_16 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 249
    // ZERO_16
    $constant $W[R_ZERO_16_687_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_with_priority := 			  1  $on   $entry 			  next_pkt_with_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 251
    // 1 
    $constant $W[konst_691_wire_constant] : $int<3> := _b001// 1
    // 32 
    $constant $W[konst_696_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_701_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_706_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_711_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_728_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_731_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_734_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_737_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_741_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_744_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_747_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_750_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
    //  file .Aa/switch4x4.opt.aa, line 260
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
    // 1 
    $constant $W[konst_767_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_771_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
    // 2 
    $constant $W[konst_774_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_778_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
    // 3 
    $constant $W[konst_782_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_786_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
    // 4 
    $constant $W[konst_789_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_793_wire_constant] : $int<16> := _b0000000000000000// 0
    // 0 
    $constant $W[konst_800_wire_constant] : $int<3> := _b000// 0
    // 0 
    $constant $W[konst_803_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 1 
    $constant $W[konst_810_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_814_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_824_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_832_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_840_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_848_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  ) 
    // 1 
    $constant $W[konst_854_wire_constant] : $int<3> := _b001// 1
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
    // 2 
    $constant $W[konst_859_wire_constant] : $int<3> := _b010// 2
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
    // 3 
    $constant $W[konst_864_wire_constant] : $int<3> := _b011// 3
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_876_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_879_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_882_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_885_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_889_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_892_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_895_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_898_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_1_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 234
    // do-while statement  
    //  file .Aa/switch4x4.opt.aa, line 236
    // merge-statement  
    //  file .Aa/switch4x4.opt.aa, line 238
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 239
    // noblock_obuf_1_1
    $W[RPIPE_noblock_obuf_1_1_665_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_661] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 241
    // noblock_obuf_2_1
    $W[RPIPE_noblock_obuf_2_1_670_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_666] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 243
    // noblock_obuf_3_1
    $W[RPIPE_noblock_obuf_3_1_675_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_671] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 245
    // noblock_obuf_4_1
    $W[RPIPE_noblock_obuf_4_1_680_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_676] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 247
    $W[next_active_packet_764_684_buffered] : $int<3>
    // active_packet
    $W[active_packet_681] : $int<3>
    // 			$phi down_counter := 			  ZERO_16 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 249
    $W[next_down_counter_819_688_buffered] : $int<16>
    // down_counter
    $W[down_counter_685] : $int<16>
    // 			$phi pkt_with_priority := 			  1  $on   $entry 			  next_pkt_with_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 251
    $W[next_pkt_with_priority_764_692_buffered] : $int<3>
    // pkt_with_priority
    $W[pkt_with_priority_689] : $int<3>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 254
    // p1_valid
    $W[p1_valid_698] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 255
    // p2_valid
    $W[p2_valid_703] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 256
    // p3_valid
    $W[p3_valid_708] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 257
    // p4_valid
    $W[p4_valid_713] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 259
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_729_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_732_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_735_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_738_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_739_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_742_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_745_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_748_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_751_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_752_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_754] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
    //  file .Aa/switch4x4.opt.aa, line 260
    // next_active_packet
    $W[next_active_packet_764] : $int<3>
    // next_pkt_with_priority
    $W[next_pkt_with_priority_764] : $int<3>
    // 			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 261
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_768_wire] : $int<1>
    // ( $slice pkt_1_e_word 23 8 ) 
    $intermediate $W[slice_770_wire] : $int<16>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
    $intermediate $W[MUX_772_wire] : $int<16>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_775_wire] : $int<1>
    // ( $slice pkt_2_e_word 23 8 ) 
    $intermediate $W[slice_777_wire] : $int<16>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
    $intermediate $W[MUX_779_wire] : $int<16>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) )
    $intermediate $W[OR_u16_u16_780_wire] : $int<16>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_783_wire] : $int<1>
    // ( $slice pkt_3_e_word 23 8 ) 
    $intermediate $W[slice_785_wire] : $int<16>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
    $intermediate $W[MUX_787_wire] : $int<16>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_790_wire] : $int<1>
    // ( $slice pkt_4_e_word 23 8 ) 
    $intermediate $W[slice_792_wire] : $int<16>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
    $intermediate $W[MUX_794_wire] : $int<16>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )
    $intermediate $W[OR_u16_u16_795_wire] : $int<16>
    // valid_active_pkt_length
    $W[valid_active_pkt_length_797] : $int<16>
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 262
    // (next_active_packet != 0 )
    $intermediate $W[NEQ_u3_u1_801_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u16_u1_804_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_806] : $int<1>
    // 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 263
    // (valid_active_pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_811_wire] : $int<16>
    // (down_counter - 1 )
    $intermediate $W[SUB_u16_u16_815_wire] : $int<16>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_817_wire] : $int<16>
    // next_down_counter
    $W[next_down_counter_819] : $int<16>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 264
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_822_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_825_wire] : $int<1>
    // read_from_1
    $W[read_from_1_827] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 265
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_830_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_833_wire] : $int<1>
    // read_from_2
    $W[read_from_2_835] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 266
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_838_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_841_wire] : $int<1>
    // read_from_3
    $W[read_from_3_843] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 267
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_846_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_849_wire] : $int<1>
    // read_from_4
    $W[read_from_4_851] : $int<1>
    // 			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 268
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_855_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_857_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_860_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_862_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_865_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_867_wire] : $int<32>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_869_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
    $intermediate $W[MUX_870_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
    $intermediate $W[MUX_871_wire] : $int<32>
    // data_to_out
    $W[data_to_out_873] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 269
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_877_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_880_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_883_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_886_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_887_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_890_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_893_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_896_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_899_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_900_wire] : $int<1>
    // send_flag
    $W[send_flag_902] : $int<1>
    // 			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch4x4.opt.aa, line 270
    // out_data_1
    // datapath-instances for block %outputPort_1_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 234
    // datapath-instances for do-while  
    //  file .Aa/switch4x4.opt.aa, line 236
    ==0? [do_while_stmt_659_branch] (konst_917_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch4x4.opt.aa, line 238
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 239
    // noblock_obuf_1_1
    $ioport $in [RPIPE_noblock_obuf_1_1_665_inst] (noblock_obuf_1_1) (RPIPE_noblock_obuf_1_1_665_wire) $guard ( read_from_1_827 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_1_665_inst RPIPE_noblock_obuf_1_1_665_wire 1
    # $phi [phi_stmt_661] (R_ZERO_33_663_wire_constant RPIPE_noblock_obuf_1_1_665_wire) ( pkt_1_e_word_661 ) $fullrate
    // $buffering  $out phi_stmt_661 pkt_1_e_word_661 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 241
    // noblock_obuf_2_1
    $ioport $in [RPIPE_noblock_obuf_2_1_670_inst] (noblock_obuf_2_1) (RPIPE_noblock_obuf_2_1_670_wire) $guard ( read_from_2_835 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_1_670_inst RPIPE_noblock_obuf_2_1_670_wire 1
    # $phi [phi_stmt_666] (R_ZERO_33_668_wire_constant RPIPE_noblock_obuf_2_1_670_wire) ( pkt_2_e_word_666 ) $fullrate
    // $buffering  $out phi_stmt_666 pkt_2_e_word_666 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 243
    // noblock_obuf_3_1
    $ioport $in [RPIPE_noblock_obuf_3_1_675_inst] (noblock_obuf_3_1) (RPIPE_noblock_obuf_3_1_675_wire) $guard ( read_from_3_843 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_1_675_inst RPIPE_noblock_obuf_3_1_675_wire 1
    # $phi [phi_stmt_671] (R_ZERO_33_673_wire_constant RPIPE_noblock_obuf_3_1_675_wire) ( pkt_3_e_word_671 ) $fullrate
    // $buffering  $out phi_stmt_671 pkt_3_e_word_671 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_1 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 245
    // noblock_obuf_4_1
    $ioport $in [RPIPE_noblock_obuf_4_1_680_inst] (noblock_obuf_4_1) (RPIPE_noblock_obuf_4_1_680_wire) $guard ( read_from_4_851 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_1_680_inst RPIPE_noblock_obuf_4_1_680_wire 1
    # $phi [phi_stmt_676] (R_ZERO_33_678_wire_constant RPIPE_noblock_obuf_4_1_680_wire) ( pkt_4_e_word_676 ) $fullrate
    // $buffering  $out phi_stmt_676 pkt_4_e_word_676 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 247
    # := [next_active_packet_764_684_buf] (next_active_packet_764) (next_active_packet_764_684_buffered)     $fullrate
    $buffering $out next_active_packet_764_684_buf next_active_packet_764_684_buffered  1
    # $phi [phi_stmt_681] (R_ZERO_3_683_wire_constant next_active_packet_764_684_buffered) ( active_packet_681 ) $fullrate
    // $buffering  $out phi_stmt_681 active_packet_681 2
    // 			$phi down_counter := 			  ZERO_16 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 249
    # := [next_down_counter_819_688_buf] (next_down_counter_819) (next_down_counter_819_688_buffered)     $fullrate
    $buffering $out next_down_counter_819_688_buf next_down_counter_819_688_buffered  1
    # $phi [phi_stmt_685] (R_ZERO_16_687_wire_constant next_down_counter_819_688_buffered) ( down_counter_685 ) $fullrate
    // $buffering  $out phi_stmt_685 down_counter_685 2
    // 			$phi pkt_with_priority := 			  1  $on   $entry 			  next_pkt_with_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 251
    # := [next_pkt_with_priority_764_692_buf] (next_pkt_with_priority_764) (next_pkt_with_priority_764_692_buffered)     $fullrate
    $buffering $out next_pkt_with_priority_764_692_buf next_pkt_with_priority_764_692_buffered  1
    # $phi [phi_stmt_689] (konst_691_wire_constant next_pkt_with_priority_764_692_buffered) ( pkt_with_priority_689 ) $fullrate
    // $buffering  $out phi_stmt_689 pkt_with_priority_689 2
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 254
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_697_inst] (pkt_1_e_word_661 konst_696_wire_constant) (p1_valid_698)   $flowthrough 
    $delay BITSEL_u33_u1_697_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 255
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_702_inst] (pkt_2_e_word_666 konst_701_wire_constant) (p2_valid_703)   $flowthrough 
    $delay BITSEL_u33_u1_702_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 256
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_707_inst] (pkt_3_e_word_671 konst_706_wire_constant) (p3_valid_708)   $flowthrough 
    $delay BITSEL_u33_u1_707_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 257
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_712_inst] (pkt_4_e_word_676 konst_711_wire_constant) (p4_valid_713)   $flowthrough 
    $delay BITSEL_u33_u1_712_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 259
    // (active_packet == 1 )
    ==[EQ_u3_u1_729_inst] (active_packet_681 konst_728_wire_constant) (EQ_u3_u1_729_wire)   $flowthrough 
    $delay EQ_u3_u1_729_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_732_inst] (EQ_u3_u1_729_wire p1_valid_698 konst_731_wire_constant) (MUX_732_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_735_inst] (active_packet_681 konst_734_wire_constant) (EQ_u3_u1_735_wire)   $flowthrough 
    $delay EQ_u3_u1_735_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_738_inst] (EQ_u3_u1_735_wire p2_valid_703 konst_737_wire_constant) (MUX_738_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_739_inst] (MUX_732_wire MUX_738_wire) (OR_u1_u1_739_wire)   $flowthrough 
    $delay OR_u1_u1_739_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_742_inst] (active_packet_681 konst_741_wire_constant) (EQ_u3_u1_742_wire)   $flowthrough 
    $delay EQ_u3_u1_742_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_745_inst] (EQ_u3_u1_742_wire p3_valid_708 konst_744_wire_constant) (MUX_745_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_748_inst] (active_packet_681 konst_747_wire_constant) (EQ_u3_u1_748_wire)   $flowthrough 
    $delay EQ_u3_u1_748_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_751_inst] (EQ_u3_u1_748_wire p4_valid_713 konst_750_wire_constant) (MUX_751_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_752_inst] (MUX_745_wire MUX_751_wire) (OR_u1_u1_752_wire)   $flowthrough 
    $delay OR_u1_u1_752_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_753_inst] (OR_u1_u1_739_wire OR_u1_u1_752_wire) (valid_active_pkt_word_read_754)   $flowthrough 
    $delay OR_u1_u1_753_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
    //  file .Aa/switch4x4.opt.aa, line 260
    $call [call_stmt_764_call] $module prioritySelect(down_counter_685 active_packet_681 pkt_with_priority_689 p1_valid_698 p2_valid_703 p3_valid_708 p4_valid_713) (next_active_packet_764 next_pkt_with_priority_764)   $flowthrough $fullrate
    // 			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 261
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_768_inst] (next_active_packet_764 konst_767_wire_constant) (EQ_u3_u1_768_wire)   $flowthrough 
    $delay EQ_u3_u1_768_inst 0
    // ( $slice pkt_1_e_word 23 8 ) 
    [:] [slice_770_inst] (pkt_1_e_word_661 23 8) (slice_770_wire)  $flowthrough
    $delay slice_770_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
    ? [MUX_772_inst] (EQ_u3_u1_768_wire slice_770_wire konst_771_wire_constant) (MUX_772_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_775_inst] (next_active_packet_764 konst_774_wire_constant) (EQ_u3_u1_775_wire)   $flowthrough 
    $delay EQ_u3_u1_775_inst 0
    // ( $slice pkt_2_e_word 23 8 ) 
    [:] [slice_777_inst] (pkt_2_e_word_666 23 8) (slice_777_wire)  $flowthrough
    $delay slice_777_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
    ? [MUX_779_inst] (EQ_u3_u1_775_wire slice_777_wire konst_778_wire_constant) (MUX_779_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) )
    |[OR_u16_u16_780_inst] (MUX_772_wire MUX_779_wire) (OR_u16_u16_780_wire)   $flowthrough 
    $delay OR_u16_u16_780_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_783_inst] (next_active_packet_764 konst_782_wire_constant) (EQ_u3_u1_783_wire)   $flowthrough 
    $delay EQ_u3_u1_783_inst 0
    // ( $slice pkt_3_e_word 23 8 ) 
    [:] [slice_785_inst] (pkt_3_e_word_671 23 8) (slice_785_wire)  $flowthrough
    $delay slice_785_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
    ? [MUX_787_inst] (EQ_u3_u1_783_wire slice_785_wire konst_786_wire_constant) (MUX_787_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_790_inst] (next_active_packet_764 konst_789_wire_constant) (EQ_u3_u1_790_wire)   $flowthrough 
    $delay EQ_u3_u1_790_inst 0
    // ( $slice pkt_4_e_word 23 8 ) 
    [:] [slice_792_inst] (pkt_4_e_word_676 23 8) (slice_792_wire)  $flowthrough
    $delay slice_792_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
    ? [MUX_794_inst] (EQ_u3_u1_790_wire slice_792_wire konst_793_wire_constant) (MUX_794_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )
    |[OR_u16_u16_795_inst] (MUX_787_wire MUX_794_wire) (OR_u16_u16_795_wire)   $flowthrough 
    $delay OR_u16_u16_795_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) ))
    |[OR_u16_u16_796_inst] (OR_u16_u16_780_wire OR_u16_u16_795_wire) (valid_active_pkt_length_797)   $flowthrough 
    $delay OR_u16_u16_796_inst 0
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 262
    // (next_active_packet != 0 )
    !=[NEQ_u3_u1_801_inst] (next_active_packet_764 konst_800_wire_constant) (NEQ_u3_u1_801_wire)   $flowthrough 
    $delay NEQ_u3_u1_801_inst 0
    // (down_counter == 0 )
    ==[EQ_u16_u1_804_inst] (down_counter_685 konst_803_wire_constant) (EQ_u16_u1_804_wire)   $flowthrough 
    $delay EQ_u16_u1_804_inst 0
    // ((next_active_packet != 0 ) & (down_counter == 0 ))
    &[AND_u1_u1_805_inst] (NEQ_u3_u1_801_wire EQ_u16_u1_804_wire) (started_new_packet_806)   $flowthrough 
    $delay AND_u1_u1_805_inst 0
    // 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 263
    // (valid_active_pkt_length - 1 )
    -[SUB_u16_u16_811_inst] (valid_active_pkt_length_797 konst_810_wire_constant) (SUB_u16_u16_811_wire)   $flowthrough 
    $delay SUB_u16_u16_811_inst 0
    // (down_counter - 1 )
    -[SUB_u16_u16_815_inst] (down_counter_685 konst_814_wire_constant) (SUB_u16_u16_815_wire)   $flowthrough 
    $delay SUB_u16_u16_815_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_817_inst] (valid_active_pkt_word_read_754 SUB_u16_u16_815_wire down_counter_685) (MUX_817_wire)  $flowthrough
    // ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_818_inst] (started_new_packet_806 SUB_u16_u16_811_wire MUX_817_wire) (next_down_counter_819)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 264
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_822_inst] (p1_valid_698) (NOT_u1_u1_822_wire)   $flowthrough
    $delay NOT_u1_u1_822_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_825_inst] (next_active_packet_764 konst_824_wire_constant) (EQ_u3_u1_825_wire)   $flowthrough 
    $delay EQ_u3_u1_825_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_826_inst] (NOT_u1_u1_822_wire EQ_u3_u1_825_wire) (read_from_1_827)   $flowthrough 
    $delay OR_u1_u1_826_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 265
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_830_inst] (p2_valid_703) (NOT_u1_u1_830_wire)   $flowthrough
    $delay NOT_u1_u1_830_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_833_inst] (next_active_packet_764 konst_832_wire_constant) (EQ_u3_u1_833_wire)   $flowthrough 
    $delay EQ_u3_u1_833_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_834_inst] (NOT_u1_u1_830_wire EQ_u3_u1_833_wire) (read_from_2_835)   $flowthrough 
    $delay OR_u1_u1_834_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 266
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_838_inst] (p3_valid_708) (NOT_u1_u1_838_wire)   $flowthrough
    $delay NOT_u1_u1_838_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_841_inst] (next_active_packet_764 konst_840_wire_constant) (EQ_u3_u1_841_wire)   $flowthrough 
    $delay EQ_u3_u1_841_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_842_inst] (NOT_u1_u1_838_wire EQ_u3_u1_841_wire) (read_from_3_843)   $flowthrough 
    $delay OR_u1_u1_842_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 267
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_846_inst] (p4_valid_713) (NOT_u1_u1_846_wire)   $flowthrough
    $delay NOT_u1_u1_846_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_849_inst] (next_active_packet_764 konst_848_wire_constant) (EQ_u3_u1_849_wire)   $flowthrough 
    $delay EQ_u3_u1_849_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_850_inst] (NOT_u1_u1_846_wire EQ_u3_u1_849_wire) (read_from_4_851)   $flowthrough 
    $delay OR_u1_u1_850_inst 0
    // 			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 268
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_855_inst] (next_active_packet_764 konst_854_wire_constant) (EQ_u3_u1_855_wire)   $flowthrough 
    $delay EQ_u3_u1_855_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_857_inst] (pkt_1_e_word_661 31 0) (slice_857_wire)  $flowthrough
    $delay slice_857_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_860_inst] (next_active_packet_764 konst_859_wire_constant) (EQ_u3_u1_860_wire)   $flowthrough 
    $delay EQ_u3_u1_860_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_862_inst] (pkt_2_e_word_666 31 0) (slice_862_wire)  $flowthrough
    $delay slice_862_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_865_inst] (next_active_packet_764 konst_864_wire_constant) (EQ_u3_u1_865_wire)   $flowthrough 
    $delay EQ_u3_u1_865_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_867_inst] (pkt_3_e_word_671 31 0) (slice_867_wire)  $flowthrough
    $delay slice_867_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_869_inst] (pkt_4_e_word_676 31 0) (slice_869_wire)  $flowthrough
    $delay slice_869_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
    ? [MUX_870_inst] (EQ_u3_u1_865_wire slice_867_wire slice_869_wire) (MUX_870_wire)  $flowthrough
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
    ? [MUX_871_inst] (EQ_u3_u1_860_wire slice_862_wire MUX_870_wire) (MUX_871_wire)  $flowthrough
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  ) 
    ? [MUX_872_inst] (EQ_u3_u1_855_wire slice_857_wire MUX_871_wire) (data_to_out_873)  $flowthrough
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 269
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_877_inst] (next_active_packet_764 konst_876_wire_constant) (EQ_u3_u1_877_wire)   $flowthrough 
    $delay EQ_u3_u1_877_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_880_inst] (EQ_u3_u1_877_wire p1_valid_698 konst_879_wire_constant) (MUX_880_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_883_inst] (next_active_packet_764 konst_882_wire_constant) (EQ_u3_u1_883_wire)   $flowthrough 
    $delay EQ_u3_u1_883_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_886_inst] (EQ_u3_u1_883_wire p2_valid_703 konst_885_wire_constant) (MUX_886_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_887_inst] (MUX_880_wire MUX_886_wire) (OR_u1_u1_887_wire)   $flowthrough 
    $delay OR_u1_u1_887_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_890_inst] (next_active_packet_764 konst_889_wire_constant) (EQ_u3_u1_890_wire)   $flowthrough 
    $delay EQ_u3_u1_890_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_893_inst] (EQ_u3_u1_890_wire p3_valid_708 konst_892_wire_constant) (MUX_893_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_896_inst] (next_active_packet_764 konst_895_wire_constant) (EQ_u3_u1_896_wire)   $flowthrough 
    $delay EQ_u3_u1_896_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_899_inst] (EQ_u3_u1_896_wire p4_valid_713 konst_898_wire_constant) (MUX_899_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_900_inst] (MUX_893_wire MUX_899_wire) (OR_u1_u1_900_wire)   $flowthrough 
    $delay OR_u1_u1_900_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_901_inst] (OR_u1_u1_887_wire OR_u1_u1_900_wire) (send_flag_902)   $flowthrough 
    $delay OR_u1_u1_901_inst 0
    // 			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch4x4.opt.aa, line 270
    // out_data_1
    $ioport $out [WPIPE_out_data_1_904_inst]  (data_to_out_873) (out_data_1) $guard ( send_flag_902 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_659
  //  file .Aa/switch4x4.opt.aa, line 236
  phi_stmt_661 <=> (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_661_entry_sample_req branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_661_loopback_sample_req) (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_661_phi_mux_ack)
  // noblock_obuf_1_1
  RPIPE_noblock_obuf_1_1_665_inst <=> (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/RPIPE_noblock_obuf_1_1_665_Sample/rr branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/RPIPE_noblock_obuf_1_1_665_Update/cr) (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/RPIPE_noblock_obuf_1_1_665_Sample/ra branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/RPIPE_noblock_obuf_1_1_665_Update/ca)
  phi_stmt_666 <=> (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_666_entry_sample_req branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_666_loopback_sample_req) (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_666_phi_mux_ack)
  // noblock_obuf_2_1
  RPIPE_noblock_obuf_2_1_670_inst <=> (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/RPIPE_noblock_obuf_2_1_670_Sample/rr branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/RPIPE_noblock_obuf_2_1_670_Update/cr) (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/RPIPE_noblock_obuf_2_1_670_Sample/ra branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/RPIPE_noblock_obuf_2_1_670_Update/ca)
  phi_stmt_671 <=> (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_671_entry_sample_req branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_671_loopback_sample_req) (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_671_phi_mux_ack)
  // noblock_obuf_3_1
  RPIPE_noblock_obuf_3_1_675_inst <=> (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/RPIPE_noblock_obuf_3_1_675_Sample/rr branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/RPIPE_noblock_obuf_3_1_675_Update/cr) (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/RPIPE_noblock_obuf_3_1_675_Sample/ra branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/RPIPE_noblock_obuf_3_1_675_Update/ca)
  phi_stmt_676 <=> (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_676_entry_sample_req branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_676_loopback_sample_req) (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_676_phi_mux_ack)
  // noblock_obuf_4_1
  RPIPE_noblock_obuf_4_1_680_inst <=> (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/RPIPE_noblock_obuf_4_1_680_Sample/rr branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/RPIPE_noblock_obuf_4_1_680_Update/cr) (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/RPIPE_noblock_obuf_4_1_680_Sample/ra branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/RPIPE_noblock_obuf_4_1_680_Update/ca)
  phi_stmt_681 <=> (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_681_entry_sample_req branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_681_loopback_sample_req) (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_681_phi_mux_ack)
  next_active_packet_764_684_buf <=> (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/R_next_active_packet_684_Sample/req branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/R_next_active_packet_684_Update/req) (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/R_next_active_packet_684_Sample/ack branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/R_next_active_packet_684_Update/ack)
  phi_stmt_685 <=> (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_685_entry_sample_req branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_685_loopback_sample_req) (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_685_phi_mux_ack)
  next_down_counter_819_688_buf <=> (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/R_next_down_counter_688_Sample/req branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/R_next_down_counter_688_Update/req) (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/R_next_down_counter_688_Sample/ack branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/R_next_down_counter_688_Update/ack)
  phi_stmt_689 <=> (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_689_entry_sample_req branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_689_loopback_sample_req) (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/phi_stmt_689_phi_mux_ack)
  next_pkt_with_priority_764_692_buf <=> (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/R_next_pkt_with_priority_692_Sample/req branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/R_next_pkt_with_priority_692_Update/req) (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/R_next_pkt_with_priority_692_Sample/ack branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/R_next_pkt_with_priority_692_Update/ack)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 254
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 255
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 256
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 257
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 259
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
  //  file .Aa/switch4x4.opt.aa, line 260
  // down_counter
  // active_packet
  // pkt_with_priority
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 261
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
  // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 262
  // ((next_active_packet != 0 ) & (down_counter == 0 ))
  // (next_active_packet != 0 )
  // next_active_packet
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 263
  // started_new_packet
  // (valid_active_pkt_length - 1 )
  // valid_active_pkt_length
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 264
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 265
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 266
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 267
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 268
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // pkt_4_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 269
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_1 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch4x4.opt.aa, line 270
  // data_to_out
  // out_data_1
  WPIPE_out_data_1_904_inst <=> (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/WPIPE_out_data_1_904_Sample/req branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/WPIPE_out_data_1_904_Update/req) (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/WPIPE_out_data_1_904_Sample/ack branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/WPIPE_out_data_1_904_Update/ack)
  do_while_stmt_659_branch <=> (branch_block_stmt_658/do_while_stmt_659/do_while_stmt_659_loop_body/condition_evaluated) (branch_block_stmt_658/do_while_stmt_659/loop_exit/ack branch_block_stmt_658/do_while_stmt_659/loop_taken/ack)
}
$module [outputPort_2_Daemon] 
{
  // pipe-declarations for block %outputPort_2_Daemon
  //  file .Aa/switch4x4.opt.aa, line 275
  // pipe-declarations for block %outputPort_2_Daemon%loop
  //  file .Aa/switch4x4.opt.aa, line 280
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_921] // Branch Block  file .Aa/switch4x4.opt.aa, line 280
    {
      $P [branch_block_stmt_921__entry__]
      branch_block_stmt_921__entry__ <-| ($entry)
      $P [branch_block_stmt_921__exit__]
      branch_block_stmt_921__exit__ |-> ($exit)
      $P [do_while_stmt_922__entry__] 
      $P [do_while_stmt_922__exit__] 
      // do-while-statement  
      //  file .Aa/switch4x4.opt.aa, line 282
      <o> [do_while_stmt_922]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_922__entry__] 
        $P[do_while_stmt_922__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_922_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_924
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_924_sample_start_] 
          $T[phi_stmt_924_sample_completed_] 
          $T[phi_stmt_924_update_start_] 
          $T[phi_stmt_924_update_completed_] 
          $T[phi_stmt_924_sample_start__ps] 
          phi_stmt_924_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_924_sample_completed__ps] 
          phi_stmt_924_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_924_update_start__ps] 
          phi_stmt_924_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_924_update_completed__ps] 
          phi_stmt_924_update_completed_ <-& (phi_stmt_924_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_924_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_924_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_924_update_start_)
          $T[phi_stmt_924_loopback_trigger] 
          phi_stmt_924_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_924_loopback_sample_req] 
          $T[phi_stmt_924_loopback_sample_req_ps] 
          phi_stmt_924_loopback_sample_req <-& (phi_stmt_924_loopback_sample_req_ps)
          phi_stmt_924_loopback_sample_req &-> ($null)
          $T[phi_stmt_924_entry_trigger] 
          phi_stmt_924_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_924_entry_sample_req] 
          $T[phi_stmt_924_entry_sample_req_ps] 
          phi_stmt_924_entry_sample_req <-& (phi_stmt_924_entry_sample_req_ps)
          phi_stmt_924_entry_sample_req &-> ($null)
          phi_stmt_924_update_start_ o<-& (phi_stmt_924_update_completed_ 0)
          phi_stmt_924_sample_start_ o<-& (phi_stmt_924_sample_completed_ 1)
          $T[phi_stmt_924_merged_reqs] 
          $T[phi_stmt_924_phi_mux_ack] 
          $T[phi_stmt_924_phi_mux_ack_ps] 
          phi_stmt_924_phi_mux_ack_ps <-& (phi_stmt_924_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_924_update_completed_)
          $T[R_ZERO_33_926_sample_start__ps] 
          $T[R_ZERO_33_926_sample_completed__ps] 
          $T[R_ZERO_33_926_update_start__ps] 
          $T[R_ZERO_33_926_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_926_sample_start_] 
          $T[R_ZERO_33_926_sample_completed_] 
          R_ZERO_33_926_sample_completed_ <-& (R_ZERO_33_926_sample_start_)
          $T[R_ZERO_33_926_update_start_] 
          $T [R_ZERO_33_926_update_completed_] $delay 
          R_ZERO_33_926_update_completed_ <-& (R_ZERO_33_926_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_926_sample_start_ <-& (R_ZERO_33_926_sample_start__ps)
          R_ZERO_33_926_update_start_ <-& (R_ZERO_33_926_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_926_sample_completed__ps <-& (R_ZERO_33_926_sample_completed_)
          R_ZERO_33_926_update_completed__ps <-& (R_ZERO_33_926_update_completed_)
          $T[RPIPE_noblock_obuf_1_2_928_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_2_928_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_2_928_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_2_928_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_2
          $T[RPIPE_noblock_obuf_1_2_928_sample_start_] 
          $T[RPIPE_noblock_obuf_1_2_928_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_2_928_update_start_] 
          $T[RPIPE_noblock_obuf_1_2_928_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_2_928 with guard R_read_from_1_927
          // root phi_stmt_924 not in visited_elements
          // root phi_stmt_929 not in visited_elements
          // root phi_stmt_934 not in visited_elements
          // root phi_stmt_939 not in visited_elements
          // root phi_stmt_944 not in visited_elements
          // root phi_stmt_948 not in visited_elements
          // root phi_stmt_952 not in visited_elements
          // RAW reenables for read_from_1
          ;;[RPIPE_noblock_obuf_1_2_928_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_2_928_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_2_928_sample_start_ &-> (RPIPE_noblock_obuf_1_2_928_Sample)
          RPIPE_noblock_obuf_1_2_928_sample_completed_ <-& (RPIPE_noblock_obuf_1_2_928_Sample)
          RPIPE_noblock_obuf_1_2_928_update_start_ <-& (RPIPE_noblock_obuf_1_2_928_sample_completed_)
          RPIPE_noblock_obuf_1_2_928_update_start_ &-> (RPIPE_noblock_obuf_1_2_928_Update)
          RPIPE_noblock_obuf_1_2_928_update_completed_ <-& (RPIPE_noblock_obuf_1_2_928_Update)
          RPIPE_noblock_obuf_1_2_928_sample_start_ o<-& (RPIPE_noblock_obuf_1_2_928_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_2_928_sample_start_ <-& (RPIPE_noblock_obuf_1_2_928_sample_start__ps)
          RPIPE_noblock_obuf_1_2_928_update_start_ <-& (RPIPE_noblock_obuf_1_2_928_update_start__ps)
          // RAW reenables for noblock_obuf_1_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_2_928_sample_completed__ps <-& (RPIPE_noblock_obuf_1_2_928_sample_completed_)
          RPIPE_noblock_obuf_1_2_928_update_completed__ps <-& (RPIPE_noblock_obuf_1_2_928_update_completed_)
          $phisequencer [ phi_stmt_924_phi_seq] : 
          phi_stmt_924_entry_trigger R_ZERO_33_926_sample_start__ps R_ZERO_33_926_sample_completed__ps R_ZERO_33_926_update_start__ps R_ZERO_33_926_update_completed__ps phi_stmt_924_loopback_trigger RPIPE_noblock_obuf_1_2_928_sample_start__ps RPIPE_noblock_obuf_1_2_928_sample_completed__ps RPIPE_noblock_obuf_1_2_928_update_start__ps RPIPE_noblock_obuf_1_2_928_update_completed__ps :
          phi_stmt_924_sample_start__ps phi_stmt_924_sample_completed__ps phi_stmt_924_update_start__ps phi_stmt_924_update_completed__ps :
          phi_stmt_924_entry_sample_req_ps phi_stmt_924_loopback_sample_req_ps : 
          phi_stmt_924_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_924
          // start:  PHI statement phi_stmt_929
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_929_sample_start_] 
          $T[phi_stmt_929_sample_completed_] 
          $T[phi_stmt_929_update_start_] 
          $T[phi_stmt_929_update_completed_] 
          $T[phi_stmt_929_sample_start__ps] 
          phi_stmt_929_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_929_sample_completed__ps] 
          phi_stmt_929_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_929_update_start__ps] 
          phi_stmt_929_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_929_update_completed__ps] 
          phi_stmt_929_update_completed_ <-& (phi_stmt_929_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_929_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_929_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_929_update_start_)
          $T[phi_stmt_929_loopback_trigger] 
          phi_stmt_929_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_929_loopback_sample_req] 
          $T[phi_stmt_929_loopback_sample_req_ps] 
          phi_stmt_929_loopback_sample_req <-& (phi_stmt_929_loopback_sample_req_ps)
          phi_stmt_929_loopback_sample_req &-> ($null)
          $T[phi_stmt_929_entry_trigger] 
          phi_stmt_929_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_929_entry_sample_req] 
          $T[phi_stmt_929_entry_sample_req_ps] 
          phi_stmt_929_entry_sample_req <-& (phi_stmt_929_entry_sample_req_ps)
          phi_stmt_929_entry_sample_req &-> ($null)
          phi_stmt_929_update_start_ o<-& (phi_stmt_929_update_completed_ 0)
          phi_stmt_929_sample_start_ o<-& (phi_stmt_929_sample_completed_ 1)
          $T[phi_stmt_929_merged_reqs] 
          $T[phi_stmt_929_phi_mux_ack] 
          $T[phi_stmt_929_phi_mux_ack_ps] 
          phi_stmt_929_phi_mux_ack_ps <-& (phi_stmt_929_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_929_update_completed_)
          $T[R_ZERO_33_931_sample_start__ps] 
          $T[R_ZERO_33_931_sample_completed__ps] 
          $T[R_ZERO_33_931_update_start__ps] 
          $T[R_ZERO_33_931_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_931_sample_start_] 
          $T[R_ZERO_33_931_sample_completed_] 
          R_ZERO_33_931_sample_completed_ <-& (R_ZERO_33_931_sample_start_)
          $T[R_ZERO_33_931_update_start_] 
          $T [R_ZERO_33_931_update_completed_] $delay 
          R_ZERO_33_931_update_completed_ <-& (R_ZERO_33_931_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_931_sample_start_ <-& (R_ZERO_33_931_sample_start__ps)
          R_ZERO_33_931_update_start_ <-& (R_ZERO_33_931_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_931_sample_completed__ps <-& (R_ZERO_33_931_sample_completed_)
          R_ZERO_33_931_update_completed__ps <-& (R_ZERO_33_931_update_completed_)
          $T[RPIPE_noblock_obuf_2_2_933_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_2_933_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_2_933_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_2_933_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_2
          $T[RPIPE_noblock_obuf_2_2_933_sample_start_] 
          $T[RPIPE_noblock_obuf_2_2_933_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_2_933_update_start_] 
          $T[RPIPE_noblock_obuf_2_2_933_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_2_933 with guard R_read_from_2_932
          // root phi_stmt_929 not in visited_elements
          // root phi_stmt_934 not in visited_elements
          // root phi_stmt_939 not in visited_elements
          // root phi_stmt_944 not in visited_elements
          // root phi_stmt_948 not in visited_elements
          // root phi_stmt_952 not in visited_elements
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_2_933_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_2_933_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_2_933_sample_start_ &-> (RPIPE_noblock_obuf_2_2_933_Sample)
          RPIPE_noblock_obuf_2_2_933_sample_completed_ <-& (RPIPE_noblock_obuf_2_2_933_Sample)
          RPIPE_noblock_obuf_2_2_933_update_start_ <-& (RPIPE_noblock_obuf_2_2_933_sample_completed_)
          RPIPE_noblock_obuf_2_2_933_update_start_ &-> (RPIPE_noblock_obuf_2_2_933_Update)
          RPIPE_noblock_obuf_2_2_933_update_completed_ <-& (RPIPE_noblock_obuf_2_2_933_Update)
          RPIPE_noblock_obuf_2_2_933_sample_start_ o<-& (RPIPE_noblock_obuf_2_2_933_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_2_933_sample_start_ <-& (RPIPE_noblock_obuf_2_2_933_sample_start__ps)
          RPIPE_noblock_obuf_2_2_933_update_start_ <-& (RPIPE_noblock_obuf_2_2_933_update_start__ps)
          // RAW reenables for noblock_obuf_2_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_2_933_sample_completed__ps <-& (RPIPE_noblock_obuf_2_2_933_sample_completed_)
          RPIPE_noblock_obuf_2_2_933_update_completed__ps <-& (RPIPE_noblock_obuf_2_2_933_update_completed_)
          $phisequencer [ phi_stmt_929_phi_seq] : 
          phi_stmt_929_entry_trigger R_ZERO_33_931_sample_start__ps R_ZERO_33_931_sample_completed__ps R_ZERO_33_931_update_start__ps R_ZERO_33_931_update_completed__ps phi_stmt_929_loopback_trigger RPIPE_noblock_obuf_2_2_933_sample_start__ps RPIPE_noblock_obuf_2_2_933_sample_completed__ps RPIPE_noblock_obuf_2_2_933_update_start__ps RPIPE_noblock_obuf_2_2_933_update_completed__ps :
          phi_stmt_929_sample_start__ps phi_stmt_929_sample_completed__ps phi_stmt_929_update_start__ps phi_stmt_929_update_completed__ps :
          phi_stmt_929_entry_sample_req_ps phi_stmt_929_loopback_sample_req_ps : 
          phi_stmt_929_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_929
          // start:  PHI statement phi_stmt_934
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_934_sample_start_] 
          $T[phi_stmt_934_sample_completed_] 
          $T[phi_stmt_934_update_start_] 
          $T[phi_stmt_934_update_completed_] 
          $T[phi_stmt_934_sample_start__ps] 
          phi_stmt_934_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_934_sample_completed__ps] 
          phi_stmt_934_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_934_update_start__ps] 
          phi_stmt_934_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_934_update_completed__ps] 
          phi_stmt_934_update_completed_ <-& (phi_stmt_934_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_934_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_934_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_934_update_start_)
          $T[phi_stmt_934_loopback_trigger] 
          phi_stmt_934_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_934_loopback_sample_req] 
          $T[phi_stmt_934_loopback_sample_req_ps] 
          phi_stmt_934_loopback_sample_req <-& (phi_stmt_934_loopback_sample_req_ps)
          phi_stmt_934_loopback_sample_req &-> ($null)
          $T[phi_stmt_934_entry_trigger] 
          phi_stmt_934_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_934_entry_sample_req] 
          $T[phi_stmt_934_entry_sample_req_ps] 
          phi_stmt_934_entry_sample_req <-& (phi_stmt_934_entry_sample_req_ps)
          phi_stmt_934_entry_sample_req &-> ($null)
          phi_stmt_934_update_start_ o<-& (phi_stmt_934_update_completed_ 0)
          phi_stmt_934_sample_start_ o<-& (phi_stmt_934_sample_completed_ 1)
          $T[phi_stmt_934_merged_reqs] 
          $T[phi_stmt_934_phi_mux_ack] 
          $T[phi_stmt_934_phi_mux_ack_ps] 
          phi_stmt_934_phi_mux_ack_ps <-& (phi_stmt_934_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_934_update_completed_)
          $T[R_ZERO_33_936_sample_start__ps] 
          $T[R_ZERO_33_936_sample_completed__ps] 
          $T[R_ZERO_33_936_update_start__ps] 
          $T[R_ZERO_33_936_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_936_sample_start_] 
          $T[R_ZERO_33_936_sample_completed_] 
          R_ZERO_33_936_sample_completed_ <-& (R_ZERO_33_936_sample_start_)
          $T[R_ZERO_33_936_update_start_] 
          $T [R_ZERO_33_936_update_completed_] $delay 
          R_ZERO_33_936_update_completed_ <-& (R_ZERO_33_936_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_936_sample_start_ <-& (R_ZERO_33_936_sample_start__ps)
          R_ZERO_33_936_update_start_ <-& (R_ZERO_33_936_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_936_sample_completed__ps <-& (R_ZERO_33_936_sample_completed_)
          R_ZERO_33_936_update_completed__ps <-& (R_ZERO_33_936_update_completed_)
          $T[RPIPE_noblock_obuf_3_2_938_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_2_938_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_2_938_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_2_938_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_2
          $T[RPIPE_noblock_obuf_3_2_938_sample_start_] 
          $T[RPIPE_noblock_obuf_3_2_938_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_2_938_update_start_] 
          $T[RPIPE_noblock_obuf_3_2_938_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_2_938 with guard R_read_from_3_937
          // root phi_stmt_934 not in visited_elements
          // root phi_stmt_939 not in visited_elements
          // root phi_stmt_944 not in visited_elements
          // root phi_stmt_948 not in visited_elements
          // root phi_stmt_952 not in visited_elements
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_2_938_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_2_938_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_2_938_sample_start_ &-> (RPIPE_noblock_obuf_3_2_938_Sample)
          RPIPE_noblock_obuf_3_2_938_sample_completed_ <-& (RPIPE_noblock_obuf_3_2_938_Sample)
          RPIPE_noblock_obuf_3_2_938_update_start_ <-& (RPIPE_noblock_obuf_3_2_938_sample_completed_)
          RPIPE_noblock_obuf_3_2_938_update_start_ &-> (RPIPE_noblock_obuf_3_2_938_Update)
          RPIPE_noblock_obuf_3_2_938_update_completed_ <-& (RPIPE_noblock_obuf_3_2_938_Update)
          RPIPE_noblock_obuf_3_2_938_sample_start_ o<-& (RPIPE_noblock_obuf_3_2_938_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_2_938_sample_start_ <-& (RPIPE_noblock_obuf_3_2_938_sample_start__ps)
          RPIPE_noblock_obuf_3_2_938_update_start_ <-& (RPIPE_noblock_obuf_3_2_938_update_start__ps)
          // RAW reenables for noblock_obuf_3_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_2_938_sample_completed__ps <-& (RPIPE_noblock_obuf_3_2_938_sample_completed_)
          RPIPE_noblock_obuf_3_2_938_update_completed__ps <-& (RPIPE_noblock_obuf_3_2_938_update_completed_)
          $phisequencer [ phi_stmt_934_phi_seq] : 
          phi_stmt_934_entry_trigger R_ZERO_33_936_sample_start__ps R_ZERO_33_936_sample_completed__ps R_ZERO_33_936_update_start__ps R_ZERO_33_936_update_completed__ps phi_stmt_934_loopback_trigger RPIPE_noblock_obuf_3_2_938_sample_start__ps RPIPE_noblock_obuf_3_2_938_sample_completed__ps RPIPE_noblock_obuf_3_2_938_update_start__ps RPIPE_noblock_obuf_3_2_938_update_completed__ps :
          phi_stmt_934_sample_start__ps phi_stmt_934_sample_completed__ps phi_stmt_934_update_start__ps phi_stmt_934_update_completed__ps :
          phi_stmt_934_entry_sample_req_ps phi_stmt_934_loopback_sample_req_ps : 
          phi_stmt_934_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_934
          // start:  PHI statement phi_stmt_939
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_939_sample_start_] 
          $T[phi_stmt_939_sample_completed_] 
          $T[phi_stmt_939_update_start_] 
          $T[phi_stmt_939_update_completed_] 
          $T[phi_stmt_939_sample_start__ps] 
          phi_stmt_939_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_939_sample_completed__ps] 
          phi_stmt_939_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_939_update_start__ps] 
          phi_stmt_939_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_939_update_completed__ps] 
          phi_stmt_939_update_completed_ <-& (phi_stmt_939_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_939_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_939_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_939_update_start_)
          $T[phi_stmt_939_loopback_trigger] 
          phi_stmt_939_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_939_loopback_sample_req] 
          $T[phi_stmt_939_loopback_sample_req_ps] 
          phi_stmt_939_loopback_sample_req <-& (phi_stmt_939_loopback_sample_req_ps)
          phi_stmt_939_loopback_sample_req &-> ($null)
          $T[phi_stmt_939_entry_trigger] 
          phi_stmt_939_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_939_entry_sample_req] 
          $T[phi_stmt_939_entry_sample_req_ps] 
          phi_stmt_939_entry_sample_req <-& (phi_stmt_939_entry_sample_req_ps)
          phi_stmt_939_entry_sample_req &-> ($null)
          phi_stmt_939_update_start_ o<-& (phi_stmt_939_update_completed_ 0)
          phi_stmt_939_sample_start_ o<-& (phi_stmt_939_sample_completed_ 1)
          $T[phi_stmt_939_merged_reqs] 
          $T[phi_stmt_939_phi_mux_ack] 
          $T[phi_stmt_939_phi_mux_ack_ps] 
          phi_stmt_939_phi_mux_ack_ps <-& (phi_stmt_939_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_939_update_completed_)
          $T[R_ZERO_33_941_sample_start__ps] 
          $T[R_ZERO_33_941_sample_completed__ps] 
          $T[R_ZERO_33_941_update_start__ps] 
          $T[R_ZERO_33_941_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_941_sample_start_] 
          $T[R_ZERO_33_941_sample_completed_] 
          R_ZERO_33_941_sample_completed_ <-& (R_ZERO_33_941_sample_start_)
          $T[R_ZERO_33_941_update_start_] 
          $T [R_ZERO_33_941_update_completed_] $delay 
          R_ZERO_33_941_update_completed_ <-& (R_ZERO_33_941_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_941_sample_start_ <-& (R_ZERO_33_941_sample_start__ps)
          R_ZERO_33_941_update_start_ <-& (R_ZERO_33_941_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_941_sample_completed__ps <-& (R_ZERO_33_941_sample_completed_)
          R_ZERO_33_941_update_completed__ps <-& (R_ZERO_33_941_update_completed_)
          $T[RPIPE_noblock_obuf_4_2_943_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_2_943_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_2_943_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_2_943_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_2
          $T[RPIPE_noblock_obuf_4_2_943_sample_start_] 
          $T[RPIPE_noblock_obuf_4_2_943_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_2_943_update_start_] 
          $T[RPIPE_noblock_obuf_4_2_943_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_2_943 with guard R_read_from_4_942
          // root phi_stmt_939 not in visited_elements
          // root phi_stmt_944 not in visited_elements
          // root phi_stmt_948 not in visited_elements
          // root phi_stmt_952 not in visited_elements
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_2_943_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_2_943_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_2_943_sample_start_ &-> (RPIPE_noblock_obuf_4_2_943_Sample)
          RPIPE_noblock_obuf_4_2_943_sample_completed_ <-& (RPIPE_noblock_obuf_4_2_943_Sample)
          RPIPE_noblock_obuf_4_2_943_update_start_ <-& (RPIPE_noblock_obuf_4_2_943_sample_completed_)
          RPIPE_noblock_obuf_4_2_943_update_start_ &-> (RPIPE_noblock_obuf_4_2_943_Update)
          RPIPE_noblock_obuf_4_2_943_update_completed_ <-& (RPIPE_noblock_obuf_4_2_943_Update)
          RPIPE_noblock_obuf_4_2_943_sample_start_ o<-& (RPIPE_noblock_obuf_4_2_943_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_2_943_sample_start_ <-& (RPIPE_noblock_obuf_4_2_943_sample_start__ps)
          RPIPE_noblock_obuf_4_2_943_update_start_ <-& (RPIPE_noblock_obuf_4_2_943_update_start__ps)
          // RAW reenables for noblock_obuf_4_2
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_2_943_sample_completed__ps <-& (RPIPE_noblock_obuf_4_2_943_sample_completed_)
          RPIPE_noblock_obuf_4_2_943_update_completed__ps <-& (RPIPE_noblock_obuf_4_2_943_update_completed_)
          $phisequencer [ phi_stmt_939_phi_seq] : 
          phi_stmt_939_entry_trigger R_ZERO_33_941_sample_start__ps R_ZERO_33_941_sample_completed__ps R_ZERO_33_941_update_start__ps R_ZERO_33_941_update_completed__ps phi_stmt_939_loopback_trigger RPIPE_noblock_obuf_4_2_943_sample_start__ps RPIPE_noblock_obuf_4_2_943_sample_completed__ps RPIPE_noblock_obuf_4_2_943_update_start__ps RPIPE_noblock_obuf_4_2_943_update_completed__ps :
          phi_stmt_939_sample_start__ps phi_stmt_939_sample_completed__ps phi_stmt_939_update_start__ps phi_stmt_939_update_completed__ps :
          phi_stmt_939_entry_sample_req_ps phi_stmt_939_loopback_sample_req_ps : 
          phi_stmt_939_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_939
          // start:  PHI statement phi_stmt_944
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_944_sample_start_] 
          $T[phi_stmt_944_sample_completed_] 
          $T[phi_stmt_944_update_start_] 
          $T[phi_stmt_944_update_completed_] 
          $T[phi_stmt_944_sample_start__ps] 
          phi_stmt_944_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_944_sample_completed__ps] 
          phi_stmt_944_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_944_update_start__ps] 
          phi_stmt_944_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_944_update_completed__ps] 
          phi_stmt_944_update_completed_ <-& (phi_stmt_944_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_944_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_944_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_944_update_start_)
          $T[phi_stmt_944_loopback_trigger] 
          phi_stmt_944_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_944_loopback_sample_req] 
          $T[phi_stmt_944_loopback_sample_req_ps] 
          phi_stmt_944_loopback_sample_req <-& (phi_stmt_944_loopback_sample_req_ps)
          phi_stmt_944_loopback_sample_req &-> ($null)
          $T[phi_stmt_944_entry_trigger] 
          phi_stmt_944_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_944_entry_sample_req] 
          $T[phi_stmt_944_entry_sample_req_ps] 
          phi_stmt_944_entry_sample_req <-& (phi_stmt_944_entry_sample_req_ps)
          phi_stmt_944_entry_sample_req &-> ($null)
          phi_stmt_944_update_start_ o<-& (phi_stmt_944_update_completed_ 0)
          phi_stmt_944_sample_start_ o<-& (phi_stmt_944_sample_completed_ 1)
          $T[phi_stmt_944_merged_reqs] 
          $T[phi_stmt_944_phi_mux_ack] 
          $T[phi_stmt_944_phi_mux_ack_ps] 
          phi_stmt_944_phi_mux_ack_ps <-& (phi_stmt_944_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_944_update_completed_)
          $T[R_ZERO_3_946_sample_start__ps] 
          $T[R_ZERO_3_946_sample_completed__ps] 
          $T[R_ZERO_3_946_update_start__ps] 
          $T[R_ZERO_3_946_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_946_sample_start_] 
          $T[R_ZERO_3_946_sample_completed_] 
          R_ZERO_3_946_sample_completed_ <-& (R_ZERO_3_946_sample_start_)
          $T[R_ZERO_3_946_update_start_] 
          $T [R_ZERO_3_946_update_completed_] $delay 
          R_ZERO_3_946_update_completed_ <-& (R_ZERO_3_946_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_946_sample_start_ <-& (R_ZERO_3_946_sample_start__ps)
          R_ZERO_3_946_update_start_ <-& (R_ZERO_3_946_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_946_sample_completed__ps <-& (R_ZERO_3_946_sample_completed_)
          R_ZERO_3_946_update_completed__ps <-& (R_ZERO_3_946_update_completed_)
          $T[R_next_active_packet_947_sample_start__ps] 
          $T[R_next_active_packet_947_sample_completed__ps] 
          $T[R_next_active_packet_947_update_start__ps] 
          $T[R_next_active_packet_947_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_947_sample_start_] 
          $T[R_next_active_packet_947_sample_completed_] 
          $T[R_next_active_packet_947_update_start_] 
          $T[R_next_active_packet_947_update_completed_] 
          ;;[R_next_active_packet_947_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_947_sample_start_ &-> (R_next_active_packet_947_Sample)
          R_next_active_packet_947_sample_completed_ <-& (R_next_active_packet_947_Sample)
          ;;[R_next_active_packet_947_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_947_update_start_ &-> (R_next_active_packet_947_Update)
          R_next_active_packet_947_update_completed_ <-& (R_next_active_packet_947_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_947_sample_start_ <-& (R_next_active_packet_947_sample_start__ps)
          R_next_active_packet_947_update_start_ <-& (R_next_active_packet_947_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_947_sample_completed__ps <-& (R_next_active_packet_947_sample_completed_)
          R_next_active_packet_947_update_completed__ps <-& (R_next_active_packet_947_update_completed_)
          $phisequencer [ phi_stmt_944_phi_seq] : 
          phi_stmt_944_entry_trigger R_ZERO_3_946_sample_start__ps R_ZERO_3_946_sample_completed__ps R_ZERO_3_946_update_start__ps R_ZERO_3_946_update_completed__ps phi_stmt_944_loopback_trigger R_next_active_packet_947_sample_start__ps R_next_active_packet_947_sample_completed__ps R_next_active_packet_947_update_start__ps R_next_active_packet_947_update_completed__ps :
          phi_stmt_944_sample_start__ps phi_stmt_944_sample_completed__ps phi_stmt_944_update_start__ps phi_stmt_944_update_completed__ps :
          phi_stmt_944_entry_sample_req_ps phi_stmt_944_loopback_sample_req_ps : 
          phi_stmt_944_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_944
          // start:  PHI statement phi_stmt_948
          // 			$phi down_counter := 			  ZERO_16 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_948_sample_start_] 
          $T[phi_stmt_948_sample_completed_] 
          $T[phi_stmt_948_update_start_] 
          $T[phi_stmt_948_update_completed_] 
          $T[phi_stmt_948_sample_start__ps] 
          phi_stmt_948_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_948_sample_completed__ps] 
          phi_stmt_948_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_948_update_start__ps] 
          phi_stmt_948_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_948_update_completed__ps] 
          phi_stmt_948_update_completed_ <-& (phi_stmt_948_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_948_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_948_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_948_update_start_)
          $T[phi_stmt_948_loopback_trigger] 
          phi_stmt_948_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_948_loopback_sample_req] 
          $T[phi_stmt_948_loopback_sample_req_ps] 
          phi_stmt_948_loopback_sample_req <-& (phi_stmt_948_loopback_sample_req_ps)
          phi_stmt_948_loopback_sample_req &-> ($null)
          $T[phi_stmt_948_entry_trigger] 
          phi_stmt_948_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_948_entry_sample_req] 
          $T[phi_stmt_948_entry_sample_req_ps] 
          phi_stmt_948_entry_sample_req <-& (phi_stmt_948_entry_sample_req_ps)
          phi_stmt_948_entry_sample_req &-> ($null)
          phi_stmt_948_update_start_ o<-& (phi_stmt_948_update_completed_ 0)
          phi_stmt_948_sample_start_ o<-& (phi_stmt_948_sample_completed_ 1)
          $T[phi_stmt_948_merged_reqs] 
          $T[phi_stmt_948_phi_mux_ack] 
          $T[phi_stmt_948_phi_mux_ack_ps] 
          phi_stmt_948_phi_mux_ack_ps <-& (phi_stmt_948_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_948_update_completed_)
          $T[R_ZERO_16_950_sample_start__ps] 
          $T[R_ZERO_16_950_sample_completed__ps] 
          $T[R_ZERO_16_950_update_start__ps] 
          $T[R_ZERO_16_950_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_16_950_sample_start_] 
          $T[R_ZERO_16_950_sample_completed_] 
          R_ZERO_16_950_sample_completed_ <-& (R_ZERO_16_950_sample_start_)
          $T[R_ZERO_16_950_update_start_] 
          $T [R_ZERO_16_950_update_completed_] $delay 
          R_ZERO_16_950_update_completed_ <-& (R_ZERO_16_950_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_16_950_sample_start_ <-& (R_ZERO_16_950_sample_start__ps)
          R_ZERO_16_950_update_start_ <-& (R_ZERO_16_950_update_start__ps)
          // Phi complete dependency.
          R_ZERO_16_950_sample_completed__ps <-& (R_ZERO_16_950_sample_completed_)
          R_ZERO_16_950_update_completed__ps <-& (R_ZERO_16_950_update_completed_)
          $T[R_next_down_counter_951_sample_start__ps] 
          $T[R_next_down_counter_951_sample_completed__ps] 
          $T[R_next_down_counter_951_update_start__ps] 
          $T[R_next_down_counter_951_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_951_sample_start_] 
          $T[R_next_down_counter_951_sample_completed_] 
          $T[R_next_down_counter_951_update_start_] 
          $T[R_next_down_counter_951_update_completed_] 
          ;;[R_next_down_counter_951_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_951_sample_start_ &-> (R_next_down_counter_951_Sample)
          R_next_down_counter_951_sample_completed_ <-& (R_next_down_counter_951_Sample)
          ;;[R_next_down_counter_951_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_951_update_start_ &-> (R_next_down_counter_951_Update)
          R_next_down_counter_951_update_completed_ <-& (R_next_down_counter_951_Update)
          // RAW reenables for next_down_counter
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_951_sample_start_ <-& (R_next_down_counter_951_sample_start__ps)
          R_next_down_counter_951_update_start_ <-& (R_next_down_counter_951_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_951_sample_completed__ps <-& (R_next_down_counter_951_sample_completed_)
          R_next_down_counter_951_update_completed__ps <-& (R_next_down_counter_951_update_completed_)
          $phisequencer [ phi_stmt_948_phi_seq] : 
          phi_stmt_948_entry_trigger R_ZERO_16_950_sample_start__ps R_ZERO_16_950_sample_completed__ps R_ZERO_16_950_update_start__ps R_ZERO_16_950_update_completed__ps phi_stmt_948_loopback_trigger R_next_down_counter_951_sample_start__ps R_next_down_counter_951_sample_completed__ps R_next_down_counter_951_update_start__ps R_next_down_counter_951_update_completed__ps :
          phi_stmt_948_sample_start__ps phi_stmt_948_sample_completed__ps phi_stmt_948_update_start__ps phi_stmt_948_update_completed__ps :
          phi_stmt_948_entry_sample_req_ps phi_stmt_948_loopback_sample_req_ps : 
          phi_stmt_948_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_948
          // start:  PHI statement phi_stmt_952
          // 			$phi pkt_with_priority := 			  1  $on   $entry 			  next_pkt_with_priority $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_952_sample_start_] 
          $T[phi_stmt_952_sample_completed_] 
          $T[phi_stmt_952_update_start_] 
          $T[phi_stmt_952_update_completed_] 
          $T[phi_stmt_952_sample_start__ps] 
          phi_stmt_952_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_952_sample_completed__ps] 
          phi_stmt_952_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_952_update_start__ps] 
          phi_stmt_952_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_952_update_completed__ps] 
          phi_stmt_952_update_completed_ <-& (phi_stmt_952_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_952_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_952_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_952_update_start_)
          $T[phi_stmt_952_loopback_trigger] 
          phi_stmt_952_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_952_loopback_sample_req] 
          $T[phi_stmt_952_loopback_sample_req_ps] 
          phi_stmt_952_loopback_sample_req <-& (phi_stmt_952_loopback_sample_req_ps)
          phi_stmt_952_loopback_sample_req &-> ($null)
          $T[phi_stmt_952_entry_trigger] 
          phi_stmt_952_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_952_entry_sample_req] 
          $T[phi_stmt_952_entry_sample_req_ps] 
          phi_stmt_952_entry_sample_req <-& (phi_stmt_952_entry_sample_req_ps)
          phi_stmt_952_entry_sample_req &-> ($null)
          phi_stmt_952_update_start_ o<-& (phi_stmt_952_update_completed_ 0)
          phi_stmt_952_sample_start_ o<-& (phi_stmt_952_sample_completed_ 1)
          $T[phi_stmt_952_merged_reqs] 
          $T[phi_stmt_952_phi_mux_ack] 
          $T[phi_stmt_952_phi_mux_ack_ps] 
          phi_stmt_952_phi_mux_ack_ps <-& (phi_stmt_952_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_952_update_completed_)
          $T[konst_954_sample_start__ps] 
          $T[konst_954_sample_completed__ps] 
          $T[konst_954_update_start__ps] 
          $T[konst_954_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_954_sample_start_] 
          $T[konst_954_sample_completed_] 
          konst_954_sample_completed_ <-& (konst_954_sample_start_)
          $T[konst_954_update_start_] 
          $T [konst_954_update_completed_] $delay 
          konst_954_update_completed_ <-& (konst_954_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_954_sample_start_ <-& (konst_954_sample_start__ps)
          konst_954_update_start_ <-& (konst_954_update_start__ps)
          // Phi complete dependency.
          konst_954_sample_completed__ps <-& (konst_954_sample_completed_)
          konst_954_update_completed__ps <-& (konst_954_update_completed_)
          $T[R_next_pkt_with_priority_955_sample_start__ps] 
          $T[R_next_pkt_with_priority_955_sample_completed__ps] 
          $T[R_next_pkt_with_priority_955_update_start__ps] 
          $T[R_next_pkt_with_priority_955_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_pkt_with_priority_955_sample_start_] 
          $T[R_next_pkt_with_priority_955_sample_completed_] 
          $T[R_next_pkt_with_priority_955_update_start_] 
          $T[R_next_pkt_with_priority_955_update_completed_] 
          ;;[R_next_pkt_with_priority_955_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_pkt_with_priority_955_sample_start_ &-> (R_next_pkt_with_priority_955_Sample)
          R_next_pkt_with_priority_955_sample_completed_ <-& (R_next_pkt_with_priority_955_Sample)
          ;;[R_next_pkt_with_priority_955_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_pkt_with_priority_955_update_start_ &-> (R_next_pkt_with_priority_955_Update)
          R_next_pkt_with_priority_955_update_completed_ <-& (R_next_pkt_with_priority_955_Update)
          // RAW reenables for next_pkt_with_priority
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_pkt_with_priority_955_sample_start_ <-& (R_next_pkt_with_priority_955_sample_start__ps)
          R_next_pkt_with_priority_955_update_start_ <-& (R_next_pkt_with_priority_955_update_start__ps)
          // Phi complete dependency.
          R_next_pkt_with_priority_955_sample_completed__ps <-& (R_next_pkt_with_priority_955_sample_completed_)
          R_next_pkt_with_priority_955_update_completed__ps <-& (R_next_pkt_with_priority_955_update_completed_)
          $phisequencer [ phi_stmt_952_phi_seq] : 
          phi_stmt_952_entry_trigger konst_954_sample_start__ps konst_954_sample_completed__ps konst_954_update_start__ps konst_954_update_completed__ps phi_stmt_952_loopback_trigger R_next_pkt_with_priority_955_sample_start__ps R_next_pkt_with_priority_955_sample_completed__ps R_next_pkt_with_priority_955_update_start__ps R_next_pkt_with_priority_955_update_completed__ps :
          phi_stmt_952_sample_start__ps phi_stmt_952_sample_completed__ps phi_stmt_952_update_start__ps phi_stmt_952_update_completed__ps :
          phi_stmt_952_entry_sample_req_ps phi_stmt_952_loopback_sample_req_ps : 
          phi_stmt_952_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_952
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 300
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 301
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 302
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 303
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 305
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_with_priority
          // WAR dependency: Read: next_pkt_with_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_with_priority
          // start:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  file .Aa/switch4x4.opt.aa, line 306
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // pkt_with_priority
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_pkt_with_priority
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_with_priority
          // WAR dependency: Read: next_pkt_with_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_with_priority
          // end:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          // start: WAR dependencies for valid_active_pkt_length
          // done: WAR dependencies for valid_active_pkt_length
          // start:  			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 307
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 23 8 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 23 8 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 23 8 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 23 8 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) valid_active_pkt_length
          // start: WAR dependencies for valid_active_pkt_length
          // done: WAR dependencies for valid_active_pkt_length
          // end:  			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 308
          // volatile! 
          // Source expression
          // ((next_active_packet != 0 ) & (down_counter == 0 ))
          // (next_active_packet != 0 )
          // next_active_packet
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 309
          // volatile! 
          // Source expression
          // ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // (valid_active_pkt_length - 1 )
          // valid_active_pkt_length
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 310
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 311
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 312
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 313
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 314
          // volatile! 
          // Source expression
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 315
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch4x4.opt.aa, line 316
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_2
          $T[WPIPE_out_data_2_1167_sample_start_] 
          $T[WPIPE_out_data_2_1167_sample_completed_] 
          $T[WPIPE_out_data_2_1167_update_start_] 
          $T[WPIPE_out_data_2_1167_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_2_1167 with guard R_send_flag_1166
          WPIPE_out_data_2_1167_sample_start_ <-& (phi_stmt_924_update_completed_)
          WPIPE_out_data_2_1167_sample_start_ <-& (phi_stmt_929_update_completed_)
          WPIPE_out_data_2_1167_sample_start_ <-& (phi_stmt_934_update_completed_)
          WPIPE_out_data_2_1167_sample_start_ <-& (phi_stmt_939_update_completed_)
          WPIPE_out_data_2_1167_sample_start_ <-& (phi_stmt_944_update_completed_)
          WPIPE_out_data_2_1167_sample_start_ <-& (phi_stmt_948_update_completed_)
          WPIPE_out_data_2_1167_sample_start_ <-& (phi_stmt_952_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_924_update_start_ o<-& (WPIPE_out_data_2_1167_sample_completed_ 0)
          phi_stmt_929_update_start_ o<-& (WPIPE_out_data_2_1167_sample_completed_ 0)
          phi_stmt_934_update_start_ o<-& (WPIPE_out_data_2_1167_sample_completed_ 0)
          phi_stmt_939_update_start_ o<-& (WPIPE_out_data_2_1167_sample_completed_ 0)
          phi_stmt_944_update_start_ o<-& (WPIPE_out_data_2_1167_sample_completed_ 0)
          phi_stmt_948_update_start_ o<-& (WPIPE_out_data_2_1167_sample_completed_ 0)
          phi_stmt_952_update_start_ o<-& (WPIPE_out_data_2_1167_sample_completed_ 0)
          ;;[WPIPE_out_data_2_1167_Sample] 
          {
            // pipe write sample-start out_data_2
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_2_1167_Update] 
          {
            // pipe write update (complete) out_data_2
            $T [req] $T [ack] 
          }
          WPIPE_out_data_2_1167_sample_start_ &-> (WPIPE_out_data_2_1167_Sample)
          WPIPE_out_data_2_1167_sample_completed_ <-& (WPIPE_out_data_2_1167_Sample)
          WPIPE_out_data_2_1167_update_start_ <-& (WPIPE_out_data_2_1167_sample_completed_)
          WPIPE_out_data_2_1167_update_start_ &-> (WPIPE_out_data_2_1167_Update)
          WPIPE_out_data_2_1167_update_completed_ <-& (WPIPE_out_data_2_1167_Update)
          WPIPE_out_data_2_1167_sample_start_ o<-& (WPIPE_out_data_2_1167_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_2_1167_sample_start_
          WPIPE_out_data_2_1167_sample_start_ <-& (phi_stmt_924_update_completed_)
          WPIPE_out_data_2_1167_sample_start_ <-& (phi_stmt_929_update_completed_)
          WPIPE_out_data_2_1167_sample_start_ <-& (phi_stmt_934_update_completed_)
          WPIPE_out_data_2_1167_sample_start_ <-& (phi_stmt_939_update_completed_)
          WPIPE_out_data_2_1167_sample_start_ <-& (phi_stmt_944_update_completed_)
          WPIPE_out_data_2_1167_sample_start_ <-& (phi_stmt_948_update_completed_)
          WPIPE_out_data_2_1167_sample_start_ <-& (phi_stmt_952_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_2_1167_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_924_update_start_ o<-& (WPIPE_out_data_2_1167_sample_completed_ 0)
          phi_stmt_929_update_start_ o<-& (WPIPE_out_data_2_1167_sample_completed_ 0)
          phi_stmt_934_update_start_ o<-& (WPIPE_out_data_2_1167_sample_completed_ 0)
          phi_stmt_939_update_start_ o<-& (WPIPE_out_data_2_1167_sample_completed_ 0)
          phi_stmt_944_update_start_ o<-& (WPIPE_out_data_2_1167_sample_completed_ 0)
          phi_stmt_948_update_start_ o<-& (WPIPE_out_data_2_1167_sample_completed_ 0)
          phi_stmt_952_update_start_ o<-& (WPIPE_out_data_2_1167_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_2_2
          // read-dependencies for pipe noblock_obuf_2_2
          // write-dependencies for pipe noblock_obuf_2_2
          // signal write dependencies for noblock_obuf_2_2
          // pipe read/write dependencies for pipe noblock_obuf_1_2
          // read-dependencies for pipe noblock_obuf_1_2
          // write-dependencies for pipe noblock_obuf_1_2
          // signal write dependencies for noblock_obuf_1_2
          // pipe read/write dependencies for pipe noblock_obuf_3_2
          // read-dependencies for pipe noblock_obuf_3_2
          // write-dependencies for pipe noblock_obuf_3_2
          // signal write dependencies for noblock_obuf_3_2
          // pipe read/write dependencies for pipe noblock_obuf_4_2
          // read-dependencies for pipe noblock_obuf_4_2
          // write-dependencies for pipe noblock_obuf_4_2
          // signal write dependencies for noblock_obuf_4_2
          // pipe read/write dependencies for pipe out_data_2
          // read-dependencies for pipe out_data_2
          // write-dependencies for pipe out_data_2
          // signal write dependencies for out_data_2
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_922__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_922_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_922__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_922_loop_body : condition_evaluated
        $bind do_while_stmt_922__entry__  => do_while_stmt_922_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_922_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_922__exit__)
      }
      do_while_stmt_922__entry__ |-> (do_while_stmt_922)
      do_while_stmt_922__exit__ <-| (do_while_stmt_922)
      do_while_stmt_922__entry__ <-| (branch_block_stmt_921__entry__)
      do_while_stmt_922__exit__ |-> (branch_block_stmt_921__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_2_Daemon%loop%
    //  file .Aa/switch4x4.opt.aa, line 284
    // constant-object-declarations for block %outputPort_2_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 280
    // constant-object-declarations for block %outputPort_2_Daemon
    //  file .Aa/switch4x4.opt.aa, line 275
    // constant-declarations for block %outputPort_2_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 280
    // do-while statement  
    //  file .Aa/switch4x4.opt.aa, line 282
    // 1 
    $constant $W[konst_1180_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_2_Daemon%loop%
    //  file .Aa/switch4x4.opt.aa, line 284
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 285
    // ZERO_33
    $constant $W[R_ZERO_33_926_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 287
    // ZERO_33
    $constant $W[R_ZERO_33_931_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 289
    // ZERO_33
    $constant $W[R_ZERO_33_936_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 291
    // ZERO_33
    $constant $W[R_ZERO_33_941_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 293
    // ZERO_3
    $constant $W[R_ZERO_3_946_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_16 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 295
    // ZERO_16
    $constant $W[R_ZERO_16_950_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_with_priority := 			  1  $on   $entry 			  next_pkt_with_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 297
    // 1 
    $constant $W[konst_954_wire_constant] : $int<3> := _b001// 1
    // 32 
    $constant $W[konst_959_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_964_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_969_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_974_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_991_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_994_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_997_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1000_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1004_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1007_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1010_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1013_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
    //  file .Aa/switch4x4.opt.aa, line 306
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
    // 1 
    $constant $W[konst_1030_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1034_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
    // 2 
    $constant $W[konst_1037_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1041_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
    // 3 
    $constant $W[konst_1045_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1049_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
    // 4 
    $constant $W[konst_1052_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1056_wire_constant] : $int<16> := _b0000000000000000// 0
    // 0 
    $constant $W[konst_1063_wire_constant] : $int<3> := _b000// 0
    // 0 
    $constant $W[konst_1066_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 1 
    $constant $W[konst_1073_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_1077_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_1087_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_1095_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_1103_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_1111_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  ) 
    // 1 
    $constant $W[konst_1117_wire_constant] : $int<3> := _b001// 1
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
    // 2 
    $constant $W[konst_1122_wire_constant] : $int<3> := _b010// 2
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
    // 3 
    $constant $W[konst_1127_wire_constant] : $int<3> := _b011// 3
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1139_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1142_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1145_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1148_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1152_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1155_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1158_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1161_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_2_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 280
    // do-while statement  
    //  file .Aa/switch4x4.opt.aa, line 282
    // merge-statement  
    //  file .Aa/switch4x4.opt.aa, line 284
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 285
    // noblock_obuf_1_2
    $W[RPIPE_noblock_obuf_1_2_928_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_924] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 287
    // noblock_obuf_2_2
    $W[RPIPE_noblock_obuf_2_2_933_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_929] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 289
    // noblock_obuf_3_2
    $W[RPIPE_noblock_obuf_3_2_938_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_934] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 291
    // noblock_obuf_4_2
    $W[RPIPE_noblock_obuf_4_2_943_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_939] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 293
    $W[next_active_packet_1027_947_buffered] : $int<3>
    // active_packet
    $W[active_packet_944] : $int<3>
    // 			$phi down_counter := 			  ZERO_16 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 295
    $W[next_down_counter_1082_951_buffered] : $int<16>
    // down_counter
    $W[down_counter_948] : $int<16>
    // 			$phi pkt_with_priority := 			  1  $on   $entry 			  next_pkt_with_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 297
    $W[next_pkt_with_priority_1027_955_buffered] : $int<3>
    // pkt_with_priority
    $W[pkt_with_priority_952] : $int<3>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 300
    // p1_valid
    $W[p1_valid_961] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 301
    // p2_valid
    $W[p2_valid_966] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 302
    // p3_valid
    $W[p3_valid_971] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 303
    // p4_valid
    $W[p4_valid_976] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 305
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_992_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_995_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_998_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1001_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1002_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1005_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1008_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1011_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1014_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1015_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_1017] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
    //  file .Aa/switch4x4.opt.aa, line 306
    // next_active_packet
    $W[next_active_packet_1027] : $int<3>
    // next_pkt_with_priority
    $W[next_pkt_with_priority_1027] : $int<3>
    // 			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 307
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1031_wire] : $int<1>
    // ( $slice pkt_1_e_word 23 8 ) 
    $intermediate $W[slice_1033_wire] : $int<16>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
    $intermediate $W[MUX_1035_wire] : $int<16>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1038_wire] : $int<1>
    // ( $slice pkt_2_e_word 23 8 ) 
    $intermediate $W[slice_1040_wire] : $int<16>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
    $intermediate $W[MUX_1042_wire] : $int<16>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) )
    $intermediate $W[OR_u16_u16_1043_wire] : $int<16>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1046_wire] : $int<1>
    // ( $slice pkt_3_e_word 23 8 ) 
    $intermediate $W[slice_1048_wire] : $int<16>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
    $intermediate $W[MUX_1050_wire] : $int<16>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1053_wire] : $int<1>
    // ( $slice pkt_4_e_word 23 8 ) 
    $intermediate $W[slice_1055_wire] : $int<16>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
    $intermediate $W[MUX_1057_wire] : $int<16>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )
    $intermediate $W[OR_u16_u16_1058_wire] : $int<16>
    // valid_active_pkt_length
    $W[valid_active_pkt_length_1060] : $int<16>
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 308
    // (next_active_packet != 0 )
    $intermediate $W[NEQ_u3_u1_1064_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u16_u1_1067_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_1069] : $int<1>
    // 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 309
    // (valid_active_pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_1074_wire] : $int<16>
    // (down_counter - 1 )
    $intermediate $W[SUB_u16_u16_1078_wire] : $int<16>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_1080_wire] : $int<16>
    // next_down_counter
    $W[next_down_counter_1082] : $int<16>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 310
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_1085_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1088_wire] : $int<1>
    // read_from_1
    $W[read_from_1_1090] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 311
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_1093_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1096_wire] : $int<1>
    // read_from_2
    $W[read_from_2_1098] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 312
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_1101_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1104_wire] : $int<1>
    // read_from_3
    $W[read_from_3_1106] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 313
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_1109_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1112_wire] : $int<1>
    // read_from_4
    $W[read_from_4_1114] : $int<1>
    // 			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 314
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1118_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_1120_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1123_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_1125_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1128_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_1130_wire] : $int<32>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_1132_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
    $intermediate $W[MUX_1133_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
    $intermediate $W[MUX_1134_wire] : $int<32>
    // data_to_out
    $W[data_to_out_1136] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 315
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1140_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1143_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1146_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1149_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1150_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1153_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1156_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1159_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1162_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1163_wire] : $int<1>
    // send_flag
    $W[send_flag_1165] : $int<1>
    // 			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch4x4.opt.aa, line 316
    // out_data_2
    // datapath-instances for block %outputPort_2_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 280
    // datapath-instances for do-while  
    //  file .Aa/switch4x4.opt.aa, line 282
    ==0? [do_while_stmt_922_branch] (konst_1180_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch4x4.opt.aa, line 284
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 285
    // noblock_obuf_1_2
    $ioport $in [RPIPE_noblock_obuf_1_2_928_inst] (noblock_obuf_1_2) (RPIPE_noblock_obuf_1_2_928_wire) $guard ( read_from_1_1090 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_2_928_inst RPIPE_noblock_obuf_1_2_928_wire 1
    # $phi [phi_stmt_924] (R_ZERO_33_926_wire_constant RPIPE_noblock_obuf_1_2_928_wire) ( pkt_1_e_word_924 ) $fullrate
    // $buffering  $out phi_stmt_924 pkt_1_e_word_924 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 287
    // noblock_obuf_2_2
    $ioport $in [RPIPE_noblock_obuf_2_2_933_inst] (noblock_obuf_2_2) (RPIPE_noblock_obuf_2_2_933_wire) $guard ( read_from_2_1098 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_2_933_inst RPIPE_noblock_obuf_2_2_933_wire 1
    # $phi [phi_stmt_929] (R_ZERO_33_931_wire_constant RPIPE_noblock_obuf_2_2_933_wire) ( pkt_2_e_word_929 ) $fullrate
    // $buffering  $out phi_stmt_929 pkt_2_e_word_929 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 289
    // noblock_obuf_3_2
    $ioport $in [RPIPE_noblock_obuf_3_2_938_inst] (noblock_obuf_3_2) (RPIPE_noblock_obuf_3_2_938_wire) $guard ( read_from_3_1106 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_2_938_inst RPIPE_noblock_obuf_3_2_938_wire 1
    # $phi [phi_stmt_934] (R_ZERO_33_936_wire_constant RPIPE_noblock_obuf_3_2_938_wire) ( pkt_3_e_word_934 ) $fullrate
    // $buffering  $out phi_stmt_934 pkt_3_e_word_934 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_2 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 291
    // noblock_obuf_4_2
    $ioport $in [RPIPE_noblock_obuf_4_2_943_inst] (noblock_obuf_4_2) (RPIPE_noblock_obuf_4_2_943_wire) $guard ( read_from_4_1114 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_2_943_inst RPIPE_noblock_obuf_4_2_943_wire 1
    # $phi [phi_stmt_939] (R_ZERO_33_941_wire_constant RPIPE_noblock_obuf_4_2_943_wire) ( pkt_4_e_word_939 ) $fullrate
    // $buffering  $out phi_stmt_939 pkt_4_e_word_939 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 293
    # := [next_active_packet_1027_947_buf] (next_active_packet_1027) (next_active_packet_1027_947_buffered)     $fullrate
    $buffering $out next_active_packet_1027_947_buf next_active_packet_1027_947_buffered  1
    # $phi [phi_stmt_944] (R_ZERO_3_946_wire_constant next_active_packet_1027_947_buffered) ( active_packet_944 ) $fullrate
    // $buffering  $out phi_stmt_944 active_packet_944 2
    // 			$phi down_counter := 			  ZERO_16 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 295
    # := [next_down_counter_1082_951_buf] (next_down_counter_1082) (next_down_counter_1082_951_buffered)     $fullrate
    $buffering $out next_down_counter_1082_951_buf next_down_counter_1082_951_buffered  1
    # $phi [phi_stmt_948] (R_ZERO_16_950_wire_constant next_down_counter_1082_951_buffered) ( down_counter_948 ) $fullrate
    // $buffering  $out phi_stmt_948 down_counter_948 2
    // 			$phi pkt_with_priority := 			  1  $on   $entry 			  next_pkt_with_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 297
    # := [next_pkt_with_priority_1027_955_buf] (next_pkt_with_priority_1027) (next_pkt_with_priority_1027_955_buffered)     $fullrate
    $buffering $out next_pkt_with_priority_1027_955_buf next_pkt_with_priority_1027_955_buffered  1
    # $phi [phi_stmt_952] (konst_954_wire_constant next_pkt_with_priority_1027_955_buffered) ( pkt_with_priority_952 ) $fullrate
    // $buffering  $out phi_stmt_952 pkt_with_priority_952 2
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 300
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_960_inst] (pkt_1_e_word_924 konst_959_wire_constant) (p1_valid_961)   $flowthrough 
    $delay BITSEL_u33_u1_960_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 301
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_965_inst] (pkt_2_e_word_929 konst_964_wire_constant) (p2_valid_966)   $flowthrough 
    $delay BITSEL_u33_u1_965_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 302
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_970_inst] (pkt_3_e_word_934 konst_969_wire_constant) (p3_valid_971)   $flowthrough 
    $delay BITSEL_u33_u1_970_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 303
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_975_inst] (pkt_4_e_word_939 konst_974_wire_constant) (p4_valid_976)   $flowthrough 
    $delay BITSEL_u33_u1_975_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 305
    // (active_packet == 1 )
    ==[EQ_u3_u1_992_inst] (active_packet_944 konst_991_wire_constant) (EQ_u3_u1_992_wire)   $flowthrough 
    $delay EQ_u3_u1_992_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_995_inst] (EQ_u3_u1_992_wire p1_valid_961 konst_994_wire_constant) (MUX_995_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_998_inst] (active_packet_944 konst_997_wire_constant) (EQ_u3_u1_998_wire)   $flowthrough 
    $delay EQ_u3_u1_998_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1001_inst] (EQ_u3_u1_998_wire p2_valid_966 konst_1000_wire_constant) (MUX_1001_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1002_inst] (MUX_995_wire MUX_1001_wire) (OR_u1_u1_1002_wire)   $flowthrough 
    $delay OR_u1_u1_1002_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_1005_inst] (active_packet_944 konst_1004_wire_constant) (EQ_u3_u1_1005_wire)   $flowthrough 
    $delay EQ_u3_u1_1005_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1008_inst] (EQ_u3_u1_1005_wire p3_valid_971 konst_1007_wire_constant) (MUX_1008_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_1011_inst] (active_packet_944 konst_1010_wire_constant) (EQ_u3_u1_1011_wire)   $flowthrough 
    $delay EQ_u3_u1_1011_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1014_inst] (EQ_u3_u1_1011_wire p4_valid_976 konst_1013_wire_constant) (MUX_1014_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1015_inst] (MUX_1008_wire MUX_1014_wire) (OR_u1_u1_1015_wire)   $flowthrough 
    $delay OR_u1_u1_1015_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1016_inst] (OR_u1_u1_1002_wire OR_u1_u1_1015_wire) (valid_active_pkt_word_read_1017)   $flowthrough 
    $delay OR_u1_u1_1016_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
    //  file .Aa/switch4x4.opt.aa, line 306
    $call [call_stmt_1027_call] $module prioritySelect(down_counter_948 active_packet_944 pkt_with_priority_952 p1_valid_961 p2_valid_966 p3_valid_971 p4_valid_976) (next_active_packet_1027 next_pkt_with_priority_1027)   $flowthrough $fullrate
    // 			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 307
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1031_inst] (next_active_packet_1027 konst_1030_wire_constant) (EQ_u3_u1_1031_wire)   $flowthrough 
    $delay EQ_u3_u1_1031_inst 0
    // ( $slice pkt_1_e_word 23 8 ) 
    [:] [slice_1033_inst] (pkt_1_e_word_924 23 8) (slice_1033_wire)  $flowthrough
    $delay slice_1033_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
    ? [MUX_1035_inst] (EQ_u3_u1_1031_wire slice_1033_wire konst_1034_wire_constant) (MUX_1035_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1038_inst] (next_active_packet_1027 konst_1037_wire_constant) (EQ_u3_u1_1038_wire)   $flowthrough 
    $delay EQ_u3_u1_1038_inst 0
    // ( $slice pkt_2_e_word 23 8 ) 
    [:] [slice_1040_inst] (pkt_2_e_word_929 23 8) (slice_1040_wire)  $flowthrough
    $delay slice_1040_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
    ? [MUX_1042_inst] (EQ_u3_u1_1038_wire slice_1040_wire konst_1041_wire_constant) (MUX_1042_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) )
    |[OR_u16_u16_1043_inst] (MUX_1035_wire MUX_1042_wire) (OR_u16_u16_1043_wire)   $flowthrough 
    $delay OR_u16_u16_1043_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1046_inst] (next_active_packet_1027 konst_1045_wire_constant) (EQ_u3_u1_1046_wire)   $flowthrough 
    $delay EQ_u3_u1_1046_inst 0
    // ( $slice pkt_3_e_word 23 8 ) 
    [:] [slice_1048_inst] (pkt_3_e_word_934 23 8) (slice_1048_wire)  $flowthrough
    $delay slice_1048_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
    ? [MUX_1050_inst] (EQ_u3_u1_1046_wire slice_1048_wire konst_1049_wire_constant) (MUX_1050_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1053_inst] (next_active_packet_1027 konst_1052_wire_constant) (EQ_u3_u1_1053_wire)   $flowthrough 
    $delay EQ_u3_u1_1053_inst 0
    // ( $slice pkt_4_e_word 23 8 ) 
    [:] [slice_1055_inst] (pkt_4_e_word_939 23 8) (slice_1055_wire)  $flowthrough
    $delay slice_1055_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
    ? [MUX_1057_inst] (EQ_u3_u1_1053_wire slice_1055_wire konst_1056_wire_constant) (MUX_1057_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )
    |[OR_u16_u16_1058_inst] (MUX_1050_wire MUX_1057_wire) (OR_u16_u16_1058_wire)   $flowthrough 
    $delay OR_u16_u16_1058_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) ))
    |[OR_u16_u16_1059_inst] (OR_u16_u16_1043_wire OR_u16_u16_1058_wire) (valid_active_pkt_length_1060)   $flowthrough 
    $delay OR_u16_u16_1059_inst 0
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 308
    // (next_active_packet != 0 )
    !=[NEQ_u3_u1_1064_inst] (next_active_packet_1027 konst_1063_wire_constant) (NEQ_u3_u1_1064_wire)   $flowthrough 
    $delay NEQ_u3_u1_1064_inst 0
    // (down_counter == 0 )
    ==[EQ_u16_u1_1067_inst] (down_counter_948 konst_1066_wire_constant) (EQ_u16_u1_1067_wire)   $flowthrough 
    $delay EQ_u16_u1_1067_inst 0
    // ((next_active_packet != 0 ) & (down_counter == 0 ))
    &[AND_u1_u1_1068_inst] (NEQ_u3_u1_1064_wire EQ_u16_u1_1067_wire) (started_new_packet_1069)   $flowthrough 
    $delay AND_u1_u1_1068_inst 0
    // 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 309
    // (valid_active_pkt_length - 1 )
    -[SUB_u16_u16_1074_inst] (valid_active_pkt_length_1060 konst_1073_wire_constant) (SUB_u16_u16_1074_wire)   $flowthrough 
    $delay SUB_u16_u16_1074_inst 0
    // (down_counter - 1 )
    -[SUB_u16_u16_1078_inst] (down_counter_948 konst_1077_wire_constant) (SUB_u16_u16_1078_wire)   $flowthrough 
    $delay SUB_u16_u16_1078_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_1080_inst] (valid_active_pkt_word_read_1017 SUB_u16_u16_1078_wire down_counter_948) (MUX_1080_wire)  $flowthrough
    // ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_1081_inst] (started_new_packet_1069 SUB_u16_u16_1074_wire MUX_1080_wire) (next_down_counter_1082)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 310
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_1085_inst] (p1_valid_961) (NOT_u1_u1_1085_wire)   $flowthrough
    $delay NOT_u1_u1_1085_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1088_inst] (next_active_packet_1027 konst_1087_wire_constant) (EQ_u3_u1_1088_wire)   $flowthrough 
    $delay EQ_u3_u1_1088_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_1089_inst] (NOT_u1_u1_1085_wire EQ_u3_u1_1088_wire) (read_from_1_1090)   $flowthrough 
    $delay OR_u1_u1_1089_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 311
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_1093_inst] (p2_valid_966) (NOT_u1_u1_1093_wire)   $flowthrough
    $delay NOT_u1_u1_1093_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1096_inst] (next_active_packet_1027 konst_1095_wire_constant) (EQ_u3_u1_1096_wire)   $flowthrough 
    $delay EQ_u3_u1_1096_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_1097_inst] (NOT_u1_u1_1093_wire EQ_u3_u1_1096_wire) (read_from_2_1098)   $flowthrough 
    $delay OR_u1_u1_1097_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 312
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_1101_inst] (p3_valid_971) (NOT_u1_u1_1101_wire)   $flowthrough
    $delay NOT_u1_u1_1101_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1104_inst] (next_active_packet_1027 konst_1103_wire_constant) (EQ_u3_u1_1104_wire)   $flowthrough 
    $delay EQ_u3_u1_1104_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_1105_inst] (NOT_u1_u1_1101_wire EQ_u3_u1_1104_wire) (read_from_3_1106)   $flowthrough 
    $delay OR_u1_u1_1105_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 313
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_1109_inst] (p4_valid_976) (NOT_u1_u1_1109_wire)   $flowthrough
    $delay NOT_u1_u1_1109_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1112_inst] (next_active_packet_1027 konst_1111_wire_constant) (EQ_u3_u1_1112_wire)   $flowthrough 
    $delay EQ_u3_u1_1112_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_1113_inst] (NOT_u1_u1_1109_wire EQ_u3_u1_1112_wire) (read_from_4_1114)   $flowthrough 
    $delay OR_u1_u1_1113_inst 0
    // 			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 314
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1118_inst] (next_active_packet_1027 konst_1117_wire_constant) (EQ_u3_u1_1118_wire)   $flowthrough 
    $delay EQ_u3_u1_1118_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_1120_inst] (pkt_1_e_word_924 31 0) (slice_1120_wire)  $flowthrough
    $delay slice_1120_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1123_inst] (next_active_packet_1027 konst_1122_wire_constant) (EQ_u3_u1_1123_wire)   $flowthrough 
    $delay EQ_u3_u1_1123_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_1125_inst] (pkt_2_e_word_929 31 0) (slice_1125_wire)  $flowthrough
    $delay slice_1125_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1128_inst] (next_active_packet_1027 konst_1127_wire_constant) (EQ_u3_u1_1128_wire)   $flowthrough 
    $delay EQ_u3_u1_1128_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_1130_inst] (pkt_3_e_word_934 31 0) (slice_1130_wire)  $flowthrough
    $delay slice_1130_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_1132_inst] (pkt_4_e_word_939 31 0) (slice_1132_wire)  $flowthrough
    $delay slice_1132_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
    ? [MUX_1133_inst] (EQ_u3_u1_1128_wire slice_1130_wire slice_1132_wire) (MUX_1133_wire)  $flowthrough
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
    ? [MUX_1134_inst] (EQ_u3_u1_1123_wire slice_1125_wire MUX_1133_wire) (MUX_1134_wire)  $flowthrough
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  ) 
    ? [MUX_1135_inst] (EQ_u3_u1_1118_wire slice_1120_wire MUX_1134_wire) (data_to_out_1136)  $flowthrough
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 315
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1140_inst] (next_active_packet_1027 konst_1139_wire_constant) (EQ_u3_u1_1140_wire)   $flowthrough 
    $delay EQ_u3_u1_1140_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1143_inst] (EQ_u3_u1_1140_wire p1_valid_961 konst_1142_wire_constant) (MUX_1143_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1146_inst] (next_active_packet_1027 konst_1145_wire_constant) (EQ_u3_u1_1146_wire)   $flowthrough 
    $delay EQ_u3_u1_1146_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1149_inst] (EQ_u3_u1_1146_wire p2_valid_966 konst_1148_wire_constant) (MUX_1149_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1150_inst] (MUX_1143_wire MUX_1149_wire) (OR_u1_u1_1150_wire)   $flowthrough 
    $delay OR_u1_u1_1150_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1153_inst] (next_active_packet_1027 konst_1152_wire_constant) (EQ_u3_u1_1153_wire)   $flowthrough 
    $delay EQ_u3_u1_1153_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1156_inst] (EQ_u3_u1_1153_wire p3_valid_971 konst_1155_wire_constant) (MUX_1156_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1159_inst] (next_active_packet_1027 konst_1158_wire_constant) (EQ_u3_u1_1159_wire)   $flowthrough 
    $delay EQ_u3_u1_1159_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1162_inst] (EQ_u3_u1_1159_wire p4_valid_976 konst_1161_wire_constant) (MUX_1162_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1163_inst] (MUX_1156_wire MUX_1162_wire) (OR_u1_u1_1163_wire)   $flowthrough 
    $delay OR_u1_u1_1163_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1164_inst] (OR_u1_u1_1150_wire OR_u1_u1_1163_wire) (send_flag_1165)   $flowthrough 
    $delay OR_u1_u1_1164_inst 0
    // 			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch4x4.opt.aa, line 316
    // out_data_2
    $ioport $out [WPIPE_out_data_2_1167_inst]  (data_to_out_1136) (out_data_2) $guard ( send_flag_1165 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_922
  //  file .Aa/switch4x4.opt.aa, line 282
  phi_stmt_924 <=> (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_924_entry_sample_req branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_924_loopback_sample_req) (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_924_phi_mux_ack)
  // noblock_obuf_1_2
  RPIPE_noblock_obuf_1_2_928_inst <=> (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/RPIPE_noblock_obuf_1_2_928_Sample/rr branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/RPIPE_noblock_obuf_1_2_928_Update/cr) (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/RPIPE_noblock_obuf_1_2_928_Sample/ra branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/RPIPE_noblock_obuf_1_2_928_Update/ca)
  phi_stmt_929 <=> (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_929_entry_sample_req branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_929_loopback_sample_req) (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_929_phi_mux_ack)
  // noblock_obuf_2_2
  RPIPE_noblock_obuf_2_2_933_inst <=> (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/RPIPE_noblock_obuf_2_2_933_Sample/rr branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/RPIPE_noblock_obuf_2_2_933_Update/cr) (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/RPIPE_noblock_obuf_2_2_933_Sample/ra branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/RPIPE_noblock_obuf_2_2_933_Update/ca)
  phi_stmt_934 <=> (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_934_entry_sample_req branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_934_loopback_sample_req) (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_934_phi_mux_ack)
  // noblock_obuf_3_2
  RPIPE_noblock_obuf_3_2_938_inst <=> (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/RPIPE_noblock_obuf_3_2_938_Sample/rr branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/RPIPE_noblock_obuf_3_2_938_Update/cr) (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/RPIPE_noblock_obuf_3_2_938_Sample/ra branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/RPIPE_noblock_obuf_3_2_938_Update/ca)
  phi_stmt_939 <=> (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_939_entry_sample_req branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_939_loopback_sample_req) (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_939_phi_mux_ack)
  // noblock_obuf_4_2
  RPIPE_noblock_obuf_4_2_943_inst <=> (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/RPIPE_noblock_obuf_4_2_943_Sample/rr branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/RPIPE_noblock_obuf_4_2_943_Update/cr) (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/RPIPE_noblock_obuf_4_2_943_Sample/ra branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/RPIPE_noblock_obuf_4_2_943_Update/ca)
  phi_stmt_944 <=> (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_944_entry_sample_req branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_944_loopback_sample_req) (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_944_phi_mux_ack)
  next_active_packet_1027_947_buf <=> (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/R_next_active_packet_947_Sample/req branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/R_next_active_packet_947_Update/req) (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/R_next_active_packet_947_Sample/ack branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/R_next_active_packet_947_Update/ack)
  phi_stmt_948 <=> (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_948_entry_sample_req branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_948_loopback_sample_req) (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_948_phi_mux_ack)
  next_down_counter_1082_951_buf <=> (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/R_next_down_counter_951_Sample/req branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/R_next_down_counter_951_Update/req) (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/R_next_down_counter_951_Sample/ack branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/R_next_down_counter_951_Update/ack)
  phi_stmt_952 <=> (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_952_entry_sample_req branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_952_loopback_sample_req) (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/phi_stmt_952_phi_mux_ack)
  next_pkt_with_priority_1027_955_buf <=> (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/R_next_pkt_with_priority_955_Sample/req branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/R_next_pkt_with_priority_955_Update/req) (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/R_next_pkt_with_priority_955_Sample/ack branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/R_next_pkt_with_priority_955_Update/ack)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 300
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 301
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 302
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 303
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 305
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
  //  file .Aa/switch4x4.opt.aa, line 306
  // down_counter
  // active_packet
  // pkt_with_priority
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 307
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
  // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 308
  // ((next_active_packet != 0 ) & (down_counter == 0 ))
  // (next_active_packet != 0 )
  // next_active_packet
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 309
  // started_new_packet
  // (valid_active_pkt_length - 1 )
  // valid_active_pkt_length
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 310
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 311
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 312
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 313
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 314
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // pkt_4_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 315
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_2 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch4x4.opt.aa, line 316
  // data_to_out
  // out_data_2
  WPIPE_out_data_2_1167_inst <=> (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/WPIPE_out_data_2_1167_Sample/req branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/WPIPE_out_data_2_1167_Update/req) (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/WPIPE_out_data_2_1167_Sample/ack branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/WPIPE_out_data_2_1167_Update/ack)
  do_while_stmt_922_branch <=> (branch_block_stmt_921/do_while_stmt_922/do_while_stmt_922_loop_body/condition_evaluated) (branch_block_stmt_921/do_while_stmt_922/loop_exit/ack branch_block_stmt_921/do_while_stmt_922/loop_taken/ack)
}
$module [outputPort_3_Daemon] 
{
  // pipe-declarations for block %outputPort_3_Daemon
  //  file .Aa/switch4x4.opt.aa, line 321
  // pipe-declarations for block %outputPort_3_Daemon%loop
  //  file .Aa/switch4x4.opt.aa, line 326
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1184] // Branch Block  file .Aa/switch4x4.opt.aa, line 326
    {
      $P [branch_block_stmt_1184__entry__]
      branch_block_stmt_1184__entry__ <-| ($entry)
      $P [branch_block_stmt_1184__exit__]
      branch_block_stmt_1184__exit__ |-> ($exit)
      $P [do_while_stmt_1185__entry__] 
      $P [do_while_stmt_1185__exit__] 
      // do-while-statement  
      //  file .Aa/switch4x4.opt.aa, line 328
      <o> [do_while_stmt_1185]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1185__entry__] 
        $P[do_while_stmt_1185__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1185_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1187
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1187_sample_start_] 
          $T[phi_stmt_1187_sample_completed_] 
          $T[phi_stmt_1187_update_start_] 
          $T[phi_stmt_1187_update_completed_] 
          $T[phi_stmt_1187_sample_start__ps] 
          phi_stmt_1187_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1187_sample_completed__ps] 
          phi_stmt_1187_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1187_update_start__ps] 
          phi_stmt_1187_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1187_update_completed__ps] 
          phi_stmt_1187_update_completed_ <-& (phi_stmt_1187_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1187_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1187_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1187_update_start_)
          $T[phi_stmt_1187_loopback_trigger] 
          phi_stmt_1187_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1187_loopback_sample_req] 
          $T[phi_stmt_1187_loopback_sample_req_ps] 
          phi_stmt_1187_loopback_sample_req <-& (phi_stmt_1187_loopback_sample_req_ps)
          phi_stmt_1187_loopback_sample_req &-> ($null)
          $T[phi_stmt_1187_entry_trigger] 
          phi_stmt_1187_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1187_entry_sample_req] 
          $T[phi_stmt_1187_entry_sample_req_ps] 
          phi_stmt_1187_entry_sample_req <-& (phi_stmt_1187_entry_sample_req_ps)
          phi_stmt_1187_entry_sample_req &-> ($null)
          phi_stmt_1187_update_start_ o<-& (phi_stmt_1187_update_completed_ 0)
          phi_stmt_1187_sample_start_ o<-& (phi_stmt_1187_sample_completed_ 1)
          $T[phi_stmt_1187_merged_reqs] 
          $T[phi_stmt_1187_phi_mux_ack] 
          $T[phi_stmt_1187_phi_mux_ack_ps] 
          phi_stmt_1187_phi_mux_ack_ps <-& (phi_stmt_1187_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1187_update_completed_)
          $T[R_ZERO_33_1189_sample_start__ps] 
          $T[R_ZERO_33_1189_sample_completed__ps] 
          $T[R_ZERO_33_1189_update_start__ps] 
          $T[R_ZERO_33_1189_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1189_sample_start_] 
          $T[R_ZERO_33_1189_sample_completed_] 
          R_ZERO_33_1189_sample_completed_ <-& (R_ZERO_33_1189_sample_start_)
          $T[R_ZERO_33_1189_update_start_] 
          $T [R_ZERO_33_1189_update_completed_] $delay 
          R_ZERO_33_1189_update_completed_ <-& (R_ZERO_33_1189_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1189_sample_start_ <-& (R_ZERO_33_1189_sample_start__ps)
          R_ZERO_33_1189_update_start_ <-& (R_ZERO_33_1189_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1189_sample_completed__ps <-& (R_ZERO_33_1189_sample_completed_)
          R_ZERO_33_1189_update_completed__ps <-& (R_ZERO_33_1189_update_completed_)
          $T[RPIPE_noblock_obuf_1_3_1191_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_3_1191_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_3_1191_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_3_1191_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_3
          $T[RPIPE_noblock_obuf_1_3_1191_sample_start_] 
          $T[RPIPE_noblock_obuf_1_3_1191_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_3_1191_update_start_] 
          $T[RPIPE_noblock_obuf_1_3_1191_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_3_1191 with guard R_read_from_1_1190
          // root phi_stmt_1187 not in visited_elements
          // root phi_stmt_1192 not in visited_elements
          // root phi_stmt_1197 not in visited_elements
          // root phi_stmt_1202 not in visited_elements
          // root phi_stmt_1207 not in visited_elements
          // root phi_stmt_1211 not in visited_elements
          // root phi_stmt_1215 not in visited_elements
          // RAW reenables for read_from_1
          ;;[RPIPE_noblock_obuf_1_3_1191_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_3_1191_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_3_1191_sample_start_ &-> (RPIPE_noblock_obuf_1_3_1191_Sample)
          RPIPE_noblock_obuf_1_3_1191_sample_completed_ <-& (RPIPE_noblock_obuf_1_3_1191_Sample)
          RPIPE_noblock_obuf_1_3_1191_update_start_ <-& (RPIPE_noblock_obuf_1_3_1191_sample_completed_)
          RPIPE_noblock_obuf_1_3_1191_update_start_ &-> (RPIPE_noblock_obuf_1_3_1191_Update)
          RPIPE_noblock_obuf_1_3_1191_update_completed_ <-& (RPIPE_noblock_obuf_1_3_1191_Update)
          RPIPE_noblock_obuf_1_3_1191_sample_start_ o<-& (RPIPE_noblock_obuf_1_3_1191_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_3_1191_sample_start_ <-& (RPIPE_noblock_obuf_1_3_1191_sample_start__ps)
          RPIPE_noblock_obuf_1_3_1191_update_start_ <-& (RPIPE_noblock_obuf_1_3_1191_update_start__ps)
          // RAW reenables for noblock_obuf_1_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_3_1191_sample_completed__ps <-& (RPIPE_noblock_obuf_1_3_1191_sample_completed_)
          RPIPE_noblock_obuf_1_3_1191_update_completed__ps <-& (RPIPE_noblock_obuf_1_3_1191_update_completed_)
          $phisequencer [ phi_stmt_1187_phi_seq] : 
          phi_stmt_1187_entry_trigger R_ZERO_33_1189_sample_start__ps R_ZERO_33_1189_sample_completed__ps R_ZERO_33_1189_update_start__ps R_ZERO_33_1189_update_completed__ps phi_stmt_1187_loopback_trigger RPIPE_noblock_obuf_1_3_1191_sample_start__ps RPIPE_noblock_obuf_1_3_1191_sample_completed__ps RPIPE_noblock_obuf_1_3_1191_update_start__ps RPIPE_noblock_obuf_1_3_1191_update_completed__ps :
          phi_stmt_1187_sample_start__ps phi_stmt_1187_sample_completed__ps phi_stmt_1187_update_start__ps phi_stmt_1187_update_completed__ps :
          phi_stmt_1187_entry_sample_req_ps phi_stmt_1187_loopback_sample_req_ps : 
          phi_stmt_1187_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1187
          // start:  PHI statement phi_stmt_1192
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1192_sample_start_] 
          $T[phi_stmt_1192_sample_completed_] 
          $T[phi_stmt_1192_update_start_] 
          $T[phi_stmt_1192_update_completed_] 
          $T[phi_stmt_1192_sample_start__ps] 
          phi_stmt_1192_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1192_sample_completed__ps] 
          phi_stmt_1192_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1192_update_start__ps] 
          phi_stmt_1192_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1192_update_completed__ps] 
          phi_stmt_1192_update_completed_ <-& (phi_stmt_1192_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1192_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1192_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1192_update_start_)
          $T[phi_stmt_1192_loopback_trigger] 
          phi_stmt_1192_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1192_loopback_sample_req] 
          $T[phi_stmt_1192_loopback_sample_req_ps] 
          phi_stmt_1192_loopback_sample_req <-& (phi_stmt_1192_loopback_sample_req_ps)
          phi_stmt_1192_loopback_sample_req &-> ($null)
          $T[phi_stmt_1192_entry_trigger] 
          phi_stmt_1192_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1192_entry_sample_req] 
          $T[phi_stmt_1192_entry_sample_req_ps] 
          phi_stmt_1192_entry_sample_req <-& (phi_stmt_1192_entry_sample_req_ps)
          phi_stmt_1192_entry_sample_req &-> ($null)
          phi_stmt_1192_update_start_ o<-& (phi_stmt_1192_update_completed_ 0)
          phi_stmt_1192_sample_start_ o<-& (phi_stmt_1192_sample_completed_ 1)
          $T[phi_stmt_1192_merged_reqs] 
          $T[phi_stmt_1192_phi_mux_ack] 
          $T[phi_stmt_1192_phi_mux_ack_ps] 
          phi_stmt_1192_phi_mux_ack_ps <-& (phi_stmt_1192_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1192_update_completed_)
          $T[R_ZERO_33_1194_sample_start__ps] 
          $T[R_ZERO_33_1194_sample_completed__ps] 
          $T[R_ZERO_33_1194_update_start__ps] 
          $T[R_ZERO_33_1194_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1194_sample_start_] 
          $T[R_ZERO_33_1194_sample_completed_] 
          R_ZERO_33_1194_sample_completed_ <-& (R_ZERO_33_1194_sample_start_)
          $T[R_ZERO_33_1194_update_start_] 
          $T [R_ZERO_33_1194_update_completed_] $delay 
          R_ZERO_33_1194_update_completed_ <-& (R_ZERO_33_1194_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1194_sample_start_ <-& (R_ZERO_33_1194_sample_start__ps)
          R_ZERO_33_1194_update_start_ <-& (R_ZERO_33_1194_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1194_sample_completed__ps <-& (R_ZERO_33_1194_sample_completed_)
          R_ZERO_33_1194_update_completed__ps <-& (R_ZERO_33_1194_update_completed_)
          $T[RPIPE_noblock_obuf_2_3_1196_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_3_1196_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_3_1196_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_3_1196_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_3
          $T[RPIPE_noblock_obuf_2_3_1196_sample_start_] 
          $T[RPIPE_noblock_obuf_2_3_1196_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_3_1196_update_start_] 
          $T[RPIPE_noblock_obuf_2_3_1196_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_3_1196 with guard R_read_from_2_1195
          // root phi_stmt_1192 not in visited_elements
          // root phi_stmt_1197 not in visited_elements
          // root phi_stmt_1202 not in visited_elements
          // root phi_stmt_1207 not in visited_elements
          // root phi_stmt_1211 not in visited_elements
          // root phi_stmt_1215 not in visited_elements
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_3_1196_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_3_1196_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_3_1196_sample_start_ &-> (RPIPE_noblock_obuf_2_3_1196_Sample)
          RPIPE_noblock_obuf_2_3_1196_sample_completed_ <-& (RPIPE_noblock_obuf_2_3_1196_Sample)
          RPIPE_noblock_obuf_2_3_1196_update_start_ <-& (RPIPE_noblock_obuf_2_3_1196_sample_completed_)
          RPIPE_noblock_obuf_2_3_1196_update_start_ &-> (RPIPE_noblock_obuf_2_3_1196_Update)
          RPIPE_noblock_obuf_2_3_1196_update_completed_ <-& (RPIPE_noblock_obuf_2_3_1196_Update)
          RPIPE_noblock_obuf_2_3_1196_sample_start_ o<-& (RPIPE_noblock_obuf_2_3_1196_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_3_1196_sample_start_ <-& (RPIPE_noblock_obuf_2_3_1196_sample_start__ps)
          RPIPE_noblock_obuf_2_3_1196_update_start_ <-& (RPIPE_noblock_obuf_2_3_1196_update_start__ps)
          // RAW reenables for noblock_obuf_2_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_3_1196_sample_completed__ps <-& (RPIPE_noblock_obuf_2_3_1196_sample_completed_)
          RPIPE_noblock_obuf_2_3_1196_update_completed__ps <-& (RPIPE_noblock_obuf_2_3_1196_update_completed_)
          $phisequencer [ phi_stmt_1192_phi_seq] : 
          phi_stmt_1192_entry_trigger R_ZERO_33_1194_sample_start__ps R_ZERO_33_1194_sample_completed__ps R_ZERO_33_1194_update_start__ps R_ZERO_33_1194_update_completed__ps phi_stmt_1192_loopback_trigger RPIPE_noblock_obuf_2_3_1196_sample_start__ps RPIPE_noblock_obuf_2_3_1196_sample_completed__ps RPIPE_noblock_obuf_2_3_1196_update_start__ps RPIPE_noblock_obuf_2_3_1196_update_completed__ps :
          phi_stmt_1192_sample_start__ps phi_stmt_1192_sample_completed__ps phi_stmt_1192_update_start__ps phi_stmt_1192_update_completed__ps :
          phi_stmt_1192_entry_sample_req_ps phi_stmt_1192_loopback_sample_req_ps : 
          phi_stmt_1192_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1192
          // start:  PHI statement phi_stmt_1197
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1197_sample_start_] 
          $T[phi_stmt_1197_sample_completed_] 
          $T[phi_stmt_1197_update_start_] 
          $T[phi_stmt_1197_update_completed_] 
          $T[phi_stmt_1197_sample_start__ps] 
          phi_stmt_1197_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1197_sample_completed__ps] 
          phi_stmt_1197_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1197_update_start__ps] 
          phi_stmt_1197_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1197_update_completed__ps] 
          phi_stmt_1197_update_completed_ <-& (phi_stmt_1197_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1197_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1197_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1197_update_start_)
          $T[phi_stmt_1197_loopback_trigger] 
          phi_stmt_1197_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1197_loopback_sample_req] 
          $T[phi_stmt_1197_loopback_sample_req_ps] 
          phi_stmt_1197_loopback_sample_req <-& (phi_stmt_1197_loopback_sample_req_ps)
          phi_stmt_1197_loopback_sample_req &-> ($null)
          $T[phi_stmt_1197_entry_trigger] 
          phi_stmt_1197_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1197_entry_sample_req] 
          $T[phi_stmt_1197_entry_sample_req_ps] 
          phi_stmt_1197_entry_sample_req <-& (phi_stmt_1197_entry_sample_req_ps)
          phi_stmt_1197_entry_sample_req &-> ($null)
          phi_stmt_1197_update_start_ o<-& (phi_stmt_1197_update_completed_ 0)
          phi_stmt_1197_sample_start_ o<-& (phi_stmt_1197_sample_completed_ 1)
          $T[phi_stmt_1197_merged_reqs] 
          $T[phi_stmt_1197_phi_mux_ack] 
          $T[phi_stmt_1197_phi_mux_ack_ps] 
          phi_stmt_1197_phi_mux_ack_ps <-& (phi_stmt_1197_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1197_update_completed_)
          $T[R_ZERO_33_1199_sample_start__ps] 
          $T[R_ZERO_33_1199_sample_completed__ps] 
          $T[R_ZERO_33_1199_update_start__ps] 
          $T[R_ZERO_33_1199_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1199_sample_start_] 
          $T[R_ZERO_33_1199_sample_completed_] 
          R_ZERO_33_1199_sample_completed_ <-& (R_ZERO_33_1199_sample_start_)
          $T[R_ZERO_33_1199_update_start_] 
          $T [R_ZERO_33_1199_update_completed_] $delay 
          R_ZERO_33_1199_update_completed_ <-& (R_ZERO_33_1199_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1199_sample_start_ <-& (R_ZERO_33_1199_sample_start__ps)
          R_ZERO_33_1199_update_start_ <-& (R_ZERO_33_1199_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1199_sample_completed__ps <-& (R_ZERO_33_1199_sample_completed_)
          R_ZERO_33_1199_update_completed__ps <-& (R_ZERO_33_1199_update_completed_)
          $T[RPIPE_noblock_obuf_3_3_1201_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_3_1201_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_3_1201_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_3_1201_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_3
          $T[RPIPE_noblock_obuf_3_3_1201_sample_start_] 
          $T[RPIPE_noblock_obuf_3_3_1201_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_3_1201_update_start_] 
          $T[RPIPE_noblock_obuf_3_3_1201_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_3_1201 with guard R_read_from_3_1200
          // root phi_stmt_1197 not in visited_elements
          // root phi_stmt_1202 not in visited_elements
          // root phi_stmt_1207 not in visited_elements
          // root phi_stmt_1211 not in visited_elements
          // root phi_stmt_1215 not in visited_elements
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_3_1201_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_3_1201_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_3_1201_sample_start_ &-> (RPIPE_noblock_obuf_3_3_1201_Sample)
          RPIPE_noblock_obuf_3_3_1201_sample_completed_ <-& (RPIPE_noblock_obuf_3_3_1201_Sample)
          RPIPE_noblock_obuf_3_3_1201_update_start_ <-& (RPIPE_noblock_obuf_3_3_1201_sample_completed_)
          RPIPE_noblock_obuf_3_3_1201_update_start_ &-> (RPIPE_noblock_obuf_3_3_1201_Update)
          RPIPE_noblock_obuf_3_3_1201_update_completed_ <-& (RPIPE_noblock_obuf_3_3_1201_Update)
          RPIPE_noblock_obuf_3_3_1201_sample_start_ o<-& (RPIPE_noblock_obuf_3_3_1201_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_3_1201_sample_start_ <-& (RPIPE_noblock_obuf_3_3_1201_sample_start__ps)
          RPIPE_noblock_obuf_3_3_1201_update_start_ <-& (RPIPE_noblock_obuf_3_3_1201_update_start__ps)
          // RAW reenables for noblock_obuf_3_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_3_1201_sample_completed__ps <-& (RPIPE_noblock_obuf_3_3_1201_sample_completed_)
          RPIPE_noblock_obuf_3_3_1201_update_completed__ps <-& (RPIPE_noblock_obuf_3_3_1201_update_completed_)
          $phisequencer [ phi_stmt_1197_phi_seq] : 
          phi_stmt_1197_entry_trigger R_ZERO_33_1199_sample_start__ps R_ZERO_33_1199_sample_completed__ps R_ZERO_33_1199_update_start__ps R_ZERO_33_1199_update_completed__ps phi_stmt_1197_loopback_trigger RPIPE_noblock_obuf_3_3_1201_sample_start__ps RPIPE_noblock_obuf_3_3_1201_sample_completed__ps RPIPE_noblock_obuf_3_3_1201_update_start__ps RPIPE_noblock_obuf_3_3_1201_update_completed__ps :
          phi_stmt_1197_sample_start__ps phi_stmt_1197_sample_completed__ps phi_stmt_1197_update_start__ps phi_stmt_1197_update_completed__ps :
          phi_stmt_1197_entry_sample_req_ps phi_stmt_1197_loopback_sample_req_ps : 
          phi_stmt_1197_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1197
          // start:  PHI statement phi_stmt_1202
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1202_sample_start_] 
          $T[phi_stmt_1202_sample_completed_] 
          $T[phi_stmt_1202_update_start_] 
          $T[phi_stmt_1202_update_completed_] 
          $T[phi_stmt_1202_sample_start__ps] 
          phi_stmt_1202_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1202_sample_completed__ps] 
          phi_stmt_1202_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1202_update_start__ps] 
          phi_stmt_1202_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1202_update_completed__ps] 
          phi_stmt_1202_update_completed_ <-& (phi_stmt_1202_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1202_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1202_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1202_update_start_)
          $T[phi_stmt_1202_loopback_trigger] 
          phi_stmt_1202_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1202_loopback_sample_req] 
          $T[phi_stmt_1202_loopback_sample_req_ps] 
          phi_stmt_1202_loopback_sample_req <-& (phi_stmt_1202_loopback_sample_req_ps)
          phi_stmt_1202_loopback_sample_req &-> ($null)
          $T[phi_stmt_1202_entry_trigger] 
          phi_stmt_1202_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1202_entry_sample_req] 
          $T[phi_stmt_1202_entry_sample_req_ps] 
          phi_stmt_1202_entry_sample_req <-& (phi_stmt_1202_entry_sample_req_ps)
          phi_stmt_1202_entry_sample_req &-> ($null)
          phi_stmt_1202_update_start_ o<-& (phi_stmt_1202_update_completed_ 0)
          phi_stmt_1202_sample_start_ o<-& (phi_stmt_1202_sample_completed_ 1)
          $T[phi_stmt_1202_merged_reqs] 
          $T[phi_stmt_1202_phi_mux_ack] 
          $T[phi_stmt_1202_phi_mux_ack_ps] 
          phi_stmt_1202_phi_mux_ack_ps <-& (phi_stmt_1202_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1202_update_completed_)
          $T[R_ZERO_33_1204_sample_start__ps] 
          $T[R_ZERO_33_1204_sample_completed__ps] 
          $T[R_ZERO_33_1204_update_start__ps] 
          $T[R_ZERO_33_1204_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1204_sample_start_] 
          $T[R_ZERO_33_1204_sample_completed_] 
          R_ZERO_33_1204_sample_completed_ <-& (R_ZERO_33_1204_sample_start_)
          $T[R_ZERO_33_1204_update_start_] 
          $T [R_ZERO_33_1204_update_completed_] $delay 
          R_ZERO_33_1204_update_completed_ <-& (R_ZERO_33_1204_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1204_sample_start_ <-& (R_ZERO_33_1204_sample_start__ps)
          R_ZERO_33_1204_update_start_ <-& (R_ZERO_33_1204_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1204_sample_completed__ps <-& (R_ZERO_33_1204_sample_completed_)
          R_ZERO_33_1204_update_completed__ps <-& (R_ZERO_33_1204_update_completed_)
          $T[RPIPE_noblock_obuf_4_3_1206_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_3_1206_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_3_1206_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_3_1206_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_3
          $T[RPIPE_noblock_obuf_4_3_1206_sample_start_] 
          $T[RPIPE_noblock_obuf_4_3_1206_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_3_1206_update_start_] 
          $T[RPIPE_noblock_obuf_4_3_1206_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_3_1206 with guard R_read_from_4_1205
          // root phi_stmt_1202 not in visited_elements
          // root phi_stmt_1207 not in visited_elements
          // root phi_stmt_1211 not in visited_elements
          // root phi_stmt_1215 not in visited_elements
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_3_1206_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_3_1206_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_3_1206_sample_start_ &-> (RPIPE_noblock_obuf_4_3_1206_Sample)
          RPIPE_noblock_obuf_4_3_1206_sample_completed_ <-& (RPIPE_noblock_obuf_4_3_1206_Sample)
          RPIPE_noblock_obuf_4_3_1206_update_start_ <-& (RPIPE_noblock_obuf_4_3_1206_sample_completed_)
          RPIPE_noblock_obuf_4_3_1206_update_start_ &-> (RPIPE_noblock_obuf_4_3_1206_Update)
          RPIPE_noblock_obuf_4_3_1206_update_completed_ <-& (RPIPE_noblock_obuf_4_3_1206_Update)
          RPIPE_noblock_obuf_4_3_1206_sample_start_ o<-& (RPIPE_noblock_obuf_4_3_1206_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_3_1206_sample_start_ <-& (RPIPE_noblock_obuf_4_3_1206_sample_start__ps)
          RPIPE_noblock_obuf_4_3_1206_update_start_ <-& (RPIPE_noblock_obuf_4_3_1206_update_start__ps)
          // RAW reenables for noblock_obuf_4_3
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_3_1206_sample_completed__ps <-& (RPIPE_noblock_obuf_4_3_1206_sample_completed_)
          RPIPE_noblock_obuf_4_3_1206_update_completed__ps <-& (RPIPE_noblock_obuf_4_3_1206_update_completed_)
          $phisequencer [ phi_stmt_1202_phi_seq] : 
          phi_stmt_1202_entry_trigger R_ZERO_33_1204_sample_start__ps R_ZERO_33_1204_sample_completed__ps R_ZERO_33_1204_update_start__ps R_ZERO_33_1204_update_completed__ps phi_stmt_1202_loopback_trigger RPIPE_noblock_obuf_4_3_1206_sample_start__ps RPIPE_noblock_obuf_4_3_1206_sample_completed__ps RPIPE_noblock_obuf_4_3_1206_update_start__ps RPIPE_noblock_obuf_4_3_1206_update_completed__ps :
          phi_stmt_1202_sample_start__ps phi_stmt_1202_sample_completed__ps phi_stmt_1202_update_start__ps phi_stmt_1202_update_completed__ps :
          phi_stmt_1202_entry_sample_req_ps phi_stmt_1202_loopback_sample_req_ps : 
          phi_stmt_1202_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1202
          // start:  PHI statement phi_stmt_1207
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1207_sample_start_] 
          $T[phi_stmt_1207_sample_completed_] 
          $T[phi_stmt_1207_update_start_] 
          $T[phi_stmt_1207_update_completed_] 
          $T[phi_stmt_1207_sample_start__ps] 
          phi_stmt_1207_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1207_sample_completed__ps] 
          phi_stmt_1207_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1207_update_start__ps] 
          phi_stmt_1207_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1207_update_completed__ps] 
          phi_stmt_1207_update_completed_ <-& (phi_stmt_1207_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1207_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1207_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1207_update_start_)
          $T[phi_stmt_1207_loopback_trigger] 
          phi_stmt_1207_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1207_loopback_sample_req] 
          $T[phi_stmt_1207_loopback_sample_req_ps] 
          phi_stmt_1207_loopback_sample_req <-& (phi_stmt_1207_loopback_sample_req_ps)
          phi_stmt_1207_loopback_sample_req &-> ($null)
          $T[phi_stmt_1207_entry_trigger] 
          phi_stmt_1207_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1207_entry_sample_req] 
          $T[phi_stmt_1207_entry_sample_req_ps] 
          phi_stmt_1207_entry_sample_req <-& (phi_stmt_1207_entry_sample_req_ps)
          phi_stmt_1207_entry_sample_req &-> ($null)
          phi_stmt_1207_update_start_ o<-& (phi_stmt_1207_update_completed_ 0)
          phi_stmt_1207_sample_start_ o<-& (phi_stmt_1207_sample_completed_ 1)
          $T[phi_stmt_1207_merged_reqs] 
          $T[phi_stmt_1207_phi_mux_ack] 
          $T[phi_stmt_1207_phi_mux_ack_ps] 
          phi_stmt_1207_phi_mux_ack_ps <-& (phi_stmt_1207_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1207_update_completed_)
          $T[R_ZERO_3_1209_sample_start__ps] 
          $T[R_ZERO_3_1209_sample_completed__ps] 
          $T[R_ZERO_3_1209_update_start__ps] 
          $T[R_ZERO_3_1209_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_1209_sample_start_] 
          $T[R_ZERO_3_1209_sample_completed_] 
          R_ZERO_3_1209_sample_completed_ <-& (R_ZERO_3_1209_sample_start_)
          $T[R_ZERO_3_1209_update_start_] 
          $T [R_ZERO_3_1209_update_completed_] $delay 
          R_ZERO_3_1209_update_completed_ <-& (R_ZERO_3_1209_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_1209_sample_start_ <-& (R_ZERO_3_1209_sample_start__ps)
          R_ZERO_3_1209_update_start_ <-& (R_ZERO_3_1209_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_1209_sample_completed__ps <-& (R_ZERO_3_1209_sample_completed_)
          R_ZERO_3_1209_update_completed__ps <-& (R_ZERO_3_1209_update_completed_)
          $T[R_next_active_packet_1210_sample_start__ps] 
          $T[R_next_active_packet_1210_sample_completed__ps] 
          $T[R_next_active_packet_1210_update_start__ps] 
          $T[R_next_active_packet_1210_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_1210_sample_start_] 
          $T[R_next_active_packet_1210_sample_completed_] 
          $T[R_next_active_packet_1210_update_start_] 
          $T[R_next_active_packet_1210_update_completed_] 
          ;;[R_next_active_packet_1210_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_1210_sample_start_ &-> (R_next_active_packet_1210_Sample)
          R_next_active_packet_1210_sample_completed_ <-& (R_next_active_packet_1210_Sample)
          ;;[R_next_active_packet_1210_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_1210_update_start_ &-> (R_next_active_packet_1210_Update)
          R_next_active_packet_1210_update_completed_ <-& (R_next_active_packet_1210_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_1210_sample_start_ <-& (R_next_active_packet_1210_sample_start__ps)
          R_next_active_packet_1210_update_start_ <-& (R_next_active_packet_1210_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_1210_sample_completed__ps <-& (R_next_active_packet_1210_sample_completed_)
          R_next_active_packet_1210_update_completed__ps <-& (R_next_active_packet_1210_update_completed_)
          $phisequencer [ phi_stmt_1207_phi_seq] : 
          phi_stmt_1207_entry_trigger R_ZERO_3_1209_sample_start__ps R_ZERO_3_1209_sample_completed__ps R_ZERO_3_1209_update_start__ps R_ZERO_3_1209_update_completed__ps phi_stmt_1207_loopback_trigger R_next_active_packet_1210_sample_start__ps R_next_active_packet_1210_sample_completed__ps R_next_active_packet_1210_update_start__ps R_next_active_packet_1210_update_completed__ps :
          phi_stmt_1207_sample_start__ps phi_stmt_1207_sample_completed__ps phi_stmt_1207_update_start__ps phi_stmt_1207_update_completed__ps :
          phi_stmt_1207_entry_sample_req_ps phi_stmt_1207_loopback_sample_req_ps : 
          phi_stmt_1207_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1207
          // start:  PHI statement phi_stmt_1211
          // 			$phi down_counter := 			  ZERO_16 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_1211_sample_start_] 
          $T[phi_stmt_1211_sample_completed_] 
          $T[phi_stmt_1211_update_start_] 
          $T[phi_stmt_1211_update_completed_] 
          $T[phi_stmt_1211_sample_start__ps] 
          phi_stmt_1211_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1211_sample_completed__ps] 
          phi_stmt_1211_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1211_update_start__ps] 
          phi_stmt_1211_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1211_update_completed__ps] 
          phi_stmt_1211_update_completed_ <-& (phi_stmt_1211_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1211_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1211_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1211_update_start_)
          $T[phi_stmt_1211_loopback_trigger] 
          phi_stmt_1211_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1211_loopback_sample_req] 
          $T[phi_stmt_1211_loopback_sample_req_ps] 
          phi_stmt_1211_loopback_sample_req <-& (phi_stmt_1211_loopback_sample_req_ps)
          phi_stmt_1211_loopback_sample_req &-> ($null)
          $T[phi_stmt_1211_entry_trigger] 
          phi_stmt_1211_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1211_entry_sample_req] 
          $T[phi_stmt_1211_entry_sample_req_ps] 
          phi_stmt_1211_entry_sample_req <-& (phi_stmt_1211_entry_sample_req_ps)
          phi_stmt_1211_entry_sample_req &-> ($null)
          phi_stmt_1211_update_start_ o<-& (phi_stmt_1211_update_completed_ 0)
          phi_stmt_1211_sample_start_ o<-& (phi_stmt_1211_sample_completed_ 1)
          $T[phi_stmt_1211_merged_reqs] 
          $T[phi_stmt_1211_phi_mux_ack] 
          $T[phi_stmt_1211_phi_mux_ack_ps] 
          phi_stmt_1211_phi_mux_ack_ps <-& (phi_stmt_1211_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1211_update_completed_)
          $T[R_ZERO_16_1213_sample_start__ps] 
          $T[R_ZERO_16_1213_sample_completed__ps] 
          $T[R_ZERO_16_1213_update_start__ps] 
          $T[R_ZERO_16_1213_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_16_1213_sample_start_] 
          $T[R_ZERO_16_1213_sample_completed_] 
          R_ZERO_16_1213_sample_completed_ <-& (R_ZERO_16_1213_sample_start_)
          $T[R_ZERO_16_1213_update_start_] 
          $T [R_ZERO_16_1213_update_completed_] $delay 
          R_ZERO_16_1213_update_completed_ <-& (R_ZERO_16_1213_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_16_1213_sample_start_ <-& (R_ZERO_16_1213_sample_start__ps)
          R_ZERO_16_1213_update_start_ <-& (R_ZERO_16_1213_update_start__ps)
          // Phi complete dependency.
          R_ZERO_16_1213_sample_completed__ps <-& (R_ZERO_16_1213_sample_completed_)
          R_ZERO_16_1213_update_completed__ps <-& (R_ZERO_16_1213_update_completed_)
          $T[R_next_down_counter_1214_sample_start__ps] 
          $T[R_next_down_counter_1214_sample_completed__ps] 
          $T[R_next_down_counter_1214_update_start__ps] 
          $T[R_next_down_counter_1214_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_1214_sample_start_] 
          $T[R_next_down_counter_1214_sample_completed_] 
          $T[R_next_down_counter_1214_update_start_] 
          $T[R_next_down_counter_1214_update_completed_] 
          ;;[R_next_down_counter_1214_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_1214_sample_start_ &-> (R_next_down_counter_1214_Sample)
          R_next_down_counter_1214_sample_completed_ <-& (R_next_down_counter_1214_Sample)
          ;;[R_next_down_counter_1214_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_1214_update_start_ &-> (R_next_down_counter_1214_Update)
          R_next_down_counter_1214_update_completed_ <-& (R_next_down_counter_1214_Update)
          // RAW reenables for next_down_counter
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_1214_sample_start_ <-& (R_next_down_counter_1214_sample_start__ps)
          R_next_down_counter_1214_update_start_ <-& (R_next_down_counter_1214_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_1214_sample_completed__ps <-& (R_next_down_counter_1214_sample_completed_)
          R_next_down_counter_1214_update_completed__ps <-& (R_next_down_counter_1214_update_completed_)
          $phisequencer [ phi_stmt_1211_phi_seq] : 
          phi_stmt_1211_entry_trigger R_ZERO_16_1213_sample_start__ps R_ZERO_16_1213_sample_completed__ps R_ZERO_16_1213_update_start__ps R_ZERO_16_1213_update_completed__ps phi_stmt_1211_loopback_trigger R_next_down_counter_1214_sample_start__ps R_next_down_counter_1214_sample_completed__ps R_next_down_counter_1214_update_start__ps R_next_down_counter_1214_update_completed__ps :
          phi_stmt_1211_sample_start__ps phi_stmt_1211_sample_completed__ps phi_stmt_1211_update_start__ps phi_stmt_1211_update_completed__ps :
          phi_stmt_1211_entry_sample_req_ps phi_stmt_1211_loopback_sample_req_ps : 
          phi_stmt_1211_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1211
          // start:  PHI statement phi_stmt_1215
          // 			$phi pkt_with_priority := 			  1  $on   $entry 			  next_pkt_with_priority $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1215_sample_start_] 
          $T[phi_stmt_1215_sample_completed_] 
          $T[phi_stmt_1215_update_start_] 
          $T[phi_stmt_1215_update_completed_] 
          $T[phi_stmt_1215_sample_start__ps] 
          phi_stmt_1215_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1215_sample_completed__ps] 
          phi_stmt_1215_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1215_update_start__ps] 
          phi_stmt_1215_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1215_update_completed__ps] 
          phi_stmt_1215_update_completed_ <-& (phi_stmt_1215_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1215_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1215_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1215_update_start_)
          $T[phi_stmt_1215_loopback_trigger] 
          phi_stmt_1215_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1215_loopback_sample_req] 
          $T[phi_stmt_1215_loopback_sample_req_ps] 
          phi_stmt_1215_loopback_sample_req <-& (phi_stmt_1215_loopback_sample_req_ps)
          phi_stmt_1215_loopback_sample_req &-> ($null)
          $T[phi_stmt_1215_entry_trigger] 
          phi_stmt_1215_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1215_entry_sample_req] 
          $T[phi_stmt_1215_entry_sample_req_ps] 
          phi_stmt_1215_entry_sample_req <-& (phi_stmt_1215_entry_sample_req_ps)
          phi_stmt_1215_entry_sample_req &-> ($null)
          phi_stmt_1215_update_start_ o<-& (phi_stmt_1215_update_completed_ 0)
          phi_stmt_1215_sample_start_ o<-& (phi_stmt_1215_sample_completed_ 1)
          $T[phi_stmt_1215_merged_reqs] 
          $T[phi_stmt_1215_phi_mux_ack] 
          $T[phi_stmt_1215_phi_mux_ack_ps] 
          phi_stmt_1215_phi_mux_ack_ps <-& (phi_stmt_1215_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1215_update_completed_)
          $T[konst_1217_sample_start__ps] 
          $T[konst_1217_sample_completed__ps] 
          $T[konst_1217_update_start__ps] 
          $T[konst_1217_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_1217_sample_start_] 
          $T[konst_1217_sample_completed_] 
          konst_1217_sample_completed_ <-& (konst_1217_sample_start_)
          $T[konst_1217_update_start_] 
          $T [konst_1217_update_completed_] $delay 
          konst_1217_update_completed_ <-& (konst_1217_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_1217_sample_start_ <-& (konst_1217_sample_start__ps)
          konst_1217_update_start_ <-& (konst_1217_update_start__ps)
          // Phi complete dependency.
          konst_1217_sample_completed__ps <-& (konst_1217_sample_completed_)
          konst_1217_update_completed__ps <-& (konst_1217_update_completed_)
          $T[R_next_pkt_with_priority_1218_sample_start__ps] 
          $T[R_next_pkt_with_priority_1218_sample_completed__ps] 
          $T[R_next_pkt_with_priority_1218_update_start__ps] 
          $T[R_next_pkt_with_priority_1218_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_pkt_with_priority_1218_sample_start_] 
          $T[R_next_pkt_with_priority_1218_sample_completed_] 
          $T[R_next_pkt_with_priority_1218_update_start_] 
          $T[R_next_pkt_with_priority_1218_update_completed_] 
          ;;[R_next_pkt_with_priority_1218_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_pkt_with_priority_1218_sample_start_ &-> (R_next_pkt_with_priority_1218_Sample)
          R_next_pkt_with_priority_1218_sample_completed_ <-& (R_next_pkt_with_priority_1218_Sample)
          ;;[R_next_pkt_with_priority_1218_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_pkt_with_priority_1218_update_start_ &-> (R_next_pkt_with_priority_1218_Update)
          R_next_pkt_with_priority_1218_update_completed_ <-& (R_next_pkt_with_priority_1218_Update)
          // RAW reenables for next_pkt_with_priority
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_pkt_with_priority_1218_sample_start_ <-& (R_next_pkt_with_priority_1218_sample_start__ps)
          R_next_pkt_with_priority_1218_update_start_ <-& (R_next_pkt_with_priority_1218_update_start__ps)
          // Phi complete dependency.
          R_next_pkt_with_priority_1218_sample_completed__ps <-& (R_next_pkt_with_priority_1218_sample_completed_)
          R_next_pkt_with_priority_1218_update_completed__ps <-& (R_next_pkt_with_priority_1218_update_completed_)
          $phisequencer [ phi_stmt_1215_phi_seq] : 
          phi_stmt_1215_entry_trigger konst_1217_sample_start__ps konst_1217_sample_completed__ps konst_1217_update_start__ps konst_1217_update_completed__ps phi_stmt_1215_loopback_trigger R_next_pkt_with_priority_1218_sample_start__ps R_next_pkt_with_priority_1218_sample_completed__ps R_next_pkt_with_priority_1218_update_start__ps R_next_pkt_with_priority_1218_update_completed__ps :
          phi_stmt_1215_sample_start__ps phi_stmt_1215_sample_completed__ps phi_stmt_1215_update_start__ps phi_stmt_1215_update_completed__ps :
          phi_stmt_1215_entry_sample_req_ps phi_stmt_1215_loopback_sample_req_ps : 
          phi_stmt_1215_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1215
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 346
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 347
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 348
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 349
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 351
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_with_priority
          // WAR dependency: Read: next_pkt_with_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_with_priority
          // start:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  file .Aa/switch4x4.opt.aa, line 352
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // pkt_with_priority
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_pkt_with_priority
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_with_priority
          // WAR dependency: Read: next_pkt_with_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_with_priority
          // end:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          // start: WAR dependencies for valid_active_pkt_length
          // done: WAR dependencies for valid_active_pkt_length
          // start:  			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 353
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 23 8 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 23 8 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 23 8 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 23 8 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) valid_active_pkt_length
          // start: WAR dependencies for valid_active_pkt_length
          // done: WAR dependencies for valid_active_pkt_length
          // end:  			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 354
          // volatile! 
          // Source expression
          // ((next_active_packet != 0 ) & (down_counter == 0 ))
          // (next_active_packet != 0 )
          // next_active_packet
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 355
          // volatile! 
          // Source expression
          // ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // (valid_active_pkt_length - 1 )
          // valid_active_pkt_length
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 356
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 357
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 358
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 359
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 360
          // volatile! 
          // Source expression
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 361
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch4x4.opt.aa, line 362
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_3
          $T[WPIPE_out_data_3_1430_sample_start_] 
          $T[WPIPE_out_data_3_1430_sample_completed_] 
          $T[WPIPE_out_data_3_1430_update_start_] 
          $T[WPIPE_out_data_3_1430_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_3_1430 with guard R_send_flag_1429
          WPIPE_out_data_3_1430_sample_start_ <-& (phi_stmt_1187_update_completed_)
          WPIPE_out_data_3_1430_sample_start_ <-& (phi_stmt_1192_update_completed_)
          WPIPE_out_data_3_1430_sample_start_ <-& (phi_stmt_1197_update_completed_)
          WPIPE_out_data_3_1430_sample_start_ <-& (phi_stmt_1202_update_completed_)
          WPIPE_out_data_3_1430_sample_start_ <-& (phi_stmt_1207_update_completed_)
          WPIPE_out_data_3_1430_sample_start_ <-& (phi_stmt_1211_update_completed_)
          WPIPE_out_data_3_1430_sample_start_ <-& (phi_stmt_1215_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_1187_update_start_ o<-& (WPIPE_out_data_3_1430_sample_completed_ 0)
          phi_stmt_1192_update_start_ o<-& (WPIPE_out_data_3_1430_sample_completed_ 0)
          phi_stmt_1197_update_start_ o<-& (WPIPE_out_data_3_1430_sample_completed_ 0)
          phi_stmt_1202_update_start_ o<-& (WPIPE_out_data_3_1430_sample_completed_ 0)
          phi_stmt_1207_update_start_ o<-& (WPIPE_out_data_3_1430_sample_completed_ 0)
          phi_stmt_1211_update_start_ o<-& (WPIPE_out_data_3_1430_sample_completed_ 0)
          phi_stmt_1215_update_start_ o<-& (WPIPE_out_data_3_1430_sample_completed_ 0)
          ;;[WPIPE_out_data_3_1430_Sample] 
          {
            // pipe write sample-start out_data_3
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_3_1430_Update] 
          {
            // pipe write update (complete) out_data_3
            $T [req] $T [ack] 
          }
          WPIPE_out_data_3_1430_sample_start_ &-> (WPIPE_out_data_3_1430_Sample)
          WPIPE_out_data_3_1430_sample_completed_ <-& (WPIPE_out_data_3_1430_Sample)
          WPIPE_out_data_3_1430_update_start_ <-& (WPIPE_out_data_3_1430_sample_completed_)
          WPIPE_out_data_3_1430_update_start_ &-> (WPIPE_out_data_3_1430_Update)
          WPIPE_out_data_3_1430_update_completed_ <-& (WPIPE_out_data_3_1430_Update)
          WPIPE_out_data_3_1430_sample_start_ o<-& (WPIPE_out_data_3_1430_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_3_1430_sample_start_
          WPIPE_out_data_3_1430_sample_start_ <-& (phi_stmt_1187_update_completed_)
          WPIPE_out_data_3_1430_sample_start_ <-& (phi_stmt_1192_update_completed_)
          WPIPE_out_data_3_1430_sample_start_ <-& (phi_stmt_1197_update_completed_)
          WPIPE_out_data_3_1430_sample_start_ <-& (phi_stmt_1202_update_completed_)
          WPIPE_out_data_3_1430_sample_start_ <-& (phi_stmt_1207_update_completed_)
          WPIPE_out_data_3_1430_sample_start_ <-& (phi_stmt_1211_update_completed_)
          WPIPE_out_data_3_1430_sample_start_ <-& (phi_stmt_1215_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_3_1430_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_1187_update_start_ o<-& (WPIPE_out_data_3_1430_sample_completed_ 0)
          phi_stmt_1192_update_start_ o<-& (WPIPE_out_data_3_1430_sample_completed_ 0)
          phi_stmt_1197_update_start_ o<-& (WPIPE_out_data_3_1430_sample_completed_ 0)
          phi_stmt_1202_update_start_ o<-& (WPIPE_out_data_3_1430_sample_completed_ 0)
          phi_stmt_1207_update_start_ o<-& (WPIPE_out_data_3_1430_sample_completed_ 0)
          phi_stmt_1211_update_start_ o<-& (WPIPE_out_data_3_1430_sample_completed_ 0)
          phi_stmt_1215_update_start_ o<-& (WPIPE_out_data_3_1430_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_1_3
          // read-dependencies for pipe noblock_obuf_1_3
          // write-dependencies for pipe noblock_obuf_1_3
          // signal write dependencies for noblock_obuf_1_3
          // pipe read/write dependencies for pipe out_data_3
          // read-dependencies for pipe out_data_3
          // write-dependencies for pipe out_data_3
          // signal write dependencies for out_data_3
          // pipe read/write dependencies for pipe noblock_obuf_2_3
          // read-dependencies for pipe noblock_obuf_2_3
          // write-dependencies for pipe noblock_obuf_2_3
          // signal write dependencies for noblock_obuf_2_3
          // pipe read/write dependencies for pipe noblock_obuf_3_3
          // read-dependencies for pipe noblock_obuf_3_3
          // write-dependencies for pipe noblock_obuf_3_3
          // signal write dependencies for noblock_obuf_3_3
          // pipe read/write dependencies for pipe noblock_obuf_4_3
          // read-dependencies for pipe noblock_obuf_4_3
          // write-dependencies for pipe noblock_obuf_4_3
          // signal write dependencies for noblock_obuf_4_3
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1185__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1185_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1185__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1185_loop_body : condition_evaluated
        $bind do_while_stmt_1185__entry__  => do_while_stmt_1185_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1185_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1185__exit__)
      }
      do_while_stmt_1185__entry__ |-> (do_while_stmt_1185)
      do_while_stmt_1185__exit__ <-| (do_while_stmt_1185)
      do_while_stmt_1185__entry__ <-| (branch_block_stmt_1184__entry__)
      do_while_stmt_1185__exit__ |-> (branch_block_stmt_1184__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_3_Daemon%loop%
    //  file .Aa/switch4x4.opt.aa, line 330
    // constant-object-declarations for block %outputPort_3_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 326
    // constant-object-declarations for block %outputPort_3_Daemon
    //  file .Aa/switch4x4.opt.aa, line 321
    // constant-declarations for block %outputPort_3_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 326
    // do-while statement  
    //  file .Aa/switch4x4.opt.aa, line 328
    // 1 
    $constant $W[konst_1443_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_3_Daemon%loop%
    //  file .Aa/switch4x4.opt.aa, line 330
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 331
    // ZERO_33
    $constant $W[R_ZERO_33_1189_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 333
    // ZERO_33
    $constant $W[R_ZERO_33_1194_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 335
    // ZERO_33
    $constant $W[R_ZERO_33_1199_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 337
    // ZERO_33
    $constant $W[R_ZERO_33_1204_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 339
    // ZERO_3
    $constant $W[R_ZERO_3_1209_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_16 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 341
    // ZERO_16
    $constant $W[R_ZERO_16_1213_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_with_priority := 			  1  $on   $entry 			  next_pkt_with_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 343
    // 1 
    $constant $W[konst_1217_wire_constant] : $int<3> := _b001// 1
    // 32 
    $constant $W[konst_1222_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1227_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1232_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1237_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1254_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1257_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1260_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1263_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1267_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1270_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1273_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1276_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
    //  file .Aa/switch4x4.opt.aa, line 352
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
    // 1 
    $constant $W[konst_1293_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1297_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
    // 2 
    $constant $W[konst_1300_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1304_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
    // 3 
    $constant $W[konst_1308_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1312_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
    // 4 
    $constant $W[konst_1315_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1319_wire_constant] : $int<16> := _b0000000000000000// 0
    // 0 
    $constant $W[konst_1326_wire_constant] : $int<3> := _b000// 0
    // 0 
    $constant $W[konst_1329_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 1 
    $constant $W[konst_1336_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_1340_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_1350_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_1358_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_1366_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_1374_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  ) 
    // 1 
    $constant $W[konst_1380_wire_constant] : $int<3> := _b001// 1
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
    // 2 
    $constant $W[konst_1385_wire_constant] : $int<3> := _b010// 2
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
    // 3 
    $constant $W[konst_1390_wire_constant] : $int<3> := _b011// 3
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1402_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1405_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1408_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1411_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1415_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1418_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1421_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1424_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_3_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 326
    // do-while statement  
    //  file .Aa/switch4x4.opt.aa, line 328
    // merge-statement  
    //  file .Aa/switch4x4.opt.aa, line 330
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 331
    // noblock_obuf_1_3
    $W[RPIPE_noblock_obuf_1_3_1191_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_1187] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 333
    // noblock_obuf_2_3
    $W[RPIPE_noblock_obuf_2_3_1196_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_1192] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 335
    // noblock_obuf_3_3
    $W[RPIPE_noblock_obuf_3_3_1201_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_1197] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 337
    // noblock_obuf_4_3
    $W[RPIPE_noblock_obuf_4_3_1206_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_1202] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 339
    $W[next_active_packet_1290_1210_buffered] : $int<3>
    // active_packet
    $W[active_packet_1207] : $int<3>
    // 			$phi down_counter := 			  ZERO_16 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 341
    $W[next_down_counter_1345_1214_buffered] : $int<16>
    // down_counter
    $W[down_counter_1211] : $int<16>
    // 			$phi pkt_with_priority := 			  1  $on   $entry 			  next_pkt_with_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 343
    $W[next_pkt_with_priority_1290_1218_buffered] : $int<3>
    // pkt_with_priority
    $W[pkt_with_priority_1215] : $int<3>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 346
    // p1_valid
    $W[p1_valid_1224] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 347
    // p2_valid
    $W[p2_valid_1229] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 348
    // p3_valid
    $W[p3_valid_1234] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 349
    // p4_valid
    $W[p4_valid_1239] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 351
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1255_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1258_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1261_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1264_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1265_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1268_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1271_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1274_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1277_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1278_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_1280] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
    //  file .Aa/switch4x4.opt.aa, line 352
    // next_active_packet
    $W[next_active_packet_1290] : $int<3>
    // next_pkt_with_priority
    $W[next_pkt_with_priority_1290] : $int<3>
    // 			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 353
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1294_wire] : $int<1>
    // ( $slice pkt_1_e_word 23 8 ) 
    $intermediate $W[slice_1296_wire] : $int<16>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
    $intermediate $W[MUX_1298_wire] : $int<16>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1301_wire] : $int<1>
    // ( $slice pkt_2_e_word 23 8 ) 
    $intermediate $W[slice_1303_wire] : $int<16>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
    $intermediate $W[MUX_1305_wire] : $int<16>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) )
    $intermediate $W[OR_u16_u16_1306_wire] : $int<16>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1309_wire] : $int<1>
    // ( $slice pkt_3_e_word 23 8 ) 
    $intermediate $W[slice_1311_wire] : $int<16>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
    $intermediate $W[MUX_1313_wire] : $int<16>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1316_wire] : $int<1>
    // ( $slice pkt_4_e_word 23 8 ) 
    $intermediate $W[slice_1318_wire] : $int<16>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
    $intermediate $W[MUX_1320_wire] : $int<16>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )
    $intermediate $W[OR_u16_u16_1321_wire] : $int<16>
    // valid_active_pkt_length
    $W[valid_active_pkt_length_1323] : $int<16>
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 354
    // (next_active_packet != 0 )
    $intermediate $W[NEQ_u3_u1_1327_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u16_u1_1330_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_1332] : $int<1>
    // 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 355
    // (valid_active_pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_1337_wire] : $int<16>
    // (down_counter - 1 )
    $intermediate $W[SUB_u16_u16_1341_wire] : $int<16>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_1343_wire] : $int<16>
    // next_down_counter
    $W[next_down_counter_1345] : $int<16>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 356
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_1348_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1351_wire] : $int<1>
    // read_from_1
    $W[read_from_1_1353] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 357
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_1356_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1359_wire] : $int<1>
    // read_from_2
    $W[read_from_2_1361] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 358
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_1364_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1367_wire] : $int<1>
    // read_from_3
    $W[read_from_3_1369] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 359
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_1372_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1375_wire] : $int<1>
    // read_from_4
    $W[read_from_4_1377] : $int<1>
    // 			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 360
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1381_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_1383_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1386_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_1388_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1391_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_1393_wire] : $int<32>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_1395_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
    $intermediate $W[MUX_1396_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
    $intermediate $W[MUX_1397_wire] : $int<32>
    // data_to_out
    $W[data_to_out_1399] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 361
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1403_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1406_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1409_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1412_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1413_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1416_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1419_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1422_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1425_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1426_wire] : $int<1>
    // send_flag
    $W[send_flag_1428] : $int<1>
    // 			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch4x4.opt.aa, line 362
    // out_data_3
    // datapath-instances for block %outputPort_3_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 326
    // datapath-instances for do-while  
    //  file .Aa/switch4x4.opt.aa, line 328
    ==0? [do_while_stmt_1185_branch] (konst_1443_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch4x4.opt.aa, line 330
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 331
    // noblock_obuf_1_3
    $ioport $in [RPIPE_noblock_obuf_1_3_1191_inst] (noblock_obuf_1_3) (RPIPE_noblock_obuf_1_3_1191_wire) $guard ( read_from_1_1353 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_3_1191_inst RPIPE_noblock_obuf_1_3_1191_wire 1
    # $phi [phi_stmt_1187] (R_ZERO_33_1189_wire_constant RPIPE_noblock_obuf_1_3_1191_wire) ( pkt_1_e_word_1187 ) $fullrate
    // $buffering  $out phi_stmt_1187 pkt_1_e_word_1187 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 333
    // noblock_obuf_2_3
    $ioport $in [RPIPE_noblock_obuf_2_3_1196_inst] (noblock_obuf_2_3) (RPIPE_noblock_obuf_2_3_1196_wire) $guard ( read_from_2_1361 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_3_1196_inst RPIPE_noblock_obuf_2_3_1196_wire 1
    # $phi [phi_stmt_1192] (R_ZERO_33_1194_wire_constant RPIPE_noblock_obuf_2_3_1196_wire) ( pkt_2_e_word_1192 ) $fullrate
    // $buffering  $out phi_stmt_1192 pkt_2_e_word_1192 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 335
    // noblock_obuf_3_3
    $ioport $in [RPIPE_noblock_obuf_3_3_1201_inst] (noblock_obuf_3_3) (RPIPE_noblock_obuf_3_3_1201_wire) $guard ( read_from_3_1369 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_3_1201_inst RPIPE_noblock_obuf_3_3_1201_wire 1
    # $phi [phi_stmt_1197] (R_ZERO_33_1199_wire_constant RPIPE_noblock_obuf_3_3_1201_wire) ( pkt_3_e_word_1197 ) $fullrate
    // $buffering  $out phi_stmt_1197 pkt_3_e_word_1197 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_3 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 337
    // noblock_obuf_4_3
    $ioport $in [RPIPE_noblock_obuf_4_3_1206_inst] (noblock_obuf_4_3) (RPIPE_noblock_obuf_4_3_1206_wire) $guard ( read_from_4_1377 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_3_1206_inst RPIPE_noblock_obuf_4_3_1206_wire 1
    # $phi [phi_stmt_1202] (R_ZERO_33_1204_wire_constant RPIPE_noblock_obuf_4_3_1206_wire) ( pkt_4_e_word_1202 ) $fullrate
    // $buffering  $out phi_stmt_1202 pkt_4_e_word_1202 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 339
    # := [next_active_packet_1290_1210_buf] (next_active_packet_1290) (next_active_packet_1290_1210_buffered)     $fullrate
    $buffering $out next_active_packet_1290_1210_buf next_active_packet_1290_1210_buffered  1
    # $phi [phi_stmt_1207] (R_ZERO_3_1209_wire_constant next_active_packet_1290_1210_buffered) ( active_packet_1207 ) $fullrate
    // $buffering  $out phi_stmt_1207 active_packet_1207 2
    // 			$phi down_counter := 			  ZERO_16 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 341
    # := [next_down_counter_1345_1214_buf] (next_down_counter_1345) (next_down_counter_1345_1214_buffered)     $fullrate
    $buffering $out next_down_counter_1345_1214_buf next_down_counter_1345_1214_buffered  1
    # $phi [phi_stmt_1211] (R_ZERO_16_1213_wire_constant next_down_counter_1345_1214_buffered) ( down_counter_1211 ) $fullrate
    // $buffering  $out phi_stmt_1211 down_counter_1211 2
    // 			$phi pkt_with_priority := 			  1  $on   $entry 			  next_pkt_with_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 343
    # := [next_pkt_with_priority_1290_1218_buf] (next_pkt_with_priority_1290) (next_pkt_with_priority_1290_1218_buffered)     $fullrate
    $buffering $out next_pkt_with_priority_1290_1218_buf next_pkt_with_priority_1290_1218_buffered  1
    # $phi [phi_stmt_1215] (konst_1217_wire_constant next_pkt_with_priority_1290_1218_buffered) ( pkt_with_priority_1215 ) $fullrate
    // $buffering  $out phi_stmt_1215 pkt_with_priority_1215 2
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 346
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_1223_inst] (pkt_1_e_word_1187 konst_1222_wire_constant) (p1_valid_1224)   $flowthrough 
    $delay BITSEL_u33_u1_1223_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 347
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_1228_inst] (pkt_2_e_word_1192 konst_1227_wire_constant) (p2_valid_1229)   $flowthrough 
    $delay BITSEL_u33_u1_1228_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 348
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_1233_inst] (pkt_3_e_word_1197 konst_1232_wire_constant) (p3_valid_1234)   $flowthrough 
    $delay BITSEL_u33_u1_1233_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 349
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_1238_inst] (pkt_4_e_word_1202 konst_1237_wire_constant) (p4_valid_1239)   $flowthrough 
    $delay BITSEL_u33_u1_1238_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 351
    // (active_packet == 1 )
    ==[EQ_u3_u1_1255_inst] (active_packet_1207 konst_1254_wire_constant) (EQ_u3_u1_1255_wire)   $flowthrough 
    $delay EQ_u3_u1_1255_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1258_inst] (EQ_u3_u1_1255_wire p1_valid_1224 konst_1257_wire_constant) (MUX_1258_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_1261_inst] (active_packet_1207 konst_1260_wire_constant) (EQ_u3_u1_1261_wire)   $flowthrough 
    $delay EQ_u3_u1_1261_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1264_inst] (EQ_u3_u1_1261_wire p2_valid_1229 konst_1263_wire_constant) (MUX_1264_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1265_inst] (MUX_1258_wire MUX_1264_wire) (OR_u1_u1_1265_wire)   $flowthrough 
    $delay OR_u1_u1_1265_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_1268_inst] (active_packet_1207 konst_1267_wire_constant) (EQ_u3_u1_1268_wire)   $flowthrough 
    $delay EQ_u3_u1_1268_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1271_inst] (EQ_u3_u1_1268_wire p3_valid_1234 konst_1270_wire_constant) (MUX_1271_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_1274_inst] (active_packet_1207 konst_1273_wire_constant) (EQ_u3_u1_1274_wire)   $flowthrough 
    $delay EQ_u3_u1_1274_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1277_inst] (EQ_u3_u1_1274_wire p4_valid_1239 konst_1276_wire_constant) (MUX_1277_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1278_inst] (MUX_1271_wire MUX_1277_wire) (OR_u1_u1_1278_wire)   $flowthrough 
    $delay OR_u1_u1_1278_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1279_inst] (OR_u1_u1_1265_wire OR_u1_u1_1278_wire) (valid_active_pkt_word_read_1280)   $flowthrough 
    $delay OR_u1_u1_1279_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
    //  file .Aa/switch4x4.opt.aa, line 352
    $call [call_stmt_1290_call] $module prioritySelect(down_counter_1211 active_packet_1207 pkt_with_priority_1215 p1_valid_1224 p2_valid_1229 p3_valid_1234 p4_valid_1239) (next_active_packet_1290 next_pkt_with_priority_1290)   $flowthrough $fullrate
    // 			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 353
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1294_inst] (next_active_packet_1290 konst_1293_wire_constant) (EQ_u3_u1_1294_wire)   $flowthrough 
    $delay EQ_u3_u1_1294_inst 0
    // ( $slice pkt_1_e_word 23 8 ) 
    [:] [slice_1296_inst] (pkt_1_e_word_1187 23 8) (slice_1296_wire)  $flowthrough
    $delay slice_1296_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
    ? [MUX_1298_inst] (EQ_u3_u1_1294_wire slice_1296_wire konst_1297_wire_constant) (MUX_1298_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1301_inst] (next_active_packet_1290 konst_1300_wire_constant) (EQ_u3_u1_1301_wire)   $flowthrough 
    $delay EQ_u3_u1_1301_inst 0
    // ( $slice pkt_2_e_word 23 8 ) 
    [:] [slice_1303_inst] (pkt_2_e_word_1192 23 8) (slice_1303_wire)  $flowthrough
    $delay slice_1303_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
    ? [MUX_1305_inst] (EQ_u3_u1_1301_wire slice_1303_wire konst_1304_wire_constant) (MUX_1305_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) )
    |[OR_u16_u16_1306_inst] (MUX_1298_wire MUX_1305_wire) (OR_u16_u16_1306_wire)   $flowthrough 
    $delay OR_u16_u16_1306_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1309_inst] (next_active_packet_1290 konst_1308_wire_constant) (EQ_u3_u1_1309_wire)   $flowthrough 
    $delay EQ_u3_u1_1309_inst 0
    // ( $slice pkt_3_e_word 23 8 ) 
    [:] [slice_1311_inst] (pkt_3_e_word_1197 23 8) (slice_1311_wire)  $flowthrough
    $delay slice_1311_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
    ? [MUX_1313_inst] (EQ_u3_u1_1309_wire slice_1311_wire konst_1312_wire_constant) (MUX_1313_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1316_inst] (next_active_packet_1290 konst_1315_wire_constant) (EQ_u3_u1_1316_wire)   $flowthrough 
    $delay EQ_u3_u1_1316_inst 0
    // ( $slice pkt_4_e_word 23 8 ) 
    [:] [slice_1318_inst] (pkt_4_e_word_1202 23 8) (slice_1318_wire)  $flowthrough
    $delay slice_1318_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
    ? [MUX_1320_inst] (EQ_u3_u1_1316_wire slice_1318_wire konst_1319_wire_constant) (MUX_1320_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )
    |[OR_u16_u16_1321_inst] (MUX_1313_wire MUX_1320_wire) (OR_u16_u16_1321_wire)   $flowthrough 
    $delay OR_u16_u16_1321_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) ))
    |[OR_u16_u16_1322_inst] (OR_u16_u16_1306_wire OR_u16_u16_1321_wire) (valid_active_pkt_length_1323)   $flowthrough 
    $delay OR_u16_u16_1322_inst 0
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 354
    // (next_active_packet != 0 )
    !=[NEQ_u3_u1_1327_inst] (next_active_packet_1290 konst_1326_wire_constant) (NEQ_u3_u1_1327_wire)   $flowthrough 
    $delay NEQ_u3_u1_1327_inst 0
    // (down_counter == 0 )
    ==[EQ_u16_u1_1330_inst] (down_counter_1211 konst_1329_wire_constant) (EQ_u16_u1_1330_wire)   $flowthrough 
    $delay EQ_u16_u1_1330_inst 0
    // ((next_active_packet != 0 ) & (down_counter == 0 ))
    &[AND_u1_u1_1331_inst] (NEQ_u3_u1_1327_wire EQ_u16_u1_1330_wire) (started_new_packet_1332)   $flowthrough 
    $delay AND_u1_u1_1331_inst 0
    // 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 355
    // (valid_active_pkt_length - 1 )
    -[SUB_u16_u16_1337_inst] (valid_active_pkt_length_1323 konst_1336_wire_constant) (SUB_u16_u16_1337_wire)   $flowthrough 
    $delay SUB_u16_u16_1337_inst 0
    // (down_counter - 1 )
    -[SUB_u16_u16_1341_inst] (down_counter_1211 konst_1340_wire_constant) (SUB_u16_u16_1341_wire)   $flowthrough 
    $delay SUB_u16_u16_1341_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_1343_inst] (valid_active_pkt_word_read_1280 SUB_u16_u16_1341_wire down_counter_1211) (MUX_1343_wire)  $flowthrough
    // ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_1344_inst] (started_new_packet_1332 SUB_u16_u16_1337_wire MUX_1343_wire) (next_down_counter_1345)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 356
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_1348_inst] (p1_valid_1224) (NOT_u1_u1_1348_wire)   $flowthrough
    $delay NOT_u1_u1_1348_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1351_inst] (next_active_packet_1290 konst_1350_wire_constant) (EQ_u3_u1_1351_wire)   $flowthrough 
    $delay EQ_u3_u1_1351_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_1352_inst] (NOT_u1_u1_1348_wire EQ_u3_u1_1351_wire) (read_from_1_1353)   $flowthrough 
    $delay OR_u1_u1_1352_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 357
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_1356_inst] (p2_valid_1229) (NOT_u1_u1_1356_wire)   $flowthrough
    $delay NOT_u1_u1_1356_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1359_inst] (next_active_packet_1290 konst_1358_wire_constant) (EQ_u3_u1_1359_wire)   $flowthrough 
    $delay EQ_u3_u1_1359_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_1360_inst] (NOT_u1_u1_1356_wire EQ_u3_u1_1359_wire) (read_from_2_1361)   $flowthrough 
    $delay OR_u1_u1_1360_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 358
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_1364_inst] (p3_valid_1234) (NOT_u1_u1_1364_wire)   $flowthrough
    $delay NOT_u1_u1_1364_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1367_inst] (next_active_packet_1290 konst_1366_wire_constant) (EQ_u3_u1_1367_wire)   $flowthrough 
    $delay EQ_u3_u1_1367_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_1368_inst] (NOT_u1_u1_1364_wire EQ_u3_u1_1367_wire) (read_from_3_1369)   $flowthrough 
    $delay OR_u1_u1_1368_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 359
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_1372_inst] (p4_valid_1239) (NOT_u1_u1_1372_wire)   $flowthrough
    $delay NOT_u1_u1_1372_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1375_inst] (next_active_packet_1290 konst_1374_wire_constant) (EQ_u3_u1_1375_wire)   $flowthrough 
    $delay EQ_u3_u1_1375_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_1376_inst] (NOT_u1_u1_1372_wire EQ_u3_u1_1375_wire) (read_from_4_1377)   $flowthrough 
    $delay OR_u1_u1_1376_inst 0
    // 			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 360
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1381_inst] (next_active_packet_1290 konst_1380_wire_constant) (EQ_u3_u1_1381_wire)   $flowthrough 
    $delay EQ_u3_u1_1381_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_1383_inst] (pkt_1_e_word_1187 31 0) (slice_1383_wire)  $flowthrough
    $delay slice_1383_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1386_inst] (next_active_packet_1290 konst_1385_wire_constant) (EQ_u3_u1_1386_wire)   $flowthrough 
    $delay EQ_u3_u1_1386_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_1388_inst] (pkt_2_e_word_1192 31 0) (slice_1388_wire)  $flowthrough
    $delay slice_1388_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1391_inst] (next_active_packet_1290 konst_1390_wire_constant) (EQ_u3_u1_1391_wire)   $flowthrough 
    $delay EQ_u3_u1_1391_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_1393_inst] (pkt_3_e_word_1197 31 0) (slice_1393_wire)  $flowthrough
    $delay slice_1393_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_1395_inst] (pkt_4_e_word_1202 31 0) (slice_1395_wire)  $flowthrough
    $delay slice_1395_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
    ? [MUX_1396_inst] (EQ_u3_u1_1391_wire slice_1393_wire slice_1395_wire) (MUX_1396_wire)  $flowthrough
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
    ? [MUX_1397_inst] (EQ_u3_u1_1386_wire slice_1388_wire MUX_1396_wire) (MUX_1397_wire)  $flowthrough
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  ) 
    ? [MUX_1398_inst] (EQ_u3_u1_1381_wire slice_1383_wire MUX_1397_wire) (data_to_out_1399)  $flowthrough
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 361
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1403_inst] (next_active_packet_1290 konst_1402_wire_constant) (EQ_u3_u1_1403_wire)   $flowthrough 
    $delay EQ_u3_u1_1403_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1406_inst] (EQ_u3_u1_1403_wire p1_valid_1224 konst_1405_wire_constant) (MUX_1406_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1409_inst] (next_active_packet_1290 konst_1408_wire_constant) (EQ_u3_u1_1409_wire)   $flowthrough 
    $delay EQ_u3_u1_1409_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1412_inst] (EQ_u3_u1_1409_wire p2_valid_1229 konst_1411_wire_constant) (MUX_1412_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1413_inst] (MUX_1406_wire MUX_1412_wire) (OR_u1_u1_1413_wire)   $flowthrough 
    $delay OR_u1_u1_1413_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1416_inst] (next_active_packet_1290 konst_1415_wire_constant) (EQ_u3_u1_1416_wire)   $flowthrough 
    $delay EQ_u3_u1_1416_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1419_inst] (EQ_u3_u1_1416_wire p3_valid_1234 konst_1418_wire_constant) (MUX_1419_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1422_inst] (next_active_packet_1290 konst_1421_wire_constant) (EQ_u3_u1_1422_wire)   $flowthrough 
    $delay EQ_u3_u1_1422_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1425_inst] (EQ_u3_u1_1422_wire p4_valid_1239 konst_1424_wire_constant) (MUX_1425_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1426_inst] (MUX_1419_wire MUX_1425_wire) (OR_u1_u1_1426_wire)   $flowthrough 
    $delay OR_u1_u1_1426_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1427_inst] (OR_u1_u1_1413_wire OR_u1_u1_1426_wire) (send_flag_1428)   $flowthrough 
    $delay OR_u1_u1_1427_inst 0
    // 			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch4x4.opt.aa, line 362
    // out_data_3
    $ioport $out [WPIPE_out_data_3_1430_inst]  (data_to_out_1399) (out_data_3) $guard ( send_flag_1428 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1185
  //  file .Aa/switch4x4.opt.aa, line 328
  phi_stmt_1187 <=> (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1187_entry_sample_req branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1187_loopback_sample_req) (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1187_phi_mux_ack)
  // noblock_obuf_1_3
  RPIPE_noblock_obuf_1_3_1191_inst <=> (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/RPIPE_noblock_obuf_1_3_1191_Sample/rr branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/RPIPE_noblock_obuf_1_3_1191_Update/cr) (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/RPIPE_noblock_obuf_1_3_1191_Sample/ra branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/RPIPE_noblock_obuf_1_3_1191_Update/ca)
  phi_stmt_1192 <=> (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1192_entry_sample_req branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1192_loopback_sample_req) (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1192_phi_mux_ack)
  // noblock_obuf_2_3
  RPIPE_noblock_obuf_2_3_1196_inst <=> (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/RPIPE_noblock_obuf_2_3_1196_Sample/rr branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/RPIPE_noblock_obuf_2_3_1196_Update/cr) (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/RPIPE_noblock_obuf_2_3_1196_Sample/ra branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/RPIPE_noblock_obuf_2_3_1196_Update/ca)
  phi_stmt_1197 <=> (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1197_entry_sample_req branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1197_loopback_sample_req) (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1197_phi_mux_ack)
  // noblock_obuf_3_3
  RPIPE_noblock_obuf_3_3_1201_inst <=> (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/RPIPE_noblock_obuf_3_3_1201_Sample/rr branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/RPIPE_noblock_obuf_3_3_1201_Update/cr) (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/RPIPE_noblock_obuf_3_3_1201_Sample/ra branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/RPIPE_noblock_obuf_3_3_1201_Update/ca)
  phi_stmt_1202 <=> (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1202_entry_sample_req branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1202_loopback_sample_req) (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1202_phi_mux_ack)
  // noblock_obuf_4_3
  RPIPE_noblock_obuf_4_3_1206_inst <=> (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/RPIPE_noblock_obuf_4_3_1206_Sample/rr branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/RPIPE_noblock_obuf_4_3_1206_Update/cr) (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/RPIPE_noblock_obuf_4_3_1206_Sample/ra branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/RPIPE_noblock_obuf_4_3_1206_Update/ca)
  phi_stmt_1207 <=> (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1207_entry_sample_req branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1207_loopback_sample_req) (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1207_phi_mux_ack)
  next_active_packet_1290_1210_buf <=> (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/R_next_active_packet_1210_Sample/req branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/R_next_active_packet_1210_Update/req) (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/R_next_active_packet_1210_Sample/ack branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/R_next_active_packet_1210_Update/ack)
  phi_stmt_1211 <=> (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1211_entry_sample_req branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1211_loopback_sample_req) (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1211_phi_mux_ack)
  next_down_counter_1345_1214_buf <=> (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/R_next_down_counter_1214_Sample/req branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/R_next_down_counter_1214_Update/req) (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/R_next_down_counter_1214_Sample/ack branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/R_next_down_counter_1214_Update/ack)
  phi_stmt_1215 <=> (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1215_entry_sample_req branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1215_loopback_sample_req) (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/phi_stmt_1215_phi_mux_ack)
  next_pkt_with_priority_1290_1218_buf <=> (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/R_next_pkt_with_priority_1218_Sample/req branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/R_next_pkt_with_priority_1218_Update/req) (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/R_next_pkt_with_priority_1218_Sample/ack branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/R_next_pkt_with_priority_1218_Update/ack)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 346
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 347
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 348
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 349
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 351
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
  //  file .Aa/switch4x4.opt.aa, line 352
  // down_counter
  // active_packet
  // pkt_with_priority
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 353
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
  // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 354
  // ((next_active_packet != 0 ) & (down_counter == 0 ))
  // (next_active_packet != 0 )
  // next_active_packet
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 355
  // started_new_packet
  // (valid_active_pkt_length - 1 )
  // valid_active_pkt_length
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 356
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 357
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 358
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 359
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 360
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // pkt_4_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 361
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_3 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch4x4.opt.aa, line 362
  // data_to_out
  // out_data_3
  WPIPE_out_data_3_1430_inst <=> (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/WPIPE_out_data_3_1430_Sample/req branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/WPIPE_out_data_3_1430_Update/req) (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/WPIPE_out_data_3_1430_Sample/ack branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/WPIPE_out_data_3_1430_Update/ack)
  do_while_stmt_1185_branch <=> (branch_block_stmt_1184/do_while_stmt_1185/do_while_stmt_1185_loop_body/condition_evaluated) (branch_block_stmt_1184/do_while_stmt_1185/loop_exit/ack branch_block_stmt_1184/do_while_stmt_1185/loop_taken/ack)
}
$module [outputPort_4_Daemon] 
{
  // pipe-declarations for block %outputPort_4_Daemon
  //  file .Aa/switch4x4.opt.aa, line 367
  // pipe-declarations for block %outputPort_4_Daemon%loop
  //  file .Aa/switch4x4.opt.aa, line 372
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1447] // Branch Block  file .Aa/switch4x4.opt.aa, line 372
    {
      $P [branch_block_stmt_1447__entry__]
      branch_block_stmt_1447__entry__ <-| ($entry)
      $P [branch_block_stmt_1447__exit__]
      branch_block_stmt_1447__exit__ |-> ($exit)
      $P [do_while_stmt_1448__entry__] 
      $P [do_while_stmt_1448__exit__] 
      // do-while-statement  
      //  file .Aa/switch4x4.opt.aa, line 374
      <o> [do_while_stmt_1448]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1448__entry__] 
        $P[do_while_stmt_1448__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1448_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1450
          // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1450_sample_start_] 
          $T[phi_stmt_1450_sample_completed_] 
          $T[phi_stmt_1450_update_start_] 
          $T[phi_stmt_1450_update_completed_] 
          $T[phi_stmt_1450_sample_start__ps] 
          phi_stmt_1450_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1450_sample_completed__ps] 
          phi_stmt_1450_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1450_update_start__ps] 
          phi_stmt_1450_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1450_update_completed__ps] 
          phi_stmt_1450_update_completed_ <-& (phi_stmt_1450_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1450_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1450_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1450_update_start_)
          $T[phi_stmt_1450_loopback_trigger] 
          phi_stmt_1450_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1450_loopback_sample_req] 
          $T[phi_stmt_1450_loopback_sample_req_ps] 
          phi_stmt_1450_loopback_sample_req <-& (phi_stmt_1450_loopback_sample_req_ps)
          phi_stmt_1450_loopback_sample_req &-> ($null)
          $T[phi_stmt_1450_entry_trigger] 
          phi_stmt_1450_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1450_entry_sample_req] 
          $T[phi_stmt_1450_entry_sample_req_ps] 
          phi_stmt_1450_entry_sample_req <-& (phi_stmt_1450_entry_sample_req_ps)
          phi_stmt_1450_entry_sample_req &-> ($null)
          phi_stmt_1450_update_start_ o<-& (phi_stmt_1450_update_completed_ 0)
          phi_stmt_1450_sample_start_ o<-& (phi_stmt_1450_sample_completed_ 1)
          $T[phi_stmt_1450_merged_reqs] 
          $T[phi_stmt_1450_phi_mux_ack] 
          $T[phi_stmt_1450_phi_mux_ack_ps] 
          phi_stmt_1450_phi_mux_ack_ps <-& (phi_stmt_1450_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1450_update_completed_)
          $T[R_ZERO_33_1452_sample_start__ps] 
          $T[R_ZERO_33_1452_sample_completed__ps] 
          $T[R_ZERO_33_1452_update_start__ps] 
          $T[R_ZERO_33_1452_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1452_sample_start_] 
          $T[R_ZERO_33_1452_sample_completed_] 
          R_ZERO_33_1452_sample_completed_ <-& (R_ZERO_33_1452_sample_start_)
          $T[R_ZERO_33_1452_update_start_] 
          $T [R_ZERO_33_1452_update_completed_] $delay 
          R_ZERO_33_1452_update_completed_ <-& (R_ZERO_33_1452_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1452_sample_start_ <-& (R_ZERO_33_1452_sample_start__ps)
          R_ZERO_33_1452_update_start_ <-& (R_ZERO_33_1452_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1452_sample_completed__ps <-& (R_ZERO_33_1452_sample_completed_)
          R_ZERO_33_1452_update_completed__ps <-& (R_ZERO_33_1452_update_completed_)
          $T[RPIPE_noblock_obuf_1_4_1454_sample_start__ps] 
          $T[RPIPE_noblock_obuf_1_4_1454_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_1_4_1454_update_start__ps] 
          $T[RPIPE_noblock_obuf_1_4_1454_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_1_4
          $T[RPIPE_noblock_obuf_1_4_1454_sample_start_] 
          $T[RPIPE_noblock_obuf_1_4_1454_sample_completed_] 
          $T[RPIPE_noblock_obuf_1_4_1454_update_start_] 
          $T[RPIPE_noblock_obuf_1_4_1454_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_1_4_1454 with guard R_read_from_1_1453
          // root phi_stmt_1450 not in visited_elements
          // root phi_stmt_1455 not in visited_elements
          // root phi_stmt_1460 not in visited_elements
          // root phi_stmt_1465 not in visited_elements
          // root phi_stmt_1470 not in visited_elements
          // root phi_stmt_1474 not in visited_elements
          // root phi_stmt_1478 not in visited_elements
          // RAW reenables for read_from_1
          ;;[RPIPE_noblock_obuf_1_4_1454_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_1_4_1454_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_1_4_1454_sample_start_ &-> (RPIPE_noblock_obuf_1_4_1454_Sample)
          RPIPE_noblock_obuf_1_4_1454_sample_completed_ <-& (RPIPE_noblock_obuf_1_4_1454_Sample)
          RPIPE_noblock_obuf_1_4_1454_update_start_ <-& (RPIPE_noblock_obuf_1_4_1454_sample_completed_)
          RPIPE_noblock_obuf_1_4_1454_update_start_ &-> (RPIPE_noblock_obuf_1_4_1454_Update)
          RPIPE_noblock_obuf_1_4_1454_update_completed_ <-& (RPIPE_noblock_obuf_1_4_1454_Update)
          RPIPE_noblock_obuf_1_4_1454_sample_start_ o<-& (RPIPE_noblock_obuf_1_4_1454_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_1_4_1454_sample_start_ <-& (RPIPE_noblock_obuf_1_4_1454_sample_start__ps)
          RPIPE_noblock_obuf_1_4_1454_update_start_ <-& (RPIPE_noblock_obuf_1_4_1454_update_start__ps)
          // RAW reenables for noblock_obuf_1_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_1_4_1454_sample_completed__ps <-& (RPIPE_noblock_obuf_1_4_1454_sample_completed_)
          RPIPE_noblock_obuf_1_4_1454_update_completed__ps <-& (RPIPE_noblock_obuf_1_4_1454_update_completed_)
          $phisequencer [ phi_stmt_1450_phi_seq] : 
          phi_stmt_1450_entry_trigger R_ZERO_33_1452_sample_start__ps R_ZERO_33_1452_sample_completed__ps R_ZERO_33_1452_update_start__ps R_ZERO_33_1452_update_completed__ps phi_stmt_1450_loopback_trigger RPIPE_noblock_obuf_1_4_1454_sample_start__ps RPIPE_noblock_obuf_1_4_1454_sample_completed__ps RPIPE_noblock_obuf_1_4_1454_update_start__ps RPIPE_noblock_obuf_1_4_1454_update_completed__ps :
          phi_stmt_1450_sample_start__ps phi_stmt_1450_sample_completed__ps phi_stmt_1450_update_start__ps phi_stmt_1450_update_completed__ps :
          phi_stmt_1450_entry_sample_req_ps phi_stmt_1450_loopback_sample_req_ps : 
          phi_stmt_1450_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1450
          // start:  PHI statement phi_stmt_1455
          // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1455_sample_start_] 
          $T[phi_stmt_1455_sample_completed_] 
          $T[phi_stmt_1455_update_start_] 
          $T[phi_stmt_1455_update_completed_] 
          $T[phi_stmt_1455_sample_start__ps] 
          phi_stmt_1455_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1455_sample_completed__ps] 
          phi_stmt_1455_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1455_update_start__ps] 
          phi_stmt_1455_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1455_update_completed__ps] 
          phi_stmt_1455_update_completed_ <-& (phi_stmt_1455_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1455_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1455_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1455_update_start_)
          $T[phi_stmt_1455_loopback_trigger] 
          phi_stmt_1455_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1455_loopback_sample_req] 
          $T[phi_stmt_1455_loopback_sample_req_ps] 
          phi_stmt_1455_loopback_sample_req <-& (phi_stmt_1455_loopback_sample_req_ps)
          phi_stmt_1455_loopback_sample_req &-> ($null)
          $T[phi_stmt_1455_entry_trigger] 
          phi_stmt_1455_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1455_entry_sample_req] 
          $T[phi_stmt_1455_entry_sample_req_ps] 
          phi_stmt_1455_entry_sample_req <-& (phi_stmt_1455_entry_sample_req_ps)
          phi_stmt_1455_entry_sample_req &-> ($null)
          phi_stmt_1455_update_start_ o<-& (phi_stmt_1455_update_completed_ 0)
          phi_stmt_1455_sample_start_ o<-& (phi_stmt_1455_sample_completed_ 1)
          $T[phi_stmt_1455_merged_reqs] 
          $T[phi_stmt_1455_phi_mux_ack] 
          $T[phi_stmt_1455_phi_mux_ack_ps] 
          phi_stmt_1455_phi_mux_ack_ps <-& (phi_stmt_1455_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1455_update_completed_)
          $T[R_ZERO_33_1457_sample_start__ps] 
          $T[R_ZERO_33_1457_sample_completed__ps] 
          $T[R_ZERO_33_1457_update_start__ps] 
          $T[R_ZERO_33_1457_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1457_sample_start_] 
          $T[R_ZERO_33_1457_sample_completed_] 
          R_ZERO_33_1457_sample_completed_ <-& (R_ZERO_33_1457_sample_start_)
          $T[R_ZERO_33_1457_update_start_] 
          $T [R_ZERO_33_1457_update_completed_] $delay 
          R_ZERO_33_1457_update_completed_ <-& (R_ZERO_33_1457_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1457_sample_start_ <-& (R_ZERO_33_1457_sample_start__ps)
          R_ZERO_33_1457_update_start_ <-& (R_ZERO_33_1457_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1457_sample_completed__ps <-& (R_ZERO_33_1457_sample_completed_)
          R_ZERO_33_1457_update_completed__ps <-& (R_ZERO_33_1457_update_completed_)
          $T[RPIPE_noblock_obuf_2_4_1459_sample_start__ps] 
          $T[RPIPE_noblock_obuf_2_4_1459_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_2_4_1459_update_start__ps] 
          $T[RPIPE_noblock_obuf_2_4_1459_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_2_4
          $T[RPIPE_noblock_obuf_2_4_1459_sample_start_] 
          $T[RPIPE_noblock_obuf_2_4_1459_sample_completed_] 
          $T[RPIPE_noblock_obuf_2_4_1459_update_start_] 
          $T[RPIPE_noblock_obuf_2_4_1459_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_2_4_1459 with guard R_read_from_2_1458
          // root phi_stmt_1455 not in visited_elements
          // root phi_stmt_1460 not in visited_elements
          // root phi_stmt_1465 not in visited_elements
          // root phi_stmt_1470 not in visited_elements
          // root phi_stmt_1474 not in visited_elements
          // root phi_stmt_1478 not in visited_elements
          // RAW reenables for read_from_2
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_2_4_1459_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_2_4_1459_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_2_4_1459_sample_start_ &-> (RPIPE_noblock_obuf_2_4_1459_Sample)
          RPIPE_noblock_obuf_2_4_1459_sample_completed_ <-& (RPIPE_noblock_obuf_2_4_1459_Sample)
          RPIPE_noblock_obuf_2_4_1459_update_start_ <-& (RPIPE_noblock_obuf_2_4_1459_sample_completed_)
          RPIPE_noblock_obuf_2_4_1459_update_start_ &-> (RPIPE_noblock_obuf_2_4_1459_Update)
          RPIPE_noblock_obuf_2_4_1459_update_completed_ <-& (RPIPE_noblock_obuf_2_4_1459_Update)
          RPIPE_noblock_obuf_2_4_1459_sample_start_ o<-& (RPIPE_noblock_obuf_2_4_1459_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_2_4_1459_sample_start_ <-& (RPIPE_noblock_obuf_2_4_1459_sample_start__ps)
          RPIPE_noblock_obuf_2_4_1459_update_start_ <-& (RPIPE_noblock_obuf_2_4_1459_update_start__ps)
          // RAW reenables for noblock_obuf_2_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_2_4_1459_sample_completed__ps <-& (RPIPE_noblock_obuf_2_4_1459_sample_completed_)
          RPIPE_noblock_obuf_2_4_1459_update_completed__ps <-& (RPIPE_noblock_obuf_2_4_1459_update_completed_)
          $phisequencer [ phi_stmt_1455_phi_seq] : 
          phi_stmt_1455_entry_trigger R_ZERO_33_1457_sample_start__ps R_ZERO_33_1457_sample_completed__ps R_ZERO_33_1457_update_start__ps R_ZERO_33_1457_update_completed__ps phi_stmt_1455_loopback_trigger RPIPE_noblock_obuf_2_4_1459_sample_start__ps RPIPE_noblock_obuf_2_4_1459_sample_completed__ps RPIPE_noblock_obuf_2_4_1459_update_start__ps RPIPE_noblock_obuf_2_4_1459_update_completed__ps :
          phi_stmt_1455_sample_start__ps phi_stmt_1455_sample_completed__ps phi_stmt_1455_update_start__ps phi_stmt_1455_update_completed__ps :
          phi_stmt_1455_entry_sample_req_ps phi_stmt_1455_loopback_sample_req_ps : 
          phi_stmt_1455_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1455
          // start:  PHI statement phi_stmt_1460
          // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1460_sample_start_] 
          $T[phi_stmt_1460_sample_completed_] 
          $T[phi_stmt_1460_update_start_] 
          $T[phi_stmt_1460_update_completed_] 
          $T[phi_stmt_1460_sample_start__ps] 
          phi_stmt_1460_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1460_sample_completed__ps] 
          phi_stmt_1460_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1460_update_start__ps] 
          phi_stmt_1460_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1460_update_completed__ps] 
          phi_stmt_1460_update_completed_ <-& (phi_stmt_1460_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1460_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1460_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1460_update_start_)
          $T[phi_stmt_1460_loopback_trigger] 
          phi_stmt_1460_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1460_loopback_sample_req] 
          $T[phi_stmt_1460_loopback_sample_req_ps] 
          phi_stmt_1460_loopback_sample_req <-& (phi_stmt_1460_loopback_sample_req_ps)
          phi_stmt_1460_loopback_sample_req &-> ($null)
          $T[phi_stmt_1460_entry_trigger] 
          phi_stmt_1460_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1460_entry_sample_req] 
          $T[phi_stmt_1460_entry_sample_req_ps] 
          phi_stmt_1460_entry_sample_req <-& (phi_stmt_1460_entry_sample_req_ps)
          phi_stmt_1460_entry_sample_req &-> ($null)
          phi_stmt_1460_update_start_ o<-& (phi_stmt_1460_update_completed_ 0)
          phi_stmt_1460_sample_start_ o<-& (phi_stmt_1460_sample_completed_ 1)
          $T[phi_stmt_1460_merged_reqs] 
          $T[phi_stmt_1460_phi_mux_ack] 
          $T[phi_stmt_1460_phi_mux_ack_ps] 
          phi_stmt_1460_phi_mux_ack_ps <-& (phi_stmt_1460_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1460_update_completed_)
          $T[R_ZERO_33_1462_sample_start__ps] 
          $T[R_ZERO_33_1462_sample_completed__ps] 
          $T[R_ZERO_33_1462_update_start__ps] 
          $T[R_ZERO_33_1462_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1462_sample_start_] 
          $T[R_ZERO_33_1462_sample_completed_] 
          R_ZERO_33_1462_sample_completed_ <-& (R_ZERO_33_1462_sample_start_)
          $T[R_ZERO_33_1462_update_start_] 
          $T [R_ZERO_33_1462_update_completed_] $delay 
          R_ZERO_33_1462_update_completed_ <-& (R_ZERO_33_1462_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1462_sample_start_ <-& (R_ZERO_33_1462_sample_start__ps)
          R_ZERO_33_1462_update_start_ <-& (R_ZERO_33_1462_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1462_sample_completed__ps <-& (R_ZERO_33_1462_sample_completed_)
          R_ZERO_33_1462_update_completed__ps <-& (R_ZERO_33_1462_update_completed_)
          $T[RPIPE_noblock_obuf_3_4_1464_sample_start__ps] 
          $T[RPIPE_noblock_obuf_3_4_1464_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_3_4_1464_update_start__ps] 
          $T[RPIPE_noblock_obuf_3_4_1464_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_3_4
          $T[RPIPE_noblock_obuf_3_4_1464_sample_start_] 
          $T[RPIPE_noblock_obuf_3_4_1464_sample_completed_] 
          $T[RPIPE_noblock_obuf_3_4_1464_update_start_] 
          $T[RPIPE_noblock_obuf_3_4_1464_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_3_4_1464 with guard R_read_from_3_1463
          // root phi_stmt_1460 not in visited_elements
          // root phi_stmt_1465 not in visited_elements
          // root phi_stmt_1470 not in visited_elements
          // root phi_stmt_1474 not in visited_elements
          // root phi_stmt_1478 not in visited_elements
          // RAW reenables for read_from_3
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_3_4_1464_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_3_4_1464_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_3_4_1464_sample_start_ &-> (RPIPE_noblock_obuf_3_4_1464_Sample)
          RPIPE_noblock_obuf_3_4_1464_sample_completed_ <-& (RPIPE_noblock_obuf_3_4_1464_Sample)
          RPIPE_noblock_obuf_3_4_1464_update_start_ <-& (RPIPE_noblock_obuf_3_4_1464_sample_completed_)
          RPIPE_noblock_obuf_3_4_1464_update_start_ &-> (RPIPE_noblock_obuf_3_4_1464_Update)
          RPIPE_noblock_obuf_3_4_1464_update_completed_ <-& (RPIPE_noblock_obuf_3_4_1464_Update)
          RPIPE_noblock_obuf_3_4_1464_sample_start_ o<-& (RPIPE_noblock_obuf_3_4_1464_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_3_4_1464_sample_start_ <-& (RPIPE_noblock_obuf_3_4_1464_sample_start__ps)
          RPIPE_noblock_obuf_3_4_1464_update_start_ <-& (RPIPE_noblock_obuf_3_4_1464_update_start__ps)
          // RAW reenables for noblock_obuf_3_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_3_4_1464_sample_completed__ps <-& (RPIPE_noblock_obuf_3_4_1464_sample_completed_)
          RPIPE_noblock_obuf_3_4_1464_update_completed__ps <-& (RPIPE_noblock_obuf_3_4_1464_update_completed_)
          $phisequencer [ phi_stmt_1460_phi_seq] : 
          phi_stmt_1460_entry_trigger R_ZERO_33_1462_sample_start__ps R_ZERO_33_1462_sample_completed__ps R_ZERO_33_1462_update_start__ps R_ZERO_33_1462_update_completed__ps phi_stmt_1460_loopback_trigger RPIPE_noblock_obuf_3_4_1464_sample_start__ps RPIPE_noblock_obuf_3_4_1464_sample_completed__ps RPIPE_noblock_obuf_3_4_1464_update_start__ps RPIPE_noblock_obuf_3_4_1464_update_completed__ps :
          phi_stmt_1460_sample_start__ps phi_stmt_1460_sample_completed__ps phi_stmt_1460_update_start__ps phi_stmt_1460_update_completed__ps :
          phi_stmt_1460_entry_sample_req_ps phi_stmt_1460_loopback_sample_req_ps : 
          phi_stmt_1460_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1460
          // start:  PHI statement phi_stmt_1465
          // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1465_sample_start_] 
          $T[phi_stmt_1465_sample_completed_] 
          $T[phi_stmt_1465_update_start_] 
          $T[phi_stmt_1465_update_completed_] 
          $T[phi_stmt_1465_sample_start__ps] 
          phi_stmt_1465_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1465_sample_completed__ps] 
          phi_stmt_1465_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1465_update_start__ps] 
          phi_stmt_1465_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1465_update_completed__ps] 
          phi_stmt_1465_update_completed_ <-& (phi_stmt_1465_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1465_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1465_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1465_update_start_)
          $T[phi_stmt_1465_loopback_trigger] 
          phi_stmt_1465_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1465_loopback_sample_req] 
          $T[phi_stmt_1465_loopback_sample_req_ps] 
          phi_stmt_1465_loopback_sample_req <-& (phi_stmt_1465_loopback_sample_req_ps)
          phi_stmt_1465_loopback_sample_req &-> ($null)
          $T[phi_stmt_1465_entry_trigger] 
          phi_stmt_1465_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1465_entry_sample_req] 
          $T[phi_stmt_1465_entry_sample_req_ps] 
          phi_stmt_1465_entry_sample_req <-& (phi_stmt_1465_entry_sample_req_ps)
          phi_stmt_1465_entry_sample_req &-> ($null)
          phi_stmt_1465_update_start_ o<-& (phi_stmt_1465_update_completed_ 0)
          phi_stmt_1465_sample_start_ o<-& (phi_stmt_1465_sample_completed_ 1)
          $T[phi_stmt_1465_merged_reqs] 
          $T[phi_stmt_1465_phi_mux_ack] 
          $T[phi_stmt_1465_phi_mux_ack_ps] 
          phi_stmt_1465_phi_mux_ack_ps <-& (phi_stmt_1465_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1465_update_completed_)
          $T[R_ZERO_33_1467_sample_start__ps] 
          $T[R_ZERO_33_1467_sample_completed__ps] 
          $T[R_ZERO_33_1467_update_start__ps] 
          $T[R_ZERO_33_1467_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_33_1467_sample_start_] 
          $T[R_ZERO_33_1467_sample_completed_] 
          R_ZERO_33_1467_sample_completed_ <-& (R_ZERO_33_1467_sample_start_)
          $T[R_ZERO_33_1467_update_start_] 
          $T [R_ZERO_33_1467_update_completed_] $delay 
          R_ZERO_33_1467_update_completed_ <-& (R_ZERO_33_1467_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_33_1467_sample_start_ <-& (R_ZERO_33_1467_sample_start__ps)
          R_ZERO_33_1467_update_start_ <-& (R_ZERO_33_1467_update_start__ps)
          // Phi complete dependency.
          R_ZERO_33_1467_sample_completed__ps <-& (R_ZERO_33_1467_sample_completed_)
          R_ZERO_33_1467_update_completed__ps <-& (R_ZERO_33_1467_update_completed_)
          $T[RPIPE_noblock_obuf_4_4_1469_sample_start__ps] 
          $T[RPIPE_noblock_obuf_4_4_1469_sample_completed__ps] 
          $T[RPIPE_noblock_obuf_4_4_1469_update_start__ps] 
          $T[RPIPE_noblock_obuf_4_4_1469_update_completed__ps] 
          // source expression in Phi alternative 1
          // noblock_obuf_4_4
          $T[RPIPE_noblock_obuf_4_4_1469_sample_start_] 
          $T[RPIPE_noblock_obuf_4_4_1469_sample_completed_] 
          $T[RPIPE_noblock_obuf_4_4_1469_update_start_] 
          $T[RPIPE_noblock_obuf_4_4_1469_update_completed_] 
          // Guard dependency for expression RPIPE_noblock_obuf_4_4_1469 with guard R_read_from_4_1468
          // root phi_stmt_1465 not in visited_elements
          // root phi_stmt_1470 not in visited_elements
          // root phi_stmt_1474 not in visited_elements
          // root phi_stmt_1478 not in visited_elements
          // RAW reenables for read_from_4
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          ;;[RPIPE_noblock_obuf_4_4_1469_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_noblock_obuf_4_4_1469_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_noblock_obuf_4_4_1469_sample_start_ &-> (RPIPE_noblock_obuf_4_4_1469_Sample)
          RPIPE_noblock_obuf_4_4_1469_sample_completed_ <-& (RPIPE_noblock_obuf_4_4_1469_Sample)
          RPIPE_noblock_obuf_4_4_1469_update_start_ <-& (RPIPE_noblock_obuf_4_4_1469_sample_completed_)
          RPIPE_noblock_obuf_4_4_1469_update_start_ &-> (RPIPE_noblock_obuf_4_4_1469_Update)
          RPIPE_noblock_obuf_4_4_1469_update_completed_ <-& (RPIPE_noblock_obuf_4_4_1469_Update)
          RPIPE_noblock_obuf_4_4_1469_sample_start_ o<-& (RPIPE_noblock_obuf_4_4_1469_update_completed_ 0)
          // Phi start dependency
          RPIPE_noblock_obuf_4_4_1469_sample_start_ <-& (RPIPE_noblock_obuf_4_4_1469_sample_start__ps)
          RPIPE_noblock_obuf_4_4_1469_update_start_ <-& (RPIPE_noblock_obuf_4_4_1469_update_start__ps)
          // RAW reenables for noblock_obuf_4_4
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_noblock_obuf_4_4_1469_sample_completed__ps <-& (RPIPE_noblock_obuf_4_4_1469_sample_completed_)
          RPIPE_noblock_obuf_4_4_1469_update_completed__ps <-& (RPIPE_noblock_obuf_4_4_1469_update_completed_)
          $phisequencer [ phi_stmt_1465_phi_seq] : 
          phi_stmt_1465_entry_trigger R_ZERO_33_1467_sample_start__ps R_ZERO_33_1467_sample_completed__ps R_ZERO_33_1467_update_start__ps R_ZERO_33_1467_update_completed__ps phi_stmt_1465_loopback_trigger RPIPE_noblock_obuf_4_4_1469_sample_start__ps RPIPE_noblock_obuf_4_4_1469_sample_completed__ps RPIPE_noblock_obuf_4_4_1469_update_start__ps RPIPE_noblock_obuf_4_4_1469_update_completed__ps :
          phi_stmt_1465_sample_start__ps phi_stmt_1465_sample_completed__ps phi_stmt_1465_update_start__ps phi_stmt_1465_update_completed__ps :
          phi_stmt_1465_entry_sample_req_ps phi_stmt_1465_loopback_sample_req_ps : 
          phi_stmt_1465_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1465
          // start:  PHI statement phi_stmt_1470
          // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1470_sample_start_] 
          $T[phi_stmt_1470_sample_completed_] 
          $T[phi_stmt_1470_update_start_] 
          $T[phi_stmt_1470_update_completed_] 
          $T[phi_stmt_1470_sample_start__ps] 
          phi_stmt_1470_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1470_sample_completed__ps] 
          phi_stmt_1470_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1470_update_start__ps] 
          phi_stmt_1470_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1470_update_completed__ps] 
          phi_stmt_1470_update_completed_ <-& (phi_stmt_1470_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1470_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1470_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1470_update_start_)
          $T[phi_stmt_1470_loopback_trigger] 
          phi_stmt_1470_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1470_loopback_sample_req] 
          $T[phi_stmt_1470_loopback_sample_req_ps] 
          phi_stmt_1470_loopback_sample_req <-& (phi_stmt_1470_loopback_sample_req_ps)
          phi_stmt_1470_loopback_sample_req &-> ($null)
          $T[phi_stmt_1470_entry_trigger] 
          phi_stmt_1470_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1470_entry_sample_req] 
          $T[phi_stmt_1470_entry_sample_req_ps] 
          phi_stmt_1470_entry_sample_req <-& (phi_stmt_1470_entry_sample_req_ps)
          phi_stmt_1470_entry_sample_req &-> ($null)
          phi_stmt_1470_update_start_ o<-& (phi_stmt_1470_update_completed_ 0)
          phi_stmt_1470_sample_start_ o<-& (phi_stmt_1470_sample_completed_ 1)
          $T[phi_stmt_1470_merged_reqs] 
          $T[phi_stmt_1470_phi_mux_ack] 
          $T[phi_stmt_1470_phi_mux_ack_ps] 
          phi_stmt_1470_phi_mux_ack_ps <-& (phi_stmt_1470_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1470_update_completed_)
          $T[R_ZERO_3_1472_sample_start__ps] 
          $T[R_ZERO_3_1472_sample_completed__ps] 
          $T[R_ZERO_3_1472_update_start__ps] 
          $T[R_ZERO_3_1472_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_3_1472_sample_start_] 
          $T[R_ZERO_3_1472_sample_completed_] 
          R_ZERO_3_1472_sample_completed_ <-& (R_ZERO_3_1472_sample_start_)
          $T[R_ZERO_3_1472_update_start_] 
          $T [R_ZERO_3_1472_update_completed_] $delay 
          R_ZERO_3_1472_update_completed_ <-& (R_ZERO_3_1472_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_3_1472_sample_start_ <-& (R_ZERO_3_1472_sample_start__ps)
          R_ZERO_3_1472_update_start_ <-& (R_ZERO_3_1472_update_start__ps)
          // Phi complete dependency.
          R_ZERO_3_1472_sample_completed__ps <-& (R_ZERO_3_1472_sample_completed_)
          R_ZERO_3_1472_update_completed__ps <-& (R_ZERO_3_1472_update_completed_)
          $T[R_next_active_packet_1473_sample_start__ps] 
          $T[R_next_active_packet_1473_sample_completed__ps] 
          $T[R_next_active_packet_1473_update_start__ps] 
          $T[R_next_active_packet_1473_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_active_packet_1473_sample_start_] 
          $T[R_next_active_packet_1473_sample_completed_] 
          $T[R_next_active_packet_1473_update_start_] 
          $T[R_next_active_packet_1473_update_completed_] 
          ;;[R_next_active_packet_1473_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_active_packet_1473_sample_start_ &-> (R_next_active_packet_1473_Sample)
          R_next_active_packet_1473_sample_completed_ <-& (R_next_active_packet_1473_Sample)
          ;;[R_next_active_packet_1473_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_active_packet_1473_update_start_ &-> (R_next_active_packet_1473_Update)
          R_next_active_packet_1473_update_completed_ <-& (R_next_active_packet_1473_Update)
          // RAW reenables for next_active_packet
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_active_packet_1473_sample_start_ <-& (R_next_active_packet_1473_sample_start__ps)
          R_next_active_packet_1473_update_start_ <-& (R_next_active_packet_1473_update_start__ps)
          // Phi complete dependency.
          R_next_active_packet_1473_sample_completed__ps <-& (R_next_active_packet_1473_sample_completed_)
          R_next_active_packet_1473_update_completed__ps <-& (R_next_active_packet_1473_update_completed_)
          $phisequencer [ phi_stmt_1470_phi_seq] : 
          phi_stmt_1470_entry_trigger R_ZERO_3_1472_sample_start__ps R_ZERO_3_1472_sample_completed__ps R_ZERO_3_1472_update_start__ps R_ZERO_3_1472_update_completed__ps phi_stmt_1470_loopback_trigger R_next_active_packet_1473_sample_start__ps R_next_active_packet_1473_sample_completed__ps R_next_active_packet_1473_update_start__ps R_next_active_packet_1473_update_completed__ps :
          phi_stmt_1470_sample_start__ps phi_stmt_1470_sample_completed__ps phi_stmt_1470_update_start__ps phi_stmt_1470_update_completed__ps :
          phi_stmt_1470_entry_sample_req_ps phi_stmt_1470_loopback_sample_req_ps : 
          phi_stmt_1470_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1470
          // start:  PHI statement phi_stmt_1474
          // 			$phi down_counter := 			  ZERO_16 $on   $entry 			  next_down_counter $on   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_1474_sample_start_] 
          $T[phi_stmt_1474_sample_completed_] 
          $T[phi_stmt_1474_update_start_] 
          $T[phi_stmt_1474_update_completed_] 
          $T[phi_stmt_1474_sample_start__ps] 
          phi_stmt_1474_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1474_sample_completed__ps] 
          phi_stmt_1474_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1474_update_start__ps] 
          phi_stmt_1474_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1474_update_completed__ps] 
          phi_stmt_1474_update_completed_ <-& (phi_stmt_1474_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1474_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1474_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1474_update_start_)
          $T[phi_stmt_1474_loopback_trigger] 
          phi_stmt_1474_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1474_loopback_sample_req] 
          $T[phi_stmt_1474_loopback_sample_req_ps] 
          phi_stmt_1474_loopback_sample_req <-& (phi_stmt_1474_loopback_sample_req_ps)
          phi_stmt_1474_loopback_sample_req &-> ($null)
          $T[phi_stmt_1474_entry_trigger] 
          phi_stmt_1474_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1474_entry_sample_req] 
          $T[phi_stmt_1474_entry_sample_req_ps] 
          phi_stmt_1474_entry_sample_req <-& (phi_stmt_1474_entry_sample_req_ps)
          phi_stmt_1474_entry_sample_req &-> ($null)
          phi_stmt_1474_update_start_ o<-& (phi_stmt_1474_update_completed_ 0)
          phi_stmt_1474_sample_start_ o<-& (phi_stmt_1474_sample_completed_ 1)
          $T[phi_stmt_1474_merged_reqs] 
          $T[phi_stmt_1474_phi_mux_ack] 
          $T[phi_stmt_1474_phi_mux_ack_ps] 
          phi_stmt_1474_phi_mux_ack_ps <-& (phi_stmt_1474_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1474_update_completed_)
          $T[R_ZERO_16_1476_sample_start__ps] 
          $T[R_ZERO_16_1476_sample_completed__ps] 
          $T[R_ZERO_16_1476_update_start__ps] 
          $T[R_ZERO_16_1476_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_ZERO_16_1476_sample_start_] 
          $T[R_ZERO_16_1476_sample_completed_] 
          R_ZERO_16_1476_sample_completed_ <-& (R_ZERO_16_1476_sample_start_)
          $T[R_ZERO_16_1476_update_start_] 
          $T [R_ZERO_16_1476_update_completed_] $delay 
          R_ZERO_16_1476_update_completed_ <-& (R_ZERO_16_1476_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_ZERO_16_1476_sample_start_ <-& (R_ZERO_16_1476_sample_start__ps)
          R_ZERO_16_1476_update_start_ <-& (R_ZERO_16_1476_update_start__ps)
          // Phi complete dependency.
          R_ZERO_16_1476_sample_completed__ps <-& (R_ZERO_16_1476_sample_completed_)
          R_ZERO_16_1476_update_completed__ps <-& (R_ZERO_16_1476_update_completed_)
          $T[R_next_down_counter_1477_sample_start__ps] 
          $T[R_next_down_counter_1477_sample_completed__ps] 
          $T[R_next_down_counter_1477_update_start__ps] 
          $T[R_next_down_counter_1477_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_down_counter_1477_sample_start_] 
          $T[R_next_down_counter_1477_sample_completed_] 
          $T[R_next_down_counter_1477_update_start_] 
          $T[R_next_down_counter_1477_update_completed_] 
          ;;[R_next_down_counter_1477_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_down_counter_1477_sample_start_ &-> (R_next_down_counter_1477_Sample)
          R_next_down_counter_1477_sample_completed_ <-& (R_next_down_counter_1477_Sample)
          ;;[R_next_down_counter_1477_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_down_counter_1477_update_start_ &-> (R_next_down_counter_1477_Update)
          R_next_down_counter_1477_update_completed_ <-& (R_next_down_counter_1477_Update)
          // RAW reenables for next_down_counter
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_down_counter_1477_sample_start_ <-& (R_next_down_counter_1477_sample_start__ps)
          R_next_down_counter_1477_update_start_ <-& (R_next_down_counter_1477_update_start__ps)
          // Phi complete dependency.
          R_next_down_counter_1477_sample_completed__ps <-& (R_next_down_counter_1477_sample_completed_)
          R_next_down_counter_1477_update_completed__ps <-& (R_next_down_counter_1477_update_completed_)
          $phisequencer [ phi_stmt_1474_phi_seq] : 
          phi_stmt_1474_entry_trigger R_ZERO_16_1476_sample_start__ps R_ZERO_16_1476_sample_completed__ps R_ZERO_16_1476_update_start__ps R_ZERO_16_1476_update_completed__ps phi_stmt_1474_loopback_trigger R_next_down_counter_1477_sample_start__ps R_next_down_counter_1477_sample_completed__ps R_next_down_counter_1477_update_start__ps R_next_down_counter_1477_update_completed__ps :
          phi_stmt_1474_sample_start__ps phi_stmt_1474_sample_completed__ps phi_stmt_1474_update_start__ps phi_stmt_1474_update_completed__ps :
          phi_stmt_1474_entry_sample_req_ps phi_stmt_1474_loopback_sample_req_ps : 
          phi_stmt_1474_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1474
          // start:  PHI statement phi_stmt_1478
          // 			$phi pkt_with_priority := 			  1  $on   $entry 			  next_pkt_with_priority $on   $loopback 
          // type of target is $uint<3>
          $T[phi_stmt_1478_sample_start_] 
          $T[phi_stmt_1478_sample_completed_] 
          $T[phi_stmt_1478_update_start_] 
          $T[phi_stmt_1478_update_completed_] 
          $T[phi_stmt_1478_sample_start__ps] 
          phi_stmt_1478_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1478_sample_completed__ps] 
          phi_stmt_1478_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1478_update_start__ps] 
          phi_stmt_1478_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1478_update_completed__ps] 
          phi_stmt_1478_update_completed_ <-& (phi_stmt_1478_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1478_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1478_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1478_update_start_)
          $T[phi_stmt_1478_loopback_trigger] 
          phi_stmt_1478_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1478_loopback_sample_req] 
          $T[phi_stmt_1478_loopback_sample_req_ps] 
          phi_stmt_1478_loopback_sample_req <-& (phi_stmt_1478_loopback_sample_req_ps)
          phi_stmt_1478_loopback_sample_req &-> ($null)
          $T[phi_stmt_1478_entry_trigger] 
          phi_stmt_1478_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1478_entry_sample_req] 
          $T[phi_stmt_1478_entry_sample_req_ps] 
          phi_stmt_1478_entry_sample_req <-& (phi_stmt_1478_entry_sample_req_ps)
          phi_stmt_1478_entry_sample_req &-> ($null)
          phi_stmt_1478_update_start_ o<-& (phi_stmt_1478_update_completed_ 0)
          phi_stmt_1478_sample_start_ o<-& (phi_stmt_1478_sample_completed_ 1)
          $T[phi_stmt_1478_merged_reqs] 
          $T[phi_stmt_1478_phi_mux_ack] 
          $T[phi_stmt_1478_phi_mux_ack_ps] 
          phi_stmt_1478_phi_mux_ack_ps <-& (phi_stmt_1478_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1478_update_completed_)
          $T[konst_1480_sample_start__ps] 
          $T[konst_1480_sample_completed__ps] 
          $T[konst_1480_update_start__ps] 
          $T[konst_1480_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[konst_1480_sample_start_] 
          $T[konst_1480_sample_completed_] 
          konst_1480_sample_completed_ <-& (konst_1480_sample_start_)
          $T[konst_1480_update_start_] 
          $T [konst_1480_update_completed_] $delay 
          konst_1480_update_completed_ <-& (konst_1480_update_start_)
          // Phi start dependency for implicit/constant alternative.
          konst_1480_sample_start_ <-& (konst_1480_sample_start__ps)
          konst_1480_update_start_ <-& (konst_1480_update_start__ps)
          // Phi complete dependency.
          konst_1480_sample_completed__ps <-& (konst_1480_sample_completed_)
          konst_1480_update_completed__ps <-& (konst_1480_update_completed_)
          $T[R_next_pkt_with_priority_1481_sample_start__ps] 
          $T[R_next_pkt_with_priority_1481_sample_completed__ps] 
          $T[R_next_pkt_with_priority_1481_update_start__ps] 
          $T[R_next_pkt_with_priority_1481_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_pkt_with_priority_1481_sample_start_] 
          $T[R_next_pkt_with_priority_1481_sample_completed_] 
          $T[R_next_pkt_with_priority_1481_update_start_] 
          $T[R_next_pkt_with_priority_1481_update_completed_] 
          ;;[R_next_pkt_with_priority_1481_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_pkt_with_priority_1481_sample_start_ &-> (R_next_pkt_with_priority_1481_Sample)
          R_next_pkt_with_priority_1481_sample_completed_ <-& (R_next_pkt_with_priority_1481_Sample)
          ;;[R_next_pkt_with_priority_1481_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_pkt_with_priority_1481_update_start_ &-> (R_next_pkt_with_priority_1481_Update)
          R_next_pkt_with_priority_1481_update_completed_ <-& (R_next_pkt_with_priority_1481_Update)
          // RAW reenables for next_pkt_with_priority
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // producer  and  consumer are both determined by PHI statements.
          // Phi start dependency for implicit/constant alternative.
          R_next_pkt_with_priority_1481_sample_start_ <-& (R_next_pkt_with_priority_1481_sample_start__ps)
          R_next_pkt_with_priority_1481_update_start_ <-& (R_next_pkt_with_priority_1481_update_start__ps)
          // Phi complete dependency.
          R_next_pkt_with_priority_1481_sample_completed__ps <-& (R_next_pkt_with_priority_1481_sample_completed_)
          R_next_pkt_with_priority_1481_update_completed__ps <-& (R_next_pkt_with_priority_1481_update_completed_)
          $phisequencer [ phi_stmt_1478_phi_seq] : 
          phi_stmt_1478_entry_trigger konst_1480_sample_start__ps konst_1480_sample_completed__ps konst_1480_update_start__ps konst_1480_update_completed__ps phi_stmt_1478_loopback_trigger R_next_pkt_with_priority_1481_sample_start__ps R_next_pkt_with_priority_1481_sample_completed__ps R_next_pkt_with_priority_1481_update_start__ps R_next_pkt_with_priority_1481_update_completed__ps :
          phi_stmt_1478_sample_start__ps phi_stmt_1478_sample_completed__ps phi_stmt_1478_update_start__ps phi_stmt_1478_update_completed__ps :
          phi_stmt_1478_entry_sample_req_ps phi_stmt_1478_loopback_sample_req_ps : 
          phi_stmt_1478_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1478
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // start:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 392
          // volatile! 
          // Source expression
          // (pkt_1_e_word [] 32 )
          // pkt_1_e_word
          // Target expression
          // (as target) p1_valid
          // start: WAR dependencies for p1_valid
          // done: WAR dependencies for p1_valid
          // end:  			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // start:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 393
          // volatile! 
          // Source expression
          // (pkt_2_e_word [] 32 )
          // pkt_2_e_word
          // Target expression
          // (as target) p2_valid
          // start: WAR dependencies for p2_valid
          // done: WAR dependencies for p2_valid
          // end:  			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // start:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 394
          // volatile! 
          // Source expression
          // (pkt_3_e_word [] 32 )
          // pkt_3_e_word
          // Target expression
          // (as target) p3_valid
          // start: WAR dependencies for p3_valid
          // done: WAR dependencies for p3_valid
          // end:  			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // start:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 395
          // volatile! 
          // Source expression
          // (pkt_4_e_word [] 32 )
          // pkt_4_e_word
          // Target expression
          // (as target) p4_valid
          // start: WAR dependencies for p4_valid
          // done: WAR dependencies for p4_valid
          // end:  			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // start:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 397
          // volatile! 
          // Source expression
          // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
          // (active_packet == 1 )
          // active_packet
          // p1_valid
          // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
          // (active_packet == 2 )
          // active_packet
          // p2_valid
          // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
          // (active_packet == 3 )
          // active_packet
          // p3_valid
          // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
          // (active_packet == 4 )
          // active_packet
          // p4_valid
          // Target expression
          // (as target) valid_active_pkt_word_read
          // start: WAR dependencies for valid_active_pkt_word_read
          // done: WAR dependencies for valid_active_pkt_word_read
          // end:  			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_with_priority
          // WAR dependency: Read: next_pkt_with_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_with_priority
          // start:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  file .Aa/switch4x4.opt.aa, line 398
          // volatile! 
          // Call input argument 0
          // down_counter
          // Call input argument 1
          // active_packet
          // Call input argument 2
          // pkt_with_priority
          // Call input argument 3
          // p1_valid
          // Call input argument 4
          // p2_valid
          // Call input argument 5
          // p3_valid
          // Call input argument 6
          // p4_valid
          // Call output argument 0
          // (as target) next_active_packet
          // Call output argument 1
          // (as target) next_pkt_with_priority
          // start: WAR dependencies for next_active_packet
          // WAR dependency: Read: next_active_packet before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_active_packet
          // start: WAR dependencies for next_pkt_with_priority
          // WAR dependency: Read: next_pkt_with_priority before Write:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_pkt_with_priority
          // end:  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
          // start: WAR dependencies for valid_active_pkt_length
          // done: WAR dependencies for valid_active_pkt_length
          // start:  			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 399
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) ))
          // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) )
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 23 8 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 23 8 ) 
          // pkt_2_e_word
          // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 23 8 ) 
          // pkt_3_e_word
          // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // ( $slice pkt_4_e_word 23 8 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) valid_active_pkt_length
          // start: WAR dependencies for valid_active_pkt_length
          // done: WAR dependencies for valid_active_pkt_length
          // end:  			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // start:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 400
          // volatile! 
          // Source expression
          // ((next_active_packet != 0 ) & (down_counter == 0 ))
          // (next_active_packet != 0 )
          // next_active_packet
          // (down_counter == 0 )
          // down_counter
          // Target expression
          // (as target) started_new_packet
          // start: WAR dependencies for started_new_packet
          // done: WAR dependencies for started_new_packet
          // end:  			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // start:  			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 401
          // volatile! 
          // Source expression
          // ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
          // started_new_packet
          // (valid_active_pkt_length - 1 )
          // valid_active_pkt_length
          // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
          // valid_active_pkt_word_read
          // (down_counter - 1 )
          // down_counter
          // down_counter
          // Target expression
          // (as target) next_down_counter
          // start: WAR dependencies for next_down_counter
          // WAR dependency: Read: next_down_counter before Write: 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_down_counter
          // end:  			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // start:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 402
          // volatile! 
          // Source expression
          // (( ~ p1_valid ) | (next_active_packet == 1 ))
          // ( ~ p1_valid )
          // p1_valid
          // (next_active_packet == 1 )
          // next_active_packet
          // Target expression
          // (as target) read_from_1
          // start: WAR dependencies for read_from_1
          // WAR dependency: Read: read_from_1 before Write: 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_1
          // end:  			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // start:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 403
          // volatile! 
          // Source expression
          // (( ~ p2_valid ) | (next_active_packet == 2 ))
          // ( ~ p2_valid )
          // p2_valid
          // (next_active_packet == 2 )
          // next_active_packet
          // Target expression
          // (as target) read_from_2
          // start: WAR dependencies for read_from_2
          // WAR dependency: Read: read_from_2 before Write: 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_2
          // end:  			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // start:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 404
          // volatile! 
          // Source expression
          // (( ~ p3_valid ) | (next_active_packet == 3 ))
          // ( ~ p3_valid )
          // p3_valid
          // (next_active_packet == 3 )
          // next_active_packet
          // Target expression
          // (as target) read_from_3
          // start: WAR dependencies for read_from_3
          // WAR dependency: Read: read_from_3 before Write: 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_3
          // end:  			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // start:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 405
          // volatile! 
          // Source expression
          // (( ~ p4_valid ) | (next_active_packet == 4 ))
          // ( ~ p4_valid )
          // p4_valid
          // (next_active_packet == 4 )
          // next_active_packet
          // Target expression
          // (as target) read_from_4
          // start: WAR dependencies for read_from_4
          // WAR dependency: Read: read_from_4 before Write: 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for read_from_4
          // end:  			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // start:  			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 406
          // volatile! 
          // Source expression
          // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // ( $slice pkt_1_e_word 31 0 ) 
          // pkt_1_e_word
          // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // ( $slice pkt_2_e_word 31 0 ) 
          // pkt_2_e_word
          // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // ( $slice pkt_3_e_word 31 0 ) 
          // pkt_3_e_word
          // ( $slice pkt_4_e_word 31 0 ) 
          // pkt_4_e_word
          // Target expression
          // (as target) data_to_out
          // start: WAR dependencies for data_to_out
          // done: WAR dependencies for data_to_out
          // end:  			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // start:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          //  file .Aa/switch4x4.opt.aa, line 407
          // volatile! 
          // Source expression
          // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
          // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
          // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
          // (next_active_packet == 1 )
          // next_active_packet
          // p1_valid
          // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
          // (next_active_packet == 2 )
          // next_active_packet
          // p2_valid
          // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
          // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
          // (next_active_packet == 3 )
          // next_active_packet
          // p3_valid
          // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
          // (next_active_packet == 4 )
          // next_active_packet
          // p4_valid
          // Target expression
          // (as target) send_flag
          // start: WAR dependencies for send_flag
          // done: WAR dependencies for send_flag
          // end:  			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
          // start:  			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
          //  file .Aa/switch4x4.opt.aa, line 408
          // Guard expression 
          // send_flag
          // Source expression
          // data_to_out
          // Target expression
          // (as target) out_data_4
          $T[WPIPE_out_data_4_1693_sample_start_] 
          $T[WPIPE_out_data_4_1693_sample_completed_] 
          $T[WPIPE_out_data_4_1693_update_start_] 
          $T[WPIPE_out_data_4_1693_update_completed_] 
          // Guard dependency for expression WPIPE_out_data_4_1693 with guard R_send_flag_1692
          WPIPE_out_data_4_1693_sample_start_ <-& (phi_stmt_1450_update_completed_)
          WPIPE_out_data_4_1693_sample_start_ <-& (phi_stmt_1455_update_completed_)
          WPIPE_out_data_4_1693_sample_start_ <-& (phi_stmt_1460_update_completed_)
          WPIPE_out_data_4_1693_sample_start_ <-& (phi_stmt_1465_update_completed_)
          WPIPE_out_data_4_1693_sample_start_ <-& (phi_stmt_1470_update_completed_)
          WPIPE_out_data_4_1693_sample_start_ <-& (phi_stmt_1474_update_completed_)
          WPIPE_out_data_4_1693_sample_start_ <-& (phi_stmt_1478_update_completed_)
          // RAW reenables for send_flag
          phi_stmt_1450_update_start_ o<-& (WPIPE_out_data_4_1693_sample_completed_ 0)
          phi_stmt_1455_update_start_ o<-& (WPIPE_out_data_4_1693_sample_completed_ 0)
          phi_stmt_1460_update_start_ o<-& (WPIPE_out_data_4_1693_sample_completed_ 0)
          phi_stmt_1465_update_start_ o<-& (WPIPE_out_data_4_1693_sample_completed_ 0)
          phi_stmt_1470_update_start_ o<-& (WPIPE_out_data_4_1693_sample_completed_ 0)
          phi_stmt_1474_update_start_ o<-& (WPIPE_out_data_4_1693_sample_completed_ 0)
          phi_stmt_1478_update_start_ o<-& (WPIPE_out_data_4_1693_sample_completed_ 0)
          ;;[WPIPE_out_data_4_1693_Sample] 
          {
            // pipe write sample-start out_data_4
            $T [req] $T [ack] 
          }
          ;;[WPIPE_out_data_4_1693_Update] 
          {
            // pipe write update (complete) out_data_4
            $T [req] $T [ack] 
          }
          WPIPE_out_data_4_1693_sample_start_ &-> (WPIPE_out_data_4_1693_Sample)
          WPIPE_out_data_4_1693_sample_completed_ <-& (WPIPE_out_data_4_1693_Sample)
          WPIPE_out_data_4_1693_update_start_ <-& (WPIPE_out_data_4_1693_sample_completed_)
          WPIPE_out_data_4_1693_update_start_ &-> (WPIPE_out_data_4_1693_Update)
          WPIPE_out_data_4_1693_update_completed_ <-& (WPIPE_out_data_4_1693_Update)
          WPIPE_out_data_4_1693_sample_start_ o<-& (WPIPE_out_data_4_1693_update_completed_ 0)
          // start: Forward dependencies from data_to_out to transition WPIPE_out_data_4_1693_sample_start_
          WPIPE_out_data_4_1693_sample_start_ <-& (phi_stmt_1450_update_completed_)
          WPIPE_out_data_4_1693_sample_start_ <-& (phi_stmt_1455_update_completed_)
          WPIPE_out_data_4_1693_sample_start_ <-& (phi_stmt_1460_update_completed_)
          WPIPE_out_data_4_1693_sample_start_ <-& (phi_stmt_1465_update_completed_)
          WPIPE_out_data_4_1693_sample_start_ <-& (phi_stmt_1470_update_completed_)
          WPIPE_out_data_4_1693_sample_start_ <-& (phi_stmt_1474_update_completed_)
          WPIPE_out_data_4_1693_sample_start_ <-& (phi_stmt_1478_update_completed_)
          // done: Forward dependencies from data_to_out to transition WPIPE_out_data_4_1693_sample_start_
          // RAW reenables for data_to_out
          phi_stmt_1450_update_start_ o<-& (WPIPE_out_data_4_1693_sample_completed_ 0)
          phi_stmt_1455_update_start_ o<-& (WPIPE_out_data_4_1693_sample_completed_ 0)
          phi_stmt_1460_update_start_ o<-& (WPIPE_out_data_4_1693_sample_completed_ 0)
          phi_stmt_1465_update_start_ o<-& (WPIPE_out_data_4_1693_sample_completed_ 0)
          phi_stmt_1470_update_start_ o<-& (WPIPE_out_data_4_1693_sample_completed_ 0)
          phi_stmt_1474_update_start_ o<-& (WPIPE_out_data_4_1693_sample_completed_ 0)
          phi_stmt_1478_update_start_ o<-& (WPIPE_out_data_4_1693_sample_completed_ 0)
          // end:  			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe noblock_obuf_3_4
          // read-dependencies for pipe noblock_obuf_3_4
          // write-dependencies for pipe noblock_obuf_3_4
          // signal write dependencies for noblock_obuf_3_4
          // pipe read/write dependencies for pipe noblock_obuf_1_4
          // read-dependencies for pipe noblock_obuf_1_4
          // write-dependencies for pipe noblock_obuf_1_4
          // signal write dependencies for noblock_obuf_1_4
          // pipe read/write dependencies for pipe out_data_4
          // read-dependencies for pipe out_data_4
          // write-dependencies for pipe out_data_4
          // signal write dependencies for out_data_4
          // pipe read/write dependencies for pipe noblock_obuf_2_4
          // read-dependencies for pipe noblock_obuf_2_4
          // write-dependencies for pipe noblock_obuf_2_4
          // signal write dependencies for noblock_obuf_2_4
          // pipe read/write dependencies for pipe noblock_obuf_4_4
          // read-dependencies for pipe noblock_obuf_4_4
          // write-dependencies for pipe noblock_obuf_4_4
          // signal write dependencies for noblock_obuf_4_4
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1448__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1448_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1448__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1448_loop_body : condition_evaluated
        $bind do_while_stmt_1448__entry__  => do_while_stmt_1448_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1448_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1448__exit__)
      }
      do_while_stmt_1448__entry__ |-> (do_while_stmt_1448)
      do_while_stmt_1448__exit__ <-| (do_while_stmt_1448)
      do_while_stmt_1448__entry__ <-| (branch_block_stmt_1447__entry__)
      do_while_stmt_1448__exit__ |-> (branch_block_stmt_1447__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %outputPort_4_Daemon%loop%
    //  file .Aa/switch4x4.opt.aa, line 376
    // constant-object-declarations for block %outputPort_4_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 372
    // constant-object-declarations for block %outputPort_4_Daemon
    //  file .Aa/switch4x4.opt.aa, line 367
    // constant-declarations for block %outputPort_4_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 372
    // do-while statement  
    //  file .Aa/switch4x4.opt.aa, line 374
    // 1 
    $constant $W[konst_1706_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %outputPort_4_Daemon%loop%
    //  file .Aa/switch4x4.opt.aa, line 376
    // constant-declarations for phi:  			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 377
    // ZERO_33
    $constant $W[R_ZERO_33_1452_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 379
    // ZERO_33
    $constant $W[R_ZERO_33_1457_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 381
    // ZERO_33
    $constant $W[R_ZERO_33_1462_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 383
    // ZERO_33
    $constant $W[R_ZERO_33_1467_wire_constant] : $int<33> := _b000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 385
    // ZERO_3
    $constant $W[R_ZERO_3_1472_wire_constant] : $int<3> := _b000// 0
    // constant-declarations for phi:  			$phi down_counter := 			  ZERO_16 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 387
    // ZERO_16
    $constant $W[R_ZERO_16_1476_wire_constant] : $int<16> := _b0000000000000000// 0
    // constant-declarations for phi:  			$phi pkt_with_priority := 			  1  $on   $entry 			  next_pkt_with_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 389
    // 1 
    $constant $W[konst_1480_wire_constant] : $int<3> := _b001// 1
    // 32 
    $constant $W[konst_1485_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1490_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1495_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // 32 
    $constant $W[konst_1500_wire_constant] : $int<33> := _b000000000000000000000000000100000// 32
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1517_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1520_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1523_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1526_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1530_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1533_wire_constant] : $int<1> := _b0// 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1536_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1539_wire_constant] : $int<1> := _b0// 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
    //  file .Aa/switch4x4.opt.aa, line 398
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
    // 1 
    $constant $W[konst_1556_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1560_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
    // 2 
    $constant $W[konst_1563_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1567_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
    // 3 
    $constant $W[konst_1571_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1575_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
    // 4 
    $constant $W[konst_1578_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1582_wire_constant] : $int<16> := _b0000000000000000// 0
    // 0 
    $constant $W[konst_1589_wire_constant] : $int<3> := _b000// 0
    // 0 
    $constant $W[konst_1592_wire_constant] : $int<16> := _b0000000000000000// 0
    // ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    // 1 
    $constant $W[konst_1599_wire_constant] : $int<16> := _b0000000000000001// 1
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    // 1 
    $constant $W[konst_1603_wire_constant] : $int<16> := _b0000000000000001// 1
    // 1 
    $constant $W[konst_1613_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_1621_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_1629_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_1637_wire_constant] : $int<3> := _b100// 4
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  ) 
    // 1 
    $constant $W[konst_1643_wire_constant] : $int<3> := _b001// 1
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
    // 2 
    $constant $W[konst_1648_wire_constant] : $int<3> := _b010// 2
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
    // 3 
    $constant $W[konst_1653_wire_constant] : $int<3> := _b011// 3
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    // 1 
    $constant $W[konst_1665_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_1668_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    // 2 
    $constant $W[konst_1671_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_1674_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    // 3 
    $constant $W[konst_1678_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_1681_wire_constant] : $int<1> := _b0// 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    // 4 
    $constant $W[konst_1684_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_1687_wire_constant] : $int<1> := _b0// 0
    // block %outputPort_4_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 372
    // do-while statement  
    //  file .Aa/switch4x4.opt.aa, line 374
    // merge-statement  
    //  file .Aa/switch4x4.opt.aa, line 376
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 377
    // noblock_obuf_1_4
    $W[RPIPE_noblock_obuf_1_4_1454_wire] : $int<33>
    // pkt_1_e_word
    $W[pkt_1_e_word_1450] : $int<33>
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 379
    // noblock_obuf_2_4
    $W[RPIPE_noblock_obuf_2_4_1459_wire] : $int<33>
    // pkt_2_e_word
    $W[pkt_2_e_word_1455] : $int<33>
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 381
    // noblock_obuf_3_4
    $W[RPIPE_noblock_obuf_3_4_1464_wire] : $int<33>
    // pkt_3_e_word
    $W[pkt_3_e_word_1460] : $int<33>
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 383
    // noblock_obuf_4_4
    $W[RPIPE_noblock_obuf_4_4_1469_wire] : $int<33>
    // pkt_4_e_word
    $W[pkt_4_e_word_1465] : $int<33>
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 385
    $W[next_active_packet_1553_1473_buffered] : $int<3>
    // active_packet
    $W[active_packet_1470] : $int<3>
    // 			$phi down_counter := 			  ZERO_16 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 387
    $W[next_down_counter_1608_1477_buffered] : $int<16>
    // down_counter
    $W[down_counter_1474] : $int<16>
    // 			$phi pkt_with_priority := 			  1  $on   $entry 			  next_pkt_with_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 389
    $W[next_pkt_with_priority_1553_1481_buffered] : $int<3>
    // pkt_with_priority
    $W[pkt_with_priority_1478] : $int<3>
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 392
    // p1_valid
    $W[p1_valid_1487] : $int<1>
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 393
    // p2_valid
    $W[p2_valid_1492] : $int<1>
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 394
    // p3_valid
    $W[p3_valid_1497] : $int<1>
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 395
    // p4_valid
    $W[p4_valid_1502] : $int<1>
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 397
    // (active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1518_wire] : $int<1>
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1521_wire] : $int<1>
    // (active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1524_wire] : $int<1>
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1527_wire] : $int<1>
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1528_wire] : $int<1>
    // (active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1531_wire] : $int<1>
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1534_wire] : $int<1>
    // (active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1537_wire] : $int<1>
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1540_wire] : $int<1>
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1541_wire] : $int<1>
    // valid_active_pkt_word_read
    $W[valid_active_pkt_word_read_1543] : $int<1>
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
    //  file .Aa/switch4x4.opt.aa, line 398
    // next_active_packet
    $W[next_active_packet_1553] : $int<3>
    // next_pkt_with_priority
    $W[next_pkt_with_priority_1553] : $int<3>
    // 			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 399
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1557_wire] : $int<1>
    // ( $slice pkt_1_e_word 23 8 ) 
    $intermediate $W[slice_1559_wire] : $int<16>
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
    $intermediate $W[MUX_1561_wire] : $int<16>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1564_wire] : $int<1>
    // ( $slice pkt_2_e_word 23 8 ) 
    $intermediate $W[slice_1566_wire] : $int<16>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
    $intermediate $W[MUX_1568_wire] : $int<16>
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) )
    $intermediate $W[OR_u16_u16_1569_wire] : $int<16>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1572_wire] : $int<1>
    // ( $slice pkt_3_e_word 23 8 ) 
    $intermediate $W[slice_1574_wire] : $int<16>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
    $intermediate $W[MUX_1576_wire] : $int<16>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1579_wire] : $int<1>
    // ( $slice pkt_4_e_word 23 8 ) 
    $intermediate $W[slice_1581_wire] : $int<16>
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
    $intermediate $W[MUX_1583_wire] : $int<16>
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )
    $intermediate $W[OR_u16_u16_1584_wire] : $int<16>
    // valid_active_pkt_length
    $W[valid_active_pkt_length_1586] : $int<16>
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 400
    // (next_active_packet != 0 )
    $intermediate $W[NEQ_u3_u1_1590_wire] : $int<1>
    // (down_counter == 0 )
    $intermediate $W[EQ_u16_u1_1593_wire] : $int<1>
    // started_new_packet
    $W[started_new_packet_1595] : $int<1>
    // 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 401
    // (valid_active_pkt_length - 1 )
    $intermediate $W[SUB_u16_u16_1600_wire] : $int<16>
    // (down_counter - 1 )
    $intermediate $W[SUB_u16_u16_1604_wire] : $int<16>
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    $intermediate $W[MUX_1606_wire] : $int<16>
    // next_down_counter
    $W[next_down_counter_1608] : $int<16>
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 402
    // ( ~ p1_valid )
    $intermediate $W[NOT_u1_u1_1611_wire] : $int<1>
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1614_wire] : $int<1>
    // read_from_1
    $W[read_from_1_1616] : $int<1>
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 403
    // ( ~ p2_valid )
    $intermediate $W[NOT_u1_u1_1619_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1622_wire] : $int<1>
    // read_from_2
    $W[read_from_2_1624] : $int<1>
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 404
    // ( ~ p3_valid )
    $intermediate $W[NOT_u1_u1_1627_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1630_wire] : $int<1>
    // read_from_3
    $W[read_from_3_1632] : $int<1>
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 405
    // ( ~ p4_valid )
    $intermediate $W[NOT_u1_u1_1635_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1638_wire] : $int<1>
    // read_from_4
    $W[read_from_4_1640] : $int<1>
    // 			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 406
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1644_wire] : $int<1>
    // ( $slice pkt_1_e_word 31 0 ) 
    $intermediate $W[slice_1646_wire] : $int<32>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1649_wire] : $int<1>
    // ( $slice pkt_2_e_word 31 0 ) 
    $intermediate $W[slice_1651_wire] : $int<32>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1654_wire] : $int<1>
    // ( $slice pkt_3_e_word 31 0 ) 
    $intermediate $W[slice_1656_wire] : $int<32>
    // ( $slice pkt_4_e_word 31 0 ) 
    $intermediate $W[slice_1658_wire] : $int<32>
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
    $intermediate $W[MUX_1659_wire] : $int<32>
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
    $intermediate $W[MUX_1660_wire] : $int<32>
    // data_to_out
    $W[data_to_out_1662] : $int<32>
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 407
    // (next_active_packet == 1 )
    $intermediate $W[EQ_u3_u1_1666_wire] : $int<1>
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    $intermediate $W[MUX_1669_wire] : $int<1>
    // (next_active_packet == 2 )
    $intermediate $W[EQ_u3_u1_1672_wire] : $int<1>
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    $intermediate $W[MUX_1675_wire] : $int<1>
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1676_wire] : $int<1>
    // (next_active_packet == 3 )
    $intermediate $W[EQ_u3_u1_1679_wire] : $int<1>
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    $intermediate $W[MUX_1682_wire] : $int<1>
    // (next_active_packet == 4 )
    $intermediate $W[EQ_u3_u1_1685_wire] : $int<1>
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    $intermediate $W[MUX_1688_wire] : $int<1>
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    $intermediate $W[OR_u1_u1_1689_wire] : $int<1>
    // send_flag
    $W[send_flag_1691] : $int<1>
    // 			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch4x4.opt.aa, line 408
    // out_data_4
    // datapath-instances for block %outputPort_4_Daemon%loop
    //  file .Aa/switch4x4.opt.aa, line 372
    // datapath-instances for do-while  
    //  file .Aa/switch4x4.opt.aa, line 374
    ==0? [do_while_stmt_1448_branch] (konst_1706_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/switch4x4.opt.aa, line 376
    // 			$phi pkt_1_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_1) noblock_obuf_1_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 377
    // noblock_obuf_1_4
    $ioport $in [RPIPE_noblock_obuf_1_4_1454_inst] (noblock_obuf_1_4) (RPIPE_noblock_obuf_1_4_1454_wire) $guard ( read_from_1_1616 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_1_4_1454_inst RPIPE_noblock_obuf_1_4_1454_wire 1
    # $phi [phi_stmt_1450] (R_ZERO_33_1452_wire_constant RPIPE_noblock_obuf_1_4_1454_wire) ( pkt_1_e_word_1450 ) $fullrate
    // $buffering  $out phi_stmt_1450 pkt_1_e_word_1450 2
    // 			$phi pkt_2_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_2) noblock_obuf_2_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 379
    // noblock_obuf_2_4
    $ioport $in [RPIPE_noblock_obuf_2_4_1459_inst] (noblock_obuf_2_4) (RPIPE_noblock_obuf_2_4_1459_wire) $guard ( read_from_2_1624 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_2_4_1459_inst RPIPE_noblock_obuf_2_4_1459_wire 1
    # $phi [phi_stmt_1455] (R_ZERO_33_1457_wire_constant RPIPE_noblock_obuf_2_4_1459_wire) ( pkt_2_e_word_1455 ) $fullrate
    // $buffering  $out phi_stmt_1455 pkt_2_e_word_1455 2
    // 			$phi pkt_3_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_3) noblock_obuf_3_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 381
    // noblock_obuf_3_4
    $ioport $in [RPIPE_noblock_obuf_3_4_1464_inst] (noblock_obuf_3_4) (RPIPE_noblock_obuf_3_4_1464_wire) $guard ( read_from_3_1632 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_3_4_1464_inst RPIPE_noblock_obuf_3_4_1464_wire 1
    # $phi [phi_stmt_1460] (R_ZERO_33_1462_wire_constant RPIPE_noblock_obuf_3_4_1464_wire) ( pkt_3_e_word_1460 ) $fullrate
    // $buffering  $out phi_stmt_1460 pkt_3_e_word_1460 2
    // 			$phi pkt_4_e_word := 			  ZERO_33 $on   $entry 			  $guard (read_from_4) noblock_obuf_4_4 $on   $loopback 
    // type of target is $uint<33>
    //  file .Aa/switch4x4.opt.aa, line 383
    // noblock_obuf_4_4
    $ioport $in [RPIPE_noblock_obuf_4_4_1469_inst] (noblock_obuf_4_4) (RPIPE_noblock_obuf_4_4_1469_wire) $guard ( read_from_4_1640 )  $fullrate 
    $buffering $out RPIPE_noblock_obuf_4_4_1469_inst RPIPE_noblock_obuf_4_4_1469_wire 1
    # $phi [phi_stmt_1465] (R_ZERO_33_1467_wire_constant RPIPE_noblock_obuf_4_4_1469_wire) ( pkt_4_e_word_1465 ) $fullrate
    // $buffering  $out phi_stmt_1465 pkt_4_e_word_1465 2
    // 			$phi active_packet := 			  ZERO_3 $on   $entry 			  next_active_packet $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 385
    # := [next_active_packet_1553_1473_buf] (next_active_packet_1553) (next_active_packet_1553_1473_buffered)     $fullrate
    $buffering $out next_active_packet_1553_1473_buf next_active_packet_1553_1473_buffered  1
    # $phi [phi_stmt_1470] (R_ZERO_3_1472_wire_constant next_active_packet_1553_1473_buffered) ( active_packet_1470 ) $fullrate
    // $buffering  $out phi_stmt_1470 active_packet_1470 2
    // 			$phi down_counter := 			  ZERO_16 $on   $entry 			  next_down_counter $on   $loopback 
    // type of target is $uint<16>
    //  file .Aa/switch4x4.opt.aa, line 387
    # := [next_down_counter_1608_1477_buf] (next_down_counter_1608) (next_down_counter_1608_1477_buffered)     $fullrate
    $buffering $out next_down_counter_1608_1477_buf next_down_counter_1608_1477_buffered  1
    # $phi [phi_stmt_1474] (R_ZERO_16_1476_wire_constant next_down_counter_1608_1477_buffered) ( down_counter_1474 ) $fullrate
    // $buffering  $out phi_stmt_1474 down_counter_1474 2
    // 			$phi pkt_with_priority := 			  1  $on   $entry 			  next_pkt_with_priority $on   $loopback 
    // type of target is $uint<3>
    //  file .Aa/switch4x4.opt.aa, line 389
    # := [next_pkt_with_priority_1553_1481_buf] (next_pkt_with_priority_1553) (next_pkt_with_priority_1553_1481_buffered)     $fullrate
    $buffering $out next_pkt_with_priority_1553_1481_buf next_pkt_with_priority_1553_1481_buffered  1
    # $phi [phi_stmt_1478] (konst_1480_wire_constant next_pkt_with_priority_1553_1481_buffered) ( pkt_with_priority_1478 ) $fullrate
    // $buffering  $out phi_stmt_1478 pkt_with_priority_1478 2
    // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 392
    // (pkt_1_e_word [] 32 )
    [][BITSEL_u33_u1_1486_inst] (pkt_1_e_word_1450 konst_1485_wire_constant) (p1_valid_1487)   $flowthrough 
    $delay BITSEL_u33_u1_1486_inst 0
    // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 393
    // (pkt_2_e_word [] 32 )
    [][BITSEL_u33_u1_1491_inst] (pkt_2_e_word_1455 konst_1490_wire_constant) (p2_valid_1492)   $flowthrough 
    $delay BITSEL_u33_u1_1491_inst 0
    // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 394
    // (pkt_3_e_word [] 32 )
    [][BITSEL_u33_u1_1496_inst] (pkt_3_e_word_1460 konst_1495_wire_constant) (p3_valid_1497)   $flowthrough 
    $delay BITSEL_u33_u1_1496_inst 0
    // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 395
    // (pkt_4_e_word [] 32 )
    [][BITSEL_u33_u1_1501_inst] (pkt_4_e_word_1465 konst_1500_wire_constant) (p4_valid_1502)   $flowthrough 
    $delay BITSEL_u33_u1_1501_inst 0
    // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 397
    // (active_packet == 1 )
    ==[EQ_u3_u1_1518_inst] (active_packet_1470 konst_1517_wire_constant) (EQ_u3_u1_1518_wire)   $flowthrough 
    $delay EQ_u3_u1_1518_inst 0
    // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1521_inst] (EQ_u3_u1_1518_wire p1_valid_1487 konst_1520_wire_constant) (MUX_1521_wire)  $flowthrough
    // (active_packet == 2 )
    ==[EQ_u3_u1_1524_inst] (active_packet_1470 konst_1523_wire_constant) (EQ_u3_u1_1524_wire)   $flowthrough 
    $delay EQ_u3_u1_1524_inst 0
    // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1527_inst] (EQ_u3_u1_1524_wire p2_valid_1492 konst_1526_wire_constant) (MUX_1527_wire)  $flowthrough
    // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1528_inst] (MUX_1521_wire MUX_1527_wire) (OR_u1_u1_1528_wire)   $flowthrough 
    $delay OR_u1_u1_1528_inst 0
    // (active_packet == 3 )
    ==[EQ_u3_u1_1531_inst] (active_packet_1470 konst_1530_wire_constant) (EQ_u3_u1_1531_wire)   $flowthrough 
    $delay EQ_u3_u1_1531_inst 0
    // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1534_inst] (EQ_u3_u1_1531_wire p3_valid_1497 konst_1533_wire_constant) (MUX_1534_wire)  $flowthrough
    // (active_packet == 4 )
    ==[EQ_u3_u1_1537_inst] (active_packet_1470 konst_1536_wire_constant) (EQ_u3_u1_1537_wire)   $flowthrough 
    $delay EQ_u3_u1_1537_inst 0
    // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1540_inst] (EQ_u3_u1_1537_wire p4_valid_1502 konst_1539_wire_constant) (MUX_1540_wire)  $flowthrough
    // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1541_inst] (MUX_1534_wire MUX_1540_wire) (OR_u1_u1_1541_wire)   $flowthrough 
    $delay OR_u1_u1_1541_inst 0
    // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1542_inst] (OR_u1_u1_1528_wire OR_u1_u1_1541_wire) (valid_active_pkt_word_read_1543)   $flowthrough 
    $delay OR_u1_u1_1542_inst 0
    //  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
    //  file .Aa/switch4x4.opt.aa, line 398
    $call [call_stmt_1553_call] $module prioritySelect(down_counter_1474 active_packet_1470 pkt_with_priority_1478 p1_valid_1487 p2_valid_1492 p3_valid_1497 p4_valid_1502) (next_active_packet_1553 next_pkt_with_priority_1553)   $flowthrough $fullrate
    // 			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 399
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1557_inst] (next_active_packet_1553 konst_1556_wire_constant) (EQ_u3_u1_1557_wire)   $flowthrough 
    $delay EQ_u3_u1_1557_inst 0
    // ( $slice pkt_1_e_word 23 8 ) 
    [:] [slice_1559_inst] (pkt_1_e_word_1450 23 8) (slice_1559_wire)  $flowthrough
    $delay slice_1559_inst 0
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
    ? [MUX_1561_inst] (EQ_u3_u1_1557_wire slice_1559_wire konst_1560_wire_constant) (MUX_1561_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1564_inst] (next_active_packet_1553 konst_1563_wire_constant) (EQ_u3_u1_1564_wire)   $flowthrough 
    $delay EQ_u3_u1_1564_inst 0
    // ( $slice pkt_2_e_word 23 8 ) 
    [:] [slice_1566_inst] (pkt_2_e_word_1455 23 8) (slice_1566_wire)  $flowthrough
    $delay slice_1566_inst 0
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
    ? [MUX_1568_inst] (EQ_u3_u1_1564_wire slice_1566_wire konst_1567_wire_constant) (MUX_1568_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) )
    |[OR_u16_u16_1569_inst] (MUX_1561_wire MUX_1568_wire) (OR_u16_u16_1569_wire)   $flowthrough 
    $delay OR_u16_u16_1569_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1572_inst] (next_active_packet_1553 konst_1571_wire_constant) (EQ_u3_u1_1572_wire)   $flowthrough 
    $delay EQ_u3_u1_1572_inst 0
    // ( $slice pkt_3_e_word 23 8 ) 
    [:] [slice_1574_inst] (pkt_3_e_word_1460 23 8) (slice_1574_wire)  $flowthrough
    $delay slice_1574_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
    ? [MUX_1576_inst] (EQ_u3_u1_1572_wire slice_1574_wire konst_1575_wire_constant) (MUX_1576_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1579_inst] (next_active_packet_1553 konst_1578_wire_constant) (EQ_u3_u1_1579_wire)   $flowthrough 
    $delay EQ_u3_u1_1579_inst 0
    // ( $slice pkt_4_e_word 23 8 ) 
    [:] [slice_1581_inst] (pkt_4_e_word_1465 23 8) (slice_1581_wire)  $flowthrough
    $delay slice_1581_inst 0
    // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
    ? [MUX_1583_inst] (EQ_u3_u1_1579_wire slice_1581_wire konst_1582_wire_constant) (MUX_1583_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )
    |[OR_u16_u16_1584_inst] (MUX_1576_wire MUX_1583_wire) (OR_u16_u16_1584_wire)   $flowthrough 
    $delay OR_u16_u16_1584_inst 0
    // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) ))
    |[OR_u16_u16_1585_inst] (OR_u16_u16_1569_wire OR_u16_u16_1584_wire) (valid_active_pkt_length_1586)   $flowthrough 
    $delay OR_u16_u16_1585_inst 0
    // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 400
    // (next_active_packet != 0 )
    !=[NEQ_u3_u1_1590_inst] (next_active_packet_1553 konst_1589_wire_constant) (NEQ_u3_u1_1590_wire)   $flowthrough 
    $delay NEQ_u3_u1_1590_inst 0
    // (down_counter == 0 )
    ==[EQ_u16_u1_1593_inst] (down_counter_1474 konst_1592_wire_constant) (EQ_u16_u1_1593_wire)   $flowthrough 
    $delay EQ_u16_u1_1593_inst 0
    // ((next_active_packet != 0 ) & (down_counter == 0 ))
    &[AND_u1_u1_1594_inst] (NEQ_u3_u1_1590_wire EQ_u16_u1_1593_wire) (started_new_packet_1595)   $flowthrough 
    $delay AND_u1_u1_1594_inst 0
    // 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 401
    // (valid_active_pkt_length - 1 )
    -[SUB_u16_u16_1600_inst] (valid_active_pkt_length_1586 konst_1599_wire_constant) (SUB_u16_u16_1600_wire)   $flowthrough 
    $delay SUB_u16_u16_1600_inst 0
    // (down_counter - 1 )
    -[SUB_u16_u16_1604_inst] (down_counter_1474 konst_1603_wire_constant) (SUB_u16_u16_1604_wire)   $flowthrough 
    $delay SUB_u16_u16_1604_inst 0
    // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
    ? [MUX_1606_inst] (valid_active_pkt_word_read_1543 SUB_u16_u16_1604_wire down_counter_1474) (MUX_1606_wire)  $flowthrough
    // ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
    ? [MUX_1607_inst] (started_new_packet_1595 SUB_u16_u16_1600_wire MUX_1606_wire) (next_down_counter_1608)  $flowthrough
    // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 402
    // ( ~ p1_valid )
    ~ [NOT_u1_u1_1611_inst] (p1_valid_1487) (NOT_u1_u1_1611_wire)   $flowthrough
    $delay NOT_u1_u1_1611_inst 0
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1614_inst] (next_active_packet_1553 konst_1613_wire_constant) (EQ_u3_u1_1614_wire)   $flowthrough 
    $delay EQ_u3_u1_1614_inst 0
    // (( ~ p1_valid ) | (next_active_packet == 1 ))
    |[OR_u1_u1_1615_inst] (NOT_u1_u1_1611_wire EQ_u3_u1_1614_wire) (read_from_1_1616)   $flowthrough 
    $delay OR_u1_u1_1615_inst 0
    // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 403
    // ( ~ p2_valid )
    ~ [NOT_u1_u1_1619_inst] (p2_valid_1492) (NOT_u1_u1_1619_wire)   $flowthrough
    $delay NOT_u1_u1_1619_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1622_inst] (next_active_packet_1553 konst_1621_wire_constant) (EQ_u3_u1_1622_wire)   $flowthrough 
    $delay EQ_u3_u1_1622_inst 0
    // (( ~ p2_valid ) | (next_active_packet == 2 ))
    |[OR_u1_u1_1623_inst] (NOT_u1_u1_1619_wire EQ_u3_u1_1622_wire) (read_from_2_1624)   $flowthrough 
    $delay OR_u1_u1_1623_inst 0
    // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 404
    // ( ~ p3_valid )
    ~ [NOT_u1_u1_1627_inst] (p3_valid_1497) (NOT_u1_u1_1627_wire)   $flowthrough
    $delay NOT_u1_u1_1627_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1630_inst] (next_active_packet_1553 konst_1629_wire_constant) (EQ_u3_u1_1630_wire)   $flowthrough 
    $delay EQ_u3_u1_1630_inst 0
    // (( ~ p3_valid ) | (next_active_packet == 3 ))
    |[OR_u1_u1_1631_inst] (NOT_u1_u1_1627_wire EQ_u3_u1_1630_wire) (read_from_3_1632)   $flowthrough 
    $delay OR_u1_u1_1631_inst 0
    // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 405
    // ( ~ p4_valid )
    ~ [NOT_u1_u1_1635_inst] (p4_valid_1502) (NOT_u1_u1_1635_wire)   $flowthrough
    $delay NOT_u1_u1_1635_inst 0
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1638_inst] (next_active_packet_1553 konst_1637_wire_constant) (EQ_u3_u1_1638_wire)   $flowthrough 
    $delay EQ_u3_u1_1638_inst 0
    // (( ~ p4_valid ) | (next_active_packet == 4 ))
    |[OR_u1_u1_1639_inst] (NOT_u1_u1_1635_wire EQ_u3_u1_1638_wire) (read_from_4_1640)   $flowthrough 
    $delay OR_u1_u1_1639_inst 0
    // 			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 406
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1644_inst] (next_active_packet_1553 konst_1643_wire_constant) (EQ_u3_u1_1644_wire)   $flowthrough 
    $delay EQ_u3_u1_1644_inst 0
    // ( $slice pkt_1_e_word 31 0 ) 
    [:] [slice_1646_inst] (pkt_1_e_word_1450 31 0) (slice_1646_wire)  $flowthrough
    $delay slice_1646_inst 0
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1649_inst] (next_active_packet_1553 konst_1648_wire_constant) (EQ_u3_u1_1649_wire)   $flowthrough 
    $delay EQ_u3_u1_1649_inst 0
    // ( $slice pkt_2_e_word 31 0 ) 
    [:] [slice_1651_inst] (pkt_2_e_word_1455 31 0) (slice_1651_wire)  $flowthrough
    $delay slice_1651_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1654_inst] (next_active_packet_1553 konst_1653_wire_constant) (EQ_u3_u1_1654_wire)   $flowthrough 
    $delay EQ_u3_u1_1654_inst 0
    // ( $slice pkt_3_e_word 31 0 ) 
    [:] [slice_1656_inst] (pkt_3_e_word_1460 31 0) (slice_1656_wire)  $flowthrough
    $delay slice_1656_inst 0
    // ( $slice pkt_4_e_word 31 0 ) 
    [:] [slice_1658_inst] (pkt_4_e_word_1465 31 0) (slice_1658_wire)  $flowthrough
    $delay slice_1658_inst 0
    // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
    ? [MUX_1659_inst] (EQ_u3_u1_1654_wire slice_1656_wire slice_1658_wire) (MUX_1659_wire)  $flowthrough
    // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
    ? [MUX_1660_inst] (EQ_u3_u1_1649_wire slice_1651_wire MUX_1659_wire) (MUX_1660_wire)  $flowthrough
    // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  ) 
    ? [MUX_1661_inst] (EQ_u3_u1_1644_wire slice_1646_wire MUX_1660_wire) (data_to_out_1662)  $flowthrough
    // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
    //  file .Aa/switch4x4.opt.aa, line 407
    // (next_active_packet == 1 )
    ==[EQ_u3_u1_1666_inst] (next_active_packet_1553 konst_1665_wire_constant) (EQ_u3_u1_1666_wire)   $flowthrough 
    $delay EQ_u3_u1_1666_inst 0
    // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
    ? [MUX_1669_inst] (EQ_u3_u1_1666_wire p1_valid_1487 konst_1668_wire_constant) (MUX_1669_wire)  $flowthrough
    // (next_active_packet == 2 )
    ==[EQ_u3_u1_1672_inst] (next_active_packet_1553 konst_1671_wire_constant) (EQ_u3_u1_1672_wire)   $flowthrough 
    $delay EQ_u3_u1_1672_inst 0
    // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
    ? [MUX_1675_inst] (EQ_u3_u1_1672_wire p2_valid_1492 konst_1674_wire_constant) (MUX_1675_wire)  $flowthrough
    // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
    |[OR_u1_u1_1676_inst] (MUX_1669_wire MUX_1675_wire) (OR_u1_u1_1676_wire)   $flowthrough 
    $delay OR_u1_u1_1676_inst 0
    // (next_active_packet == 3 )
    ==[EQ_u3_u1_1679_inst] (next_active_packet_1553 konst_1678_wire_constant) (EQ_u3_u1_1679_wire)   $flowthrough 
    $delay EQ_u3_u1_1679_inst 0
    // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
    ? [MUX_1682_inst] (EQ_u3_u1_1679_wire p3_valid_1497 konst_1681_wire_constant) (MUX_1682_wire)  $flowthrough
    // (next_active_packet == 4 )
    ==[EQ_u3_u1_1685_inst] (next_active_packet_1553 konst_1684_wire_constant) (EQ_u3_u1_1685_wire)   $flowthrough 
    $delay EQ_u3_u1_1685_inst 0
    // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
    ? [MUX_1688_inst] (EQ_u3_u1_1685_wire p4_valid_1502 konst_1687_wire_constant) (MUX_1688_wire)  $flowthrough
    // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
    |[OR_u1_u1_1689_inst] (MUX_1682_wire MUX_1688_wire) (OR_u1_u1_1689_wire)   $flowthrough 
    $delay OR_u1_u1_1689_inst 0
    // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
    |[OR_u1_u1_1690_inst] (OR_u1_u1_1676_wire OR_u1_u1_1689_wire) (send_flag_1691)   $flowthrough 
    $delay OR_u1_u1_1690_inst 0
    // 			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
    //  file .Aa/switch4x4.opt.aa, line 408
    // out_data_4
    $ioport $out [WPIPE_out_data_4_1693_inst]  (data_to_out_1662) (out_data_4) $guard ( send_flag_1691 )  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1448
  //  file .Aa/switch4x4.opt.aa, line 374
  phi_stmt_1450 <=> (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1450_entry_sample_req branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1450_loopback_sample_req) (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1450_phi_mux_ack)
  // noblock_obuf_1_4
  RPIPE_noblock_obuf_1_4_1454_inst <=> (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/RPIPE_noblock_obuf_1_4_1454_Sample/rr branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/RPIPE_noblock_obuf_1_4_1454_Update/cr) (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/RPIPE_noblock_obuf_1_4_1454_Sample/ra branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/RPIPE_noblock_obuf_1_4_1454_Update/ca)
  phi_stmt_1455 <=> (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1455_entry_sample_req branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1455_loopback_sample_req) (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1455_phi_mux_ack)
  // noblock_obuf_2_4
  RPIPE_noblock_obuf_2_4_1459_inst <=> (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/RPIPE_noblock_obuf_2_4_1459_Sample/rr branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/RPIPE_noblock_obuf_2_4_1459_Update/cr) (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/RPIPE_noblock_obuf_2_4_1459_Sample/ra branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/RPIPE_noblock_obuf_2_4_1459_Update/ca)
  phi_stmt_1460 <=> (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1460_entry_sample_req branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1460_loopback_sample_req) (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1460_phi_mux_ack)
  // noblock_obuf_3_4
  RPIPE_noblock_obuf_3_4_1464_inst <=> (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/RPIPE_noblock_obuf_3_4_1464_Sample/rr branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/RPIPE_noblock_obuf_3_4_1464_Update/cr) (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/RPIPE_noblock_obuf_3_4_1464_Sample/ra branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/RPIPE_noblock_obuf_3_4_1464_Update/ca)
  phi_stmt_1465 <=> (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1465_entry_sample_req branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1465_loopback_sample_req) (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1465_phi_mux_ack)
  // noblock_obuf_4_4
  RPIPE_noblock_obuf_4_4_1469_inst <=> (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/RPIPE_noblock_obuf_4_4_1469_Sample/rr branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/RPIPE_noblock_obuf_4_4_1469_Update/cr) (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/RPIPE_noblock_obuf_4_4_1469_Sample/ra branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/RPIPE_noblock_obuf_4_4_1469_Update/ca)
  phi_stmt_1470 <=> (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1470_entry_sample_req branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1470_loopback_sample_req) (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1470_phi_mux_ack)
  next_active_packet_1553_1473_buf <=> (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/R_next_active_packet_1473_Sample/req branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/R_next_active_packet_1473_Update/req) (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/R_next_active_packet_1473_Sample/ack branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/R_next_active_packet_1473_Update/ack)
  phi_stmt_1474 <=> (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1474_entry_sample_req branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1474_loopback_sample_req) (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1474_phi_mux_ack)
  next_down_counter_1608_1477_buf <=> (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/R_next_down_counter_1477_Sample/req branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/R_next_down_counter_1477_Update/req) (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/R_next_down_counter_1477_Sample/ack branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/R_next_down_counter_1477_Update/ack)
  phi_stmt_1478 <=> (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1478_entry_sample_req branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1478_loopback_sample_req) (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/phi_stmt_1478_phi_mux_ack)
  next_pkt_with_priority_1553_1481_buf <=> (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/R_next_pkt_with_priority_1481_Sample/req branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/R_next_pkt_with_priority_1481_Update/req) (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/R_next_pkt_with_priority_1481_Sample/ack branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/R_next_pkt_with_priority_1481_Update/ack)
  // 			$volatile p1_valid := (pkt_1_e_word [] 32 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 392
  // (pkt_1_e_word [] 32 )
  // pkt_1_e_word
  // 			$volatile p2_valid := (pkt_2_e_word [] 32 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 393
  // (pkt_2_e_word [] 32 )
  // pkt_2_e_word
  // 			$volatile p3_valid := (pkt_3_e_word [] 32 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 394
  // (pkt_3_e_word [] 32 )
  // pkt_3_e_word
  // 			$volatile p4_valid := (pkt_4_e_word [] 32 ) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 395
  // (pkt_4_e_word [] 32 )
  // pkt_4_e_word
  // 			$volatile valid_active_pkt_word_read := ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 397
  // ((( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (active_packet == 1 ) p1_valid  _b0  )  | ( $mux (active_packet == 2 ) p2_valid  _b0  ) )
  // (active_packet == 1 )
  // active_packet
  // p1_valid
  // ( $mux (active_packet == 1 ) p1_valid  _b0  ) 
  // (active_packet == 2 )
  // active_packet
  // p2_valid
  // ( $mux (active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (active_packet == 3 ) p3_valid  _b0  )  | ( $mux (active_packet == 4 ) p4_valid  _b0  ) )
  // (active_packet == 3 )
  // active_packet
  // p3_valid
  // ( $mux (active_packet == 3 ) p3_valid  _b0  ) 
  // (active_packet == 4 )
  // active_packet
  // p4_valid
  // ( $mux (active_packet == 4 ) p4_valid  _b0  ) 
  //  $volatile 			$call prioritySelect (down_counter active_packet pkt_with_priority p1_valid p2_valid p3_valid p4_valid ) (next_active_packet next_pkt_with_priority ) 
  //  file .Aa/switch4x4.opt.aa, line 398
  // down_counter
  // active_packet
  // pkt_with_priority
  // p1_valid
  // p2_valid
  // p3_valid
  // p4_valid
  // 			$volatile valid_active_pkt_length := ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 399
  // ((( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) ) | (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) ))
  // (( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 23 8 )   _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 23 8 )   _b0  ) 
  // (( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  )  | ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 23 8 )   _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // pkt_4_e_word
  // ( $mux (next_active_packet == 4 ) ( $slice pkt_4_e_word 23 8 )   _b0  ) 
  // 			$volatile started_new_packet := ((next_active_packet != 0 ) & (down_counter == 0 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 400
  // ((next_active_packet != 0 ) & (down_counter == 0 ))
  // (next_active_packet != 0 )
  // next_active_packet
  // (down_counter == 0 )
  // down_counter
  // 			$volatile next_down_counter := ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 401
  // started_new_packet
  // (valid_active_pkt_length - 1 )
  // valid_active_pkt_length
  // valid_active_pkt_word_read
  // (down_counter - 1 )
  // down_counter
  // down_counter
  // ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter ) 
  // ( $mux started_new_packet (valid_active_pkt_length - 1 )  ( $mux valid_active_pkt_word_read (down_counter - 1 )  down_counter )  ) 
  // 			$volatile read_from_1 := (( ~ p1_valid ) | (next_active_packet == 1 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 402
  // (( ~ p1_valid ) | (next_active_packet == 1 ))
  // p1_valid
  // (next_active_packet == 1 )
  // next_active_packet
  // 			$volatile read_from_2 := (( ~ p2_valid ) | (next_active_packet == 2 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 403
  // (( ~ p2_valid ) | (next_active_packet == 2 ))
  // p2_valid
  // (next_active_packet == 2 )
  // next_active_packet
  // 			$volatile read_from_3 := (( ~ p3_valid ) | (next_active_packet == 3 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 404
  // (( ~ p3_valid ) | (next_active_packet == 3 ))
  // p3_valid
  // (next_active_packet == 3 )
  // next_active_packet
  // 			$volatile read_from_4 := (( ~ p4_valid ) | (next_active_packet == 4 )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 405
  // (( ~ p4_valid ) | (next_active_packet == 4 ))
  // p4_valid
  // (next_active_packet == 4 )
  // next_active_packet
  // 			$volatile data_to_out := ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  )  $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 406
  // (next_active_packet == 1 )
  // next_active_packet
  // pkt_1_e_word
  // (next_active_packet == 2 )
  // next_active_packet
  // pkt_2_e_word
  // (next_active_packet == 3 )
  // next_active_packet
  // pkt_3_e_word
  // pkt_4_e_word
  // ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  ) 
  // ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  ) 
  // ( $mux (next_active_packet == 1 ) ( $slice pkt_1_e_word 31 0 )   ( $mux (next_active_packet == 2 ) ( $slice pkt_2_e_word 31 0 )   ( $mux (next_active_packet == 3 ) ( $slice pkt_3_e_word 31 0 )   ( $slice pkt_4_e_word 31 0 )  )  )  ) 
  // 			$volatile send_flag := ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )) $buffering 1
  //  file .Aa/switch4x4.opt.aa, line 407
  // ((( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) ) | (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) ))
  // (( $mux (next_active_packet == 1 ) p1_valid  _b0  )  | ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) )
  // (next_active_packet == 1 )
  // next_active_packet
  // p1_valid
  // ( $mux (next_active_packet == 1 ) p1_valid  _b0  ) 
  // (next_active_packet == 2 )
  // next_active_packet
  // p2_valid
  // ( $mux (next_active_packet == 2 ) p2_valid  _b0  ) 
  // (( $mux (next_active_packet == 3 ) p3_valid  _b0  )  | ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) )
  // (next_active_packet == 3 )
  // next_active_packet
  // p3_valid
  // ( $mux (next_active_packet == 3 ) p3_valid  _b0  ) 
  // (next_active_packet == 4 )
  // next_active_packet
  // p4_valid
  // ( $mux (next_active_packet == 4 ) p4_valid  _b0  ) 
  // 			$guard (send_flag) out_data_4 := data_to_out $buffering 1// bits of buffering = 32. 
  //  file .Aa/switch4x4.opt.aa, line 408
  // data_to_out
  // out_data_4
  WPIPE_out_data_4_1693_inst <=> (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/WPIPE_out_data_4_1693_Sample/req branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/WPIPE_out_data_4_1693_Update/req) (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/WPIPE_out_data_4_1693_Sample/ack branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/WPIPE_out_data_4_1693_Update/ack)
  do_while_stmt_1448_branch <=> (branch_block_stmt_1447/do_while_stmt_1448/do_while_stmt_1448_loop_body/condition_evaluated) (branch_block_stmt_1447/do_while_stmt_1448/loop_exit/ack branch_block_stmt_1447/do_while_stmt_1448/loop_taken/ack)
}
